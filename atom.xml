<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山城冰荔枝</title>
  
  
  <link href="http://blog.ioimp.top/atom.xml" rel="self"/>
  
  <link href="http://blog.ioimp.top/"/>
  <updated>2023-12-21T16:53:53.609Z</updated>
  <id>http://blog.ioimp.top/</id>
  
  <author>
    <name>山城冰荔枝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>宏任务和微任务的区别</title>
    <link href="http://blog.ioimp.top/2023/12/22/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.ioimp.top/2023/12/22/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2023-12-21T16:52:10.000Z</published>
    <updated>2023-12-21T16:53:53.609Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>宏任务是由浏览器引擎进行调度和执行的，它们会被放入宏任务队列中，并且按照队列的顺序执行。宏任务的执行时间较长，因此会造成较大的延迟。常见的宏任务包括DOM事件处理、setTimeout和setInterval等。</p><p>微任务是在宏任务执行完毕之后立即执行的任务，它们会被放入微任务队列中，并且在宏任务队列为空时执行。微任务的执行时间较短，因此不会造成较大的延迟。常见的微任务包括Promise的resolve和reject回调、MutationObserver和process.nextTick等。</p><p>由于微任务会在宏任务执行完毕之后立即执行，因此微任务的优先级较高。也就是说，当一个宏任务执行完毕后，会立即执行所有的微任务，而不会等待下一个宏任务。这样可以保证微任务的执行顺序不会被打乱。</p><p>总结起来，宏任务的执行顺序是先进先出，而微任务的执行顺序是后进先出。宏任务的执行时间较长，会造成较大的延迟，而微任务的执行时间较短，不会造成较大的延迟。微任务的优先级较高，会在宏任务执行完毕之后立即执行。<br><img src="/images/image13.png"><br><img src="/images/image14.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>为什么说同步任务是非耗时任务，异步任务是耗时任务</title>
    <link href="http://blog.ioimp.top/2023/12/22/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E5%90%8C%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%98%AF%E9%9D%9E%E8%80%97%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%98%AF%E8%80%97%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://blog.ioimp.top/2023/12/22/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E5%90%8C%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%98%AF%E9%9D%9E%E8%80%97%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%98%AF%E8%80%97%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2023-12-21T16:35:58.000Z</published>
    <updated>2023-12-21T16:43:04.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>同步任务</strong>是指在程序执行过程中，必须等待该任务完成后才能继续执行下面的代码。因为同步任务会阻塞程序的执行，所以它通常被认为是非耗时任务。</p><p><strong>异步任务</strong>是指在程序执行过程中，不需要等待该任务完成就可以继续执行下面的代码。异步任务通常会通过多线程、回调函数或者事件驱动等方式实现。由于异步任务不会阻塞程序的执行，所以它通常被认为是耗时任务。</p><p><strong>需要注意的是</strong>，同步任务和异步任务的耗时性质与任务本身的执行时间没有直接关系。一个同步任务可能执行时间很长，但它会阻塞程序的执行，所以被认为是非耗时任务。而一个异步任务可能执行时间很短，但它不会阻塞程序的执行，所以被认为是耗时任务。</p><p>耗时和非耗时的区分是<strong>相对于程序整体执行流程而言的</strong>。耗时任务通常指的是那些需要较长时间才能完成的任务，比如访问网络、读写大文件、进行复杂计算等。这些任务如果以同步方式执行，会导致程序在等待任务完成期间无法进行任何其他操作，即阻塞了程序的执行流程，用户体验较差。</p><p>非耗时任务则是那些可以迅速完成的任务，如简单的数学计算、修改变量值等。这些任务即使以同步方式执行，也不会对程序的流畅性造成太大影响。</p><p>因此，在编程中，通常会将耗时任务设计为异步执行，以避免阻塞主线程，提高程序的响应性和效率。通过回调函数、Promise、async&#x2F;await等机制，可以在耗时任务完成后再执行相关的操作，而不必让整个程序等待耗时任务的完成。这就是为什么通常将同步任务视为非耗时任务，而将异步任务视为耗时任务的原因。</p><h2 id="同步任务和异步任务的执行过程"><a href="#同步任务和异步任务的执行过程" class="headerlink" title="同步任务和异步任务的执行过程"></a>同步任务和异步任务的执行过程</h2><p><img src="/images/image12.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://blog.ioimp.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="http://blog.ioimp.top/tags/ES6/"/>
    
    <category term="前端学习" scheme="http://blog.ioimp.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Node.js" scheme="http://blog.ioimp.top/tags/Node-js/"/>
    
    <category term="异步操作" scheme="http://blog.ioimp.top/tags/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Node中async/await的详解</title>
    <link href="http://blog.ioimp.top/2023/12/22/Node%E4%B8%ADasync-await%E7%9A%84%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.ioimp.top/2023/12/22/Node%E4%B8%ADasync-await%E7%9A%84%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-12-21T16:23:35.000Z</published>
    <updated>2023-12-21T16:30:07.422Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="async-await的基本使用"><a href="#async-await的基本使用" class="headerlink" title="async&#x2F;await的基本使用"></a>async&#x2F;await的基本使用</h1><p>async&#x2F;await是ES8中引入的新语法，用于简化promise的异步操作。</p><p>使用async关键字修饰函数，表示该函数是一个异步函数。异步函数内部可以使用await关键字来等待一个promise对象的执行结果。</p><p>await关键字可以放在任何返回promise的表达式前面，它会暂停函数的执行，直到promise被解析或拒绝。如果promise被解析，await表达式会返回解析的值；如果promise被拒绝，await表达式会抛出一个错误。</p><p>异步函数可以像普通函数一样返回一个值，返回的值会被包装成一个被解析的promise对象。</p><p>以下是示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步函数示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 使用await等待promise的执行结果</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回一个被解析的promise对象</span></span><br><span class="line">  <span class="keyword">return</span> result.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用异步函数示例</span></span><br><span class="line"><span class="title function_">fetchData</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>fetchData</code>是一个异步函数，使用<code>await</code>关键字等待<code>fetch</code>函数返回的promise对象的执行结果。在<code>fetchData</code>函数内部，可以像同步代码一样使用<code>result</code>变量来访问<code>fetch</code>函数返回的结果。</p><p>调用异步函数时，可以像调用普通函数一样使用<code>.then</code>和<code>.catch</code>方法来处理异步操作的结果。在上面的示例中，使用<code>.then</code>方法来处理异步操作的成功结果，使用<code>.catch</code>方法来处理异步操作的错误结果。</p><p>通过使用async&#x2F;await，我们可以将异步操作的代码写得更加简洁、易读，并且可以避免使用链式调用then的方式。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="1-使用环境"><a href="#1-使用环境" class="headerlink" title="1. 使用环境"></a>1. 使用环境</h2><ul><li><code>async</code>和<code>await</code>是ES7的新特性，需要确保Node版本至少为7.6.0或更高。</li><li><code>async</code>函数返回一个Promise对象，可以使用<code>.then()</code>和<code>.catch()</code>进行链式调用。</li></ul><h2 id="2-错误处理"><a href="#2-错误处理" class="headerlink" title="2. 错误处理"></a>2. 错误处理</h2><ul><li>使用<code>await</code>时，如果Promise被拒绝（reject），会抛出异常。因此需要使用<code>try...catch</code>语句进行错误处理。</li><li>如果没有正确处理错误，可能会导致程序崩溃。</li></ul><h2 id="3-循环中使用"><a href="#3-循环中使用" class="headerlink" title="3. 循环中使用"></a>3. 循环中使用</h2><ul><li>在循环中使用<code>await</code>时，需要注意可能会导致代码变成串行执行，影响性能。</li><li>如果需要并行执行，可以使用<code>Promise.all()</code>。</li></ul><h2 id="4-await的使用"><a href="#4-await的使用" class="headerlink" title="4. await的使用"></a>4. <code>await</code>的使用</h2><ul><li><code>await</code>只能在<code>async</code>函数内部使用。</li><li><code>await</code>后面跟着的应该是一个Promise对象或者任何要等待的值。</li><li>在async修饰的方法中，第一个await之前的代码都是同步执行的，而第一个await之后的代码都会异步执行。</li></ul><h2 id="5-返回值"><a href="#5-返回值" class="headerlink" title="5. 返回值"></a>5. 返回值</h2><ul><li><code>async</code>函数总是返回一个Promise，即使函数内部没有使用<code>await</code>。</li><li>如果<code>async</code>函数内部抛出错误，返回的Promise会被拒绝（reject）。</li></ul><h2 id="6-await的等待"><a href="#6-await的等待" class="headerlink" title="6. await的等待"></a>6. <code>await</code>的等待</h2><ul><li><code>await</code>会暂停其后的代码执行，直到Promise解决（resolve）或拒绝（reject）。</li></ul><h2 id="7-调试"><a href="#7-调试" class="headerlink" title="7. 调试"></a>7. 调试</h2><ul><li>在使用<code>async</code>和<code>await</code>时，可能会使得调试变得更加困难，因为它们会改变错误堆栈的追踪方式。</li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://blog.ioimp.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="http://blog.ioimp.top/tags/ES6/"/>
    
    <category term="前端学习" scheme="http://blog.ioimp.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Node.js" scheme="http://blog.ioimp.top/tags/Node-js/"/>
    
    <category term="异步操作" scheme="http://blog.ioimp.top/tags/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Node中Promise 对象的意思</title>
    <link href="http://blog.ioimp.top/2023/12/21/Node%E4%B8%ADPromise-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%84%8F%E6%80%9D/"/>
    <id>http://blog.ioimp.top/2023/12/21/Node%E4%B8%ADPromise-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%84%8F%E6%80%9D/</id>
    <published>2023-12-21T02:56:30.000Z</published>
    <updated>2023-12-21T16:02:47.417Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Node中Promise-对象的意思"><a href="#Node中Promise-对象的意思" class="headerlink" title="Node中Promise 对象的意思"></a>Node中Promise 对象的意思</h1><p>Promise 对象是 JavaScript 中处理异步操作的一种方式，它代表了一个异步操作的最终完成或失败，并可以返回一个结果或错误。</p><h2 id="Promise-的基本概念"><a href="#Promise-的基本概念" class="headerlink" title="Promise 的基本概念"></a>Promise 的基本概念</h2><ul><li>Promise 是一个构造函数<ul><li>我们可以创建Promise的实例 const p&#x3D; new Promise()</li><li>new 出来的一个实例对象，代表一个异步操作</li></ul></li><li>Promise.prototype上包含then() </li><li>.then（）方法用来预先指定成功和失败的回调函数<ul><li>p.then(成功回调函数，失败的回调函数)</li><li>p.then(result&#x3D;&gt;{},error&#x3D;&gt;{})</li></ul></li></ul><h2 id="Promise-对象有三种状态："><a href="#Promise-对象有三种状态：" class="headerlink" title="Promise 对象有三种状态："></a>Promise 对象有三种状态：</h2><ol><li>Pending（进行中）：初始状态，表示异步操作还在进行中，既不是成功也不是失败状态。</li><li>Fulfilled（已完成）：表示异步操作成功完成，并返回了一个结果。</li><li>Rejected（已失败）：表示异步操作失败，并返回了一个错误。</li></ol><p>Promise 对象的构造函数接受一个执行器函数作为参数，这个执行器函数有两个参数，分别是 resolve 和 reject 函数。在执行器函数中，我们可以执行异步操作，并在适当的时候调用 resolve 或 reject 函数来改变 Promise 对象的状态。</p><h2 id="Promise-对象具有以下特点："><a href="#Promise-对象具有以下特点：" class="headerlink" title="Promise 对象具有以下特点："></a>Promise 对象具有以下特点：</h2><ol><li>Promise 对象是不可变的，一旦状态改变就无法再次改变。</li><li>Promise 对象可以通过 <code>.then()</code> 方法添加成功状态的回调函数，通过 <code>.catch()</code> 方法添加失败状态的回调函数，也可以使用 <code>.finally()</code> 方法添加无论成功或失败都会执行的回调函数。</li><li>Promise 对象可以通过 Promise 链实现对多个异步操作的串行或并行处理。</li><li>Promise 对象可以通过 <code>async/await</code> 语法进行更简洁的异步操作处理。</li></ol><h2 id="可以用console-dir-Promise-来查课Promise对象的属性"><a href="#可以用console-dir-Promise-来查课Promise对象的属性" class="headerlink" title="可以用console.dir(Promise) 来查课Promise对象的属性"></a>可以用console.dir(Promise) 来查课Promise对象的属性</h2><p>使用 Promise 对象可以更好地处理异步操作，避免了回调地狱和层层嵌套的问题，使代码更加清晰和可维护。<br><code>console.dir</code> 是 JavaScript 中的一个方法，用于将一个对象的所有可枚举属性打印到控制台中，以便查看对象的结构和属性。</p><p>该方法接受一个对象作为参数，并将对象的属性以键值对的形式打印到控制台中。与 <code>console.log()</code> 方法不同，<code>console.dir()</code> 方法会显示对象的属性的详细信息，包括属性名称、属性值和属性的数据类型。</p><p><code>console.dir()</code> 方法在调试和开发过程中非常有用，可以帮助开发人员了解对象的结构和属性，以便更好地理解和调试代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 利用node  fs模块进行的读取文件操作 三次嵌套容易引起回调地狱</span></span><br><span class="line"><span class="comment">// const &#123; error &#125; = require(&#x27;console&#x27;);</span></span><br><span class="line"><span class="comment">// let fs = require(&#x27;fs&#x27;);</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./file/test1.txt&#x27;,&#x27;utf-8&#x27;,(error,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     if(error) console.log(error.message)</span></span><br><span class="line"><span class="comment">//     console.log(res)</span></span><br><span class="line"><span class="comment">//     fs.readFile(&#x27;./file/test2.txt&#x27;,&#x27;utf-8&#x27;,(error,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         if(error) console.log(error.message)</span></span><br><span class="line"><span class="comment">//         console.log(res)</span></span><br><span class="line"><span class="comment">//         fs.readFile(&#x27;./file/test3.txt&#x27;,&#x27;utf-8&#x27;,(error,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//             if(error) console.log(error.message)</span></span><br><span class="line"><span class="comment">//             console.log(res)</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用then-fs来进行文件读取操作（未进行顺序处理）</span></span><br><span class="line"><span class="comment">// import thenFs from &#x27;then-fs&#x27;</span></span><br><span class="line"><span class="comment">// thenFs.readFile(&#x27;./file/test.txt&#x27;,&#x27;utf8&#x27;).then((r1)=&gt;&#123;console.log(r1)&#125;)</span></span><br><span class="line"><span class="comment">// thenFs.readFile(&#x27;./file/test2.txt&#x27;,&#x27;utf8&#x27;).then((r2)=&gt;&#123;console.log(r2)&#125;)</span></span><br><span class="line"><span class="comment">// thenFs.readFile(&#x27;./file/test3.txt&#x27;,&#x27;utf8&#x27;).then((r3)=&gt;&#123;console.log(r3)&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// then-fs顺序处理</span></span><br><span class="line"><span class="keyword">import</span> thenFs <span class="keyword">from</span> <span class="string">&#x27;then-fs&#x27;</span></span><br><span class="line">thenFs.<span class="title function_">readFile</span>(<span class="string">&#x27;./file/test.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">r1</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r1)</span><br><span class="line">    <span class="keyword">return</span> thenFs.<span class="title function_">readFile</span>(<span class="string">&#x27;./file/test2.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">r2</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(r2)</span><br><span class="line">        thenFs.<span class="title function_">readFile</span>(<span class="string">&#x27;./file/test3.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">r3</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(r3)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://blog.ioimp.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="http://blog.ioimp.top/tags/ES6/"/>
    
    <category term="前端学习" scheme="http://blog.ioimp.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Node.js" scheme="http://blog.ioimp.top/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>npm和pnpm的区别</title>
    <link href="http://blog.ioimp.top/2023/12/21/npm%E5%92%8Cpnpm%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.ioimp.top/2023/12/21/npm%E5%92%8Cpnpm%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2023-12-21T01:43:41.000Z</published>
    <updated>2023-12-21T01:44:43.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>pnpm 和 npm 都是 JavaScript 包管理工具，用于安装和管理项目的依赖。</p><ol><li><p>安装速度：pnpm 在安装依赖时使用了硬链接的方式，可以复用已安装的依赖，因此安装速度更快。而 npm 则会将依赖完全复制到项目的 <code>node_modules</code> 目录中，因此安装速度相对较慢。</p></li><li><p>磁盘空间占用：由于 pnpm 使用了硬链接的方式，相同的依赖只会在磁盘上占用一份空间，因此 pnpm 的磁盘空间占用相对较小。而 npm 则会将每个项目的依赖都完整地复制到项目的 <code>node_modules</code> 目录中，因此磁盘空间占用较大。</p></li><li><p>内存占用：pnpm 在安装和运行时只需要占用较少的内存，因为它使用了硬链接和符号链接来共享依赖。而 npm 则需要占用较多的内存，因为它会将所有的依赖都解压到内存中。</p></li><li><p>兼容性：由于 pnpm 使用了硬链接和符号链接的方式，可能在某些操作系统或文件系统上不兼容。而 npm 则是使用了标准的文件复制方式，因此更加兼容。</p></li></ol><p>综上所述，pnpm 相对于 npm 来说，在安装速度、磁盘空间占用和内存占用方面有一定的优势，但在兼容性方面可能存在一些问题。因此，在选择使用哪个工具时，可以根据具体的项目需求和环境来决定。</p><p>pnpm 在安装依赖时会将依赖信息添加到项目的 package.json 文件中。这与 npm 的行为是一致的。当你使用 pnpm 安装依赖时，会自动更新 package.json 文件的 dependencies 或 devDependencies 字段，将安装的依赖添加到其中，以便项目在其他环境中能够正确地安装和运行所需的依赖。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://blog.ioimp.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="http://blog.ioimp.top/tags/ES6/"/>
    
    <category term="前端学习" scheme="http://blog.ioimp.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Node.js" scheme="http://blog.ioimp.top/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy_Splash的使用</title>
    <link href="http://blog.ioimp.top/2023/12/03/13-Scrapy-Splash%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.ioimp.top/2023/12/03/13-Scrapy-Splash%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-12-03T04:00:18.000Z</published>
    <updated>2023-12-03T04:02:14.277Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Scrapy-splash模块使用"><a href="#Scrapy-splash模块使用" class="headerlink" title="Scrapy_splash模块使用"></a>Scrapy_splash模块使用</h1><h2 id="一-Splash"><a href="#一-Splash" class="headerlink" title="一. Splash"></a>一. Splash</h2><p>后续的爬虫的课程. 随便随时来听.  – 樵夫说的. </p><p>splash是一个可以动态渲染js的工具. 有助于我们完成复杂的js内容加载工作.  你可以理解为另一个没有界面的selenium.</p><h3 id="1-1-splash安装"><a href="#1-1-splash安装" class="headerlink" title="1.1 splash安装"></a>1.1 splash安装</h3><p>splash的安装过程十分复杂. 复杂到官方都不推荐你去手动安装它. </p><p>官方建议. 用docker去安装splash. 所以. 你需要先去安装docker. 但是docker这玩意在windows上支持非常不好. 各种各样的问题. 外加上后期我们要把爬虫部署到linux. 那干脆. 我们就安装一个linux. 在linux上搞docker是非常easy的. </p><p>有能力, 不怕苦的同学可以在windows上搞一个docker试试. 我这里就不带你们找坑踩了. 直接上Linux. </p><h4 id="1-1-1安装VM"><a href="#1-1-1安装VM" class="headerlink" title="1.1.1安装VM"></a>1.1.1安装VM</h4><p><img src="/images/scrapy02/17561629196138_.pic_hd.jpg" alt="17561629196138_.pic_hd"></p><p><img src="/images/scrapy02/17561629196138_.pic.jpg" alt="17561629196138_.pic"></p><p><img src="/images/scrapy02/17581629196184_.pic.jpg" alt="17581629196184_.pic"></p><p><img src="/images/scrapy02/17571629196155_.pic-9199960.jpg" alt="17571629196155_.pic"></p><p><img src="/images/scrapy02/17581629196184_.pic-9199973.jpg" alt="17581629196184_.pic"></p><p><img src="/images/scrapy02/17591629196208_.pic.jpg" alt="17591629196208_.pic"></p><p><img src="/images/scrapy02/17601629196228_.pic.jpg" alt="17601629196228_.pic"></p><p><img src="/images/scrapy02/17611629196237_.pic.jpg" alt="17611629196237_.pic"></p><p><img src="/images/scrapy02/17621629196250_.pic_hd.jpg" alt="17621629196250_.pic_hd"></p><p><img src="/images/scrapy02/17631629196343_.pic_hd.jpg" alt="17631629196343_.pic_hd"></p><p><img src="/images/scrapy02/17641629196362_.pic_hd.jpg" alt="17641629196362_.pic_hd"></p><p><img src="/images/scrapy02/17651629196369_.pic_hd.jpg" alt="17651629196369_.pic_hd"></p><p><img src="/images/scrapy02/17661629196398_.pic_hd.jpg" alt="17661629196398_.pic_hd"></p><p><img src="/images/scrapy02/17671629196461_.pic_hd.jpg" alt="17671629196461_.pic_hd"></p><p><img src="/images/scrapy02/17681629196491_.pic_hd.jpg" alt="17681629196491_.pic_hd"></p><p><img src="/images/scrapy02/17691629196532_.pic_hd.jpg" alt="17691629196532_.pic_hd"></p><p><img src="/images/scrapy02/17701629196571_.pic_hd.jpg" alt="17701629196571_.pic_hd"></p><p><img src="/images/scrapy02/17711629196622_.pic_hd.jpg" alt="17711629196622_.pic_hd"></p><p><img src="/images/scrapy02/17721629196663_.pic_hd.jpg" alt="17721629196663_.pic_hd"></p><p><img src="/images/scrapy02/17731629196679_.pic_hd.jpg" alt="17731629196679_.pic_hd"></p><h4 id="1-1-2-安装Linux"><a href="#1-1-2-安装Linux" class="headerlink" title="1.1.2 安装Linux"></a>1.1.2 安装Linux</h4><img src="image-20210817140222006.png" alt="image-20210817140222006" style="zoom:50%;" /><img src="image-20210817140422074.png" alt="image-20210817140422074" style="zoom:40%;" /><img src="image-20210817140631614.png" alt="image-20210817140631614" style="zoom:40%;" /><img src="image-20210817140748141.png" alt="image-20210817140748141" style="zoom:40%;" /><img src="image-20210817140818074.png" alt="image-20210817140818074" style="zoom:40%;" /><img src="image-20210817140849908.png" alt="image-20210817140849908" style="zoom:40%;" /><img src="image-20210817140925752.png" alt="image-20210817140925752" style="zoom:40%;" /><img src="image-20210817141200195.png" alt="image-20210817141200195" style="zoom:50%;" /><img src="image-20210817141307223.png" alt="image-20210817141307223" style="zoom:50%;" /><img src="image-20210817141415716.png" alt="image-20210817141415716" style="zoom:40%;" /><img src="image-20210817141552531.png" alt="image-20210817141552531" style="zoom:40%;" /><img src="image-20210817141643259.png" alt="image-20210817141643259" style="zoom:40%;" /><img src="image-20210817141729496.png" alt="image-20210817141729496" style="zoom:40%;" /><img src="image-20210817141824889.png" alt="image-20210817141824889" style="zoom:40%;" /><img src="image-20210817141850749.png" alt="image-20210817141850749" style="zoom:40%;" /><img src="image-20210817142347367.png" alt="image-20210817142347367" style="zoom:40%;" /><img src="image-20210817142421655.png" alt="image-20210817142421655" style="zoom:50%;" /><img src="image-20210817142519453.png" alt="image-20210817142519453" style="zoom:40%;" /><img src="image-20210817142634663.png" alt="image-20210817142634663" style="zoom:40%;" /><p>安装好的linux后,我们需要学会使用linux的一个工具. 叫yum, 我们需要用它来帮我们完成各种软件的安装. 十分的方便. 我们先用<code>ifconfig</code>来做一个测试. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum search ifconfig   // 搜索出ifconfig的包</span><br><span class="line"></span><br><span class="line">yum install net-tools.x86_64  // 安装该软件, 安装过程中会出现很多个询问. 直接y即可</span><br></pre></td></tr></table></figure><p>发现了吧, 在linux这个破黑窗口里. 属实难受+憋屈. 所以, 我们这里选择用ssh远程连接linux. </p><p>mac版本:  打开终端. 输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@服务器ip地址</span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure><p>就可以顺利的链接到你的linux服务器. 接下来. 我们可以使用各种命令来操纵linux了. </p><p>Windows: </p><p><img src="/images/scrapy02/17751629199547_.pic_hd.jpg" alt="17751629199547_.pic_hd"></p><p><img src="/images/scrapy02/17791629200276_.pic_hd.jpg" alt="17791629200276_.pic_hd"></p><p><img src="/images/scrapy02/17761629199585_.pic_hd.jpg" alt="17761629199585_.pic_hd"></p><p><img src="/images/scrapy02/17771629199596_.pic_hd.jpg" alt="17771629199596_.pic_hd"></p><p><img src="/images/scrapy02/17781629199688_.pic_hd.jpg" alt="17781629199688_.pic_hd"></p><h4 id="1-1-3-安装docker"><a href="#1-1-3-安装docker" class="headerlink" title="1.1.3 安装docker"></a>1.1.3 安装docker</h4><p>​安装docker就一条例命令就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sylar-centos-2 ~]# yum install docker</span><br></pre></td></tr></table></figure><p>​配置docker的源. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@sylar-centos-2 ~]# vi /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入一下内容, 注意.先按<span class="string">&#x27;i&#x27;</span>, 更换为输入模式. 然后再填写内容</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com/&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存: 先按esc. 退出输入模式, 然后输入<span class="string">&quot;:wq&quot;</span> 表示写入, 退出. 就完事儿了</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sylar-centos-2 ~]# systemctl start docker    # 启动docker</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sylar-centos-2 ~]# docker ps      # 查看docker运行状态</span><br></pre></td></tr></table></figure><p>如需关闭或者重新启动docker:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker   # 停止docker服务</span><br><span class="line">systemctl restart docker  # 重启docker服务</span><br></pre></td></tr></table></figure><p>Vm -&gt; cenos -&gt; ssh -&gt; docker -&gt; splash </p><h4 id="1-1-4-安装splash"><a href="#1-1-4-安装splash" class="headerlink" title="1.1.4 安装splash"></a>1.1.4 安装splash</h4><ol><li><p>拉取splash镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull scrapinghub/splash</span><br></pre></td></tr></table></figure><p>splash比较大. 大概2个G左右. 有点儿耐心等会儿就好了</p></li><li><p>运行splash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8050:8050 scrapinghub/splash</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器访问splash</p><p><a href="http://192.168.31.82:8050/">http://192.168.31.82:8050/</a></p><p><img src="/images/scrapy02/image-20210817153337076.png" alt="image-20210817153337076"></p></li></ol><h3 id="1-2-splash简单使用"><a href="#1-2-splash简单使用" class="headerlink" title="1.2 splash简单使用"></a>1.2 splash简单使用</h3><p>​我们可以在文本框内输入百度的网址. 然后点击render. 可以看到splash会对我们的网页进行动态的加载. 并返回截图. 运行状况. 以及页面代码(经过js渲染后的)</p><p><img src="/images/scrapy02/image-20210817153704882.png" alt="image-20210817153704882"></p><p><img src="/images/scrapy02/image-20210817153711026.png" alt="image-20210817153711026"></p><p>快速解释一下, script中的脚本. 这里面用的是lua的脚本语法. 所以看起来会有些难受. </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span>  <span class="comment">-- 主函数</span></span><br><span class="line">  <span class="built_in">assert</span>(splash:go(args.url))  <span class="comment">-- 进入xxx页面</span></span><br><span class="line">  <span class="built_in">assert</span>(splash:wait(<span class="number">0.5</span>))   <span class="comment">-- 等待0.5秒</span></span><br><span class="line">  <span class="keyword">return</span> &#123;  <span class="comment">-- 返回</span></span><br><span class="line">    html = splash:html(),  <span class="comment">-- splash:html() 页面源代码</span></span><br><span class="line">    png = splash:png(),   <span class="comment">-- splash:png() 页面截图</span></span><br><span class="line">    har = splash:har(),   <span class="comment">-- splash:har() 页面加载过程</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">end</span>   <span class="comment">-- 函数结束</span></span><br></pre></td></tr></table></figure><p>有必要说明一下. 在lua中, <code>.</code>表示的是属性(变量), <code>:</code>表示的是方法(函数)的调用. </p><p>常见操作符都一样. 剩下的. 我们到案例里看. </p><h3 id="1-3-splash的http-api接口"><a href="#1-3-splash的http-api接口" class="headerlink" title="1.3 splash的http-api接口"></a>1.3 splash的http-api接口</h3><p>splash提供了对外的http-api接口. 我们可以像访问一个普通url一样访问splash. 并由splash帮助我们渲染好页面内容. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.31</span><span class="number">.82</span>:<span class="number">8050</span>/render.html?url=http://www.baidu.com</span><br></pre></td></tr></table></figure><p>虽然看不出任何差别. 但是你心里要清楚一个事情. 此时拿到的直接是经过js渲染后的html</p><p>我们换个url你就知道了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.31</span><span class="number">.82</span>:<span class="number">8050</span>/render.html?url=https://www.endata.com.cn/BoxOffice/BO/Year/index.html&amp;wait=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>endata这个网站. 它的数据是后期经过ajax请求二次加载进来的. 我们通过splash可以等待它后期加载完再拿html. </p><p>综上, splash的工作机制:</p><p><img src="/images/scrapy02/image-20210817155156714.png" alt="image-20210817155156714"></p><p>整个一个代理服务器的逻辑. ~~~~</p><h2 id="二-python中使用splash"><a href="#二-python中使用splash" class="headerlink" title="二. python中使用splash"></a>二. python中使用splash</h2><h3 id="2-1-splash在python中如何使用"><a href="#2-1-splash在python中如何使用" class="headerlink" title="2.1 splash在python中如何使用"></a>2.1 splash在python中如何使用</h3><p>既然splash提供了http-api接口. 那我们就可以像请求普通网站一样去请求到splash.<br>在python中, 我们最熟悉的能发送http请求的东西就是requests了. </p><p>接下来.我们就用requests来完成splash的对接. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># splash提供的api接口</span></span><br><span class="line"><span class="string">渲染html的接口</span></span><br><span class="line"><span class="string">http://192.168.31.184:8050/render.html?url=你的url&amp;wait=等待时间&amp;time_out=超时时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">截图的接口</span></span><br><span class="line"><span class="string">http://192.168.31.184:8050/render.png  参数和render.html基本一致, 可选width, height</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">加载过程接口</span></span><br><span class="line"><span class="string">http://192.168.31.184:8050/render.har  参数和render.html基本一致</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">json接口</span></span><br><span class="line"><span class="string">http://192.168.31.184:8050/render.json  参数和render.html基本一致</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">执行lua脚本的接口</span></span><br><span class="line"><span class="string">http://192.168.31.184:8050/execute?lua_source=你要执行的lua脚本</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最简单的调用splash的render.html</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.31.184:8050/render.html?url=https://www.baidu.com&amp;wait=5&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><h3 id="2-2-我们以网易新闻首页要闻为例"><a href="#2-2-我们以网易新闻首页要闻为例" class="headerlink" title="2.2 我们以网易新闻首页要闻为例."></a>2.2 我们以网易新闻首页<code>要闻</code>为例.</h3><p>先搞定脚本部分.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">    <span class="built_in">assert</span>(splash:go(args.url))</span><br><span class="line">    <span class="built_in">assert</span>(splash:wait(<span class="number">1</span>))</span><br><span class="line">    <span class="comment">-- 加载一段js, 后面作为lua函数进行调用. </span></span><br><span class="line">    <span class="comment">-- 在这个脚本中, 主要返回了&quot;加载更多&quot;按钮的状态</span></span><br><span class="line">    get_display_style = splash:jsfunc(<span class="string">[[</span></span><br><span class="line"><span class="string">      function()&#123;</span></span><br><span class="line"><span class="string">        return document.getElementsByClassName(&#x27;load_more_btn&#x27;)[0].style.display;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]]</span>)</span><br><span class="line">    <span class="comment">-- lua中的循环语句. 和python的while功能一样. </span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">do</span>  <span class="comment">-- 语法规定. 相当于开始</span></span><br><span class="line">        <span class="comment">-- 直接运行js代码, 滚动到&#x27;加载更多&#x27;按钮</span></span><br><span class="line">        splash:runjs(<span class="string">&quot;document.getElementsByClassName(&#x27;load_more_btn&#x27;)[0].scrollIntoView(true)&quot;</span>)</span><br><span class="line">        <span class="comment">-- 等待</span></span><br><span class="line">        splash:wait(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">-- 找到该按钮. 点击它</span></span><br><span class="line">        splash:<span class="built_in">select</span>(<span class="string">&quot;.load_more_btn&quot;</span>).click()</span><br><span class="line">        <span class="comment">-- 调用上方预制的js脚本, 获取&#x27;正在加载按钮&#x27;的状态</span></span><br><span class="line">        display_style = get_display_style()</span><br><span class="line">        <span class="comment">-- 如果不显示了. 也就结束了</span></span><br><span class="line">        <span class="keyword">if</span>(display_style== <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span>  <span class="comment">-- 同python中的break. 打断循环</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">assert</span>(splash:wait(<span class="number">2</span>)) <span class="comment">-- 不在乎多等2秒</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        html = splash:html(),</span><br><span class="line">        png = splash:png(),</span><br><span class="line">        har = splash:har(),</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>到了python里面就可以使用这个脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行lua脚本</span></span><br><span class="line">lua = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function main(splash, args)</span></span><br><span class="line"><span class="string">    assert(splash:go(args.url))</span></span><br><span class="line"><span class="string">    assert(splash:wait(0.5))</span></span><br><span class="line"><span class="string">    -- 加载一段js, 后面作为lua函数进行调用. </span></span><br><span class="line"><span class="string">    -- 在这个脚本中, 主要返回了&quot;加载更多&quot;按钮的状态</span></span><br><span class="line"><span class="string">    get_display_style = splash:jsfunc([[</span></span><br><span class="line"><span class="string">      function()&#123;</span></span><br><span class="line"><span class="string">        return document.getElementsByClassName(&#x27;load_more_btn&#x27;)[0].style.display;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]])</span></span><br><span class="line"><span class="string">    -- lua中的循环语句. 和python的while功能一样. </span></span><br><span class="line"><span class="string">    while (true)</span></span><br><span class="line"><span class="string">    do  -- 语法规定. 相当于开始</span></span><br><span class="line"><span class="string">        -- 直接运行js代码, 滚动到&#x27;加载更多&#x27;按钮</span></span><br><span class="line"><span class="string">        splash:runjs(&quot;document.getElementsByClassName(&#x27;load_more_btn&#x27;)[0].scrollIntoView(true)&quot;)</span></span><br><span class="line"><span class="string">        -- 等待</span></span><br><span class="line"><span class="string">        splash:wait(1)</span></span><br><span class="line"><span class="string">        -- 找到该按钮. 点击它</span></span><br><span class="line"><span class="string">        splash:select(&quot;.load_more_btn&quot;).click()</span></span><br><span class="line"><span class="string">        -- 调用上方预制的js脚本, 获取&#x27;正在加载按钮&#x27;的状态</span></span><br><span class="line"><span class="string">        display_style = get_display_style()</span></span><br><span class="line"><span class="string">        -- 如果不显示了. 也就结束了</span></span><br><span class="line"><span class="string">        if(display_style== &#x27;none&#x27;)</span></span><br><span class="line"><span class="string">        then</span></span><br><span class="line"><span class="string">            break  -- 同python中的break. 打断循环</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    assert(splash:wait(2)) -- 不在乎多等2秒</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        html = splash:html(),    -- 拿到页面源代码</span></span><br><span class="line"><span class="string">        cookies = splash:get_cookies()  -- 拿到cookies</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备能够执行lua脚本的url  -&gt; splash服务地址</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.31.82:8050/execute&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程访问splash, 执行脚本</span></span><br><span class="line">resp = requests.get(url, params=&#123;</span><br><span class="line">    <span class="string">&quot;url&quot;</span>:<span class="string">&quot;https://news.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lua_source&quot;</span>: lua</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">result = resp.json()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取结果</span></span><br><span class="line">tree = etree.HTML(result.get(<span class="string">&#x27;html&#x27;</span>))</span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line">divs = tree.xpath(<span class="string">&quot;//ul[@class=&#x27;newsdata_list fixed_bar_padding noloading&#x27;]/li[1]/div[2]/div&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    a = div.xpath(<span class="string">&quot;./div/div/h3/a&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    a = a[<span class="number">0</span>]</span><br><span class="line">    href = a.xpath(<span class="string">&#x27;./@href&#x27;</span>)</span><br><span class="line">    title = a.xpath(<span class="string">&#x27;./text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(title, href)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.get(<span class="string">&quot;cookies&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>##三. scrapy_splash</p><p>安装scrapy_splash模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy_splash</span><br></pre></td></tr></table></figure><p>创建一个普通的scrapy项目, 然后把scrapy_splash配置到settings文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># scrapy_splash</span></span><br><span class="line"><span class="comment"># 渲染服务的url, 这里换成你自己的</span></span><br><span class="line">SPLASH_URL = <span class="string">&#x27;http://192.168.31.82:8050&#x27;</span></span><br><span class="line"><span class="comment"># 下载器中间件, 这个必须要配置</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapy_splash.SplashCookiesMiddleware&#x27;</span>: <span class="number">723</span>,</span><br><span class="line">    <span class="string">&#x27;scrapy_splash.SplashMiddleware&#x27;</span>: <span class="number">725</span>,</span><br><span class="line">    <span class="string">&#x27;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&#x27;</span>: <span class="number">810</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个可由可无</span></span><br><span class="line"><span class="comment"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;scrapy_splash.SplashDeduplicateArgsMiddleware&#x27;: 100,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># 去重过滤器, 这个必须要配置</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&#x27;scrapy_splash.SplashAwareDupeFilter&#x27;</span></span><br><span class="line"><span class="comment"># 使用Splash的Http缓存, 这个必须要配置</span></span><br><span class="line">HTTPCACHE_STORAGE = <span class="string">&#x27;scrapy_splash.SplashAwareFSCacheStorage&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后. 整理修改一下spider</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy_splash.request <span class="keyword">import</span> SplashRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># splash的lua脚本</span></span><br><span class="line">lua_source = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function main(splash, args)  -- 主函数</span></span><br><span class="line"><span class="string">    assert(splash:go(&quot;https://news.163.com/&quot;))  -- 访问url</span></span><br><span class="line"><span class="string">    assert(splash:wait(2))  -- 等待</span></span><br><span class="line"><span class="string">    -- 预存一个js函数</span></span><br><span class="line"><span class="string">    get_btn_display = splash:jsfunc([[</span></span><br><span class="line"><span class="string">        function()&#123;</span></span><br><span class="line"><span class="string">            return document.getElementsByClassName(&#x27;load_more_btn&#x27;)[0].style.display;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]])</span></span><br><span class="line"><span class="string">    -- lua的while循环</span></span><br><span class="line"><span class="string">    while(true)</span></span><br><span class="line"><span class="string">    do</span></span><br><span class="line"><span class="string">        -- 直接执行一个js脚本</span></span><br><span class="line"><span class="string">        -- 向下拉动滚动条. </span></span><br><span class="line"><span class="string">        splash:runjs(&quot;document.getElementsByClassName(&#x27;load_more_btn&#x27;)[0].scrollIntoView(true)&quot;)</span></span><br><span class="line"><span class="string">        assert(splash:wait(1))</span></span><br><span class="line"><span class="string">        -- 选择 &quot;加载更多&quot;</span></span><br><span class="line"><span class="string">        btn = splash:select(&quot;.load_more_btn&quot;)</span></span><br><span class="line"><span class="string">        -- 点它</span></span><br><span class="line"><span class="string">        btn:click()</span></span><br><span class="line"><span class="string">        -- 判断是否可见 调用上方预制的js函数</span></span><br><span class="line"><span class="string">        ss = get_btn_display()</span></span><br><span class="line"><span class="string">        -- 如果是none. 就没有数据了(网易自己设计的)</span></span><br><span class="line"><span class="string">        if (ss == &#x27;none&#x27;)</span></span><br><span class="line"><span class="string">        then</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        html = splash:html(),</span></span><br><span class="line"><span class="string">        cookies = splash:get_cookies()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WangyiSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;wangyi&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;163.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://news.163.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 发送splash请求</span></span><br><span class="line">        <span class="keyword">yield</span> SplashRequest(</span><br><span class="line">            url=self.start_urls[<span class="number">0</span>],</span><br><span class="line">            callback=self.parse,</span><br><span class="line">            endpoint=<span class="string">&quot;execute&quot;</span>,</span><br><span class="line">            args=&#123;<span class="string">&quot;lua_source&quot;</span>: lua_source, &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        divs = resp.xpath(<span class="string">&quot;//ul[@class=&#x27;newsdata_list fixed_bar_padding noloading&#x27;]/li[1]/div[2]/div&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">            a = div.xpath(<span class="string">&quot;./div/div/h3/a&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            href = a.xpath(<span class="string">&#x27;./@href&#x27;</span>).extract_first()</span><br><span class="line">            title = a.xpath(<span class="string">&#x27;./text()&#x27;</span>).extract_first()</span><br><span class="line">            <span class="built_in">print</span>(href)</span><br><span class="line">            <span class="comment"># 可以采用正常的抓取方案</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">                url=href,</span><br><span class="line">                callback=self.details</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">details</span>(<span class="params">self, resp</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, mode=<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&quot;____&quot;</span>.join(resp.xpath(<span class="string">&quot;//div[@class=&#x27;post_body&#x27;]//p/text()&quot;</span>).extract()))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="爬虫开发" scheme="http://blog.ioimp.top/categories/%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Scrapy爬虫" scheme="http://blog.ioimp.top/tags/Scrapy%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Scarpy_分布式爬虫</title>
    <link href="http://blog.ioimp.top/2023/12/03/Scarpy-%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB/"/>
    <id>http://blog.ioimp.top/2023/12/03/Scarpy-%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB/</id>
    <published>2023-12-03T03:59:26.000Z</published>
    <updated>2023-12-03T04:04:23.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分布式爬虫"><a href="#分布式爬虫" class="headerlink" title="分布式爬虫"></a>分布式爬虫</h1><h2 id="一-增量式爬虫"><a href="#一-增量式爬虫" class="headerlink" title="一. 增量式爬虫"></a>一. 增量式爬虫</h2><p>​增量式爬虫, 顾名思义. 可以对网站进行反复抓取. 然后发现新东西了就保存起来. 遇到了以前抓取过的内容就自动过滤掉即可. 其核心思想就两个字. 去重. 并且可以反复去重. 今天运行一下. 明天再运行一下. 将不同的数据过滤出来. 相同的数据去除掉(不保存)即可. </p><p>​此时, 我们以天涯为目标来尝试一下完成增量式爬虫. </p><p>spider: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">from</span> tianya.items <span class="keyword">import</span> TianyaItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TySpider</span>(scrapy.Spider):</span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;ty&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;tianya.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://bbs.tianya.cn/list-worldlook-1.shtml&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        self.red = Redis(password=<span class="string">&quot;123456&quot;</span>, db=<span class="number">6</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        tbodys = resp.css(<span class="string">&quot;.tab-bbs-list tbody&quot;</span>)[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">for</span> tbody <span class="keyword">in</span> tbodys:</span><br><span class="line">            hrefs = tbody.xpath(<span class="string">&quot;./tr/td[1]/a/@href&quot;</span>).extract()</span><br><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> hrefs:</span><br><span class="line">                <span class="comment"># 两个方案.</span></span><br><span class="line">                url = resp.urljoin(h)</span><br><span class="line">                <span class="comment"># 判断是否在该set集合中有数据</span></span><br><span class="line">                r = self.red.sismember(<span class="string">&quot;tianya:details&quot;</span>, url)  </span><br><span class="line">                <span class="comment">#   1. url去重. 优点: 简单, 缺点: 如果有人回复了帖子.就无法提取到最新的数据了</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> r:</span><br><span class="line">                    <span class="keyword">yield</span> scrapy.Request(url=resp.urljoin(h), callback=self.parse_details)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;该url已经被抓取过<span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        next_href = resp.xpath(<span class="string">&quot;//div[@class=&#x27;short-pages-2 clearfix&#x27;]/div[@class=&#x27;links&#x27;]/a[last()]/@href&quot;</span>).extract_first()</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=resp.urljoin(next_href), callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_details</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        title = resp.xpath(<span class="string">&#x27;//*[@id=&quot;post_head&quot;]/h1/span[1]/span/text()&#x27;</span>).extract_first()</span><br><span class="line">        content = resp.xpath(<span class="string">&#x27;//*[@id=&quot;bd&quot;]/div[4]/div[1]/div/div[2]/div[1]/text()&#x27;</span>).extract_first()</span><br><span class="line">        item = TianyaItem()</span><br><span class="line">        item[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line">        item[<span class="string">&#x27;content&#x27;</span>] = content</span><br><span class="line">        <span class="comment"># 提取完数据. 该url进入redis</span></span><br><span class="line">        self.red.sadd(<span class="string">&quot;tianya:details&quot;</span>, resp.url)  </span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​pipelines</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># useful for handling different item types with a single interface</span></span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TianyaPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="comment">#   2. 数据内容去重. 优点: 保证数据的一致性. 缺点: 需要每次都把数据从网页中提取出来</span></span><br><span class="line">        <span class="built_in">print</span>(json.dumps(<span class="built_in">dict</span>(item)))</span><br><span class="line">        r = self.red.sadd(<span class="string">&quot;tianya:pipelines:items&quot;</span>, json.dumps(<span class="built_in">dict</span>(item)))</span><br><span class="line">        <span class="keyword">if</span> r:</span><br><span class="line">            <span class="comment"># 进入数据库</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;存入数据库&quot;</span>, item[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已经在数据里了&quot;</span>, item[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.red = Redis(password=<span class="string">&quot;123456&quot;</span>, db=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.red.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述方案是直接用redis进行的去重. 我们还可以选择使用数据库, mongodb进行过滤. 原理都一样, 不在赘述. </p><h2 id="二-分布式爬虫"><a href="#二-分布式爬虫" class="headerlink" title="二. 分布式爬虫"></a>二. 分布式爬虫</h2><p>​分布式爬虫, 就是搭建一个分布式的集群, 让其对一组资源进行分布联合爬取. </p><p>​既然要集群来抓取. 意味着会有好几个爬虫同时运行. 那此时就非常容易产生这样一个问题. 如果有重复的url怎么办?  在原来的程序中. scrapy中会由调度器来自动完成这个任务. 但是, 此时是多个爬虫一起跑. 而我们又知道不同的机器之间是不能直接共享调度器的. 怎么办? 我们可以采用redis来作为各个爬虫的调度器. 此时我们引出一个新的模块叫scrapy-redis. 在该模块中提供了这样一组操作. 它们重写了scrapy中的调度器. 并将调度队列和去除重复的逻辑全部引入到了redis中. 这样就形成了这样一组结构</p><p><img src="/images/scrapy02/image-20210812152215427.png" alt="image-20210812152215427"></p><p>​整体工作流程:</p><pre><code>1. 某个爬虫从redis_key获取到起始url. 传递给引擎, 到调度器. 然后把起始url直接丢到redis的请求队列里. 开始了scrapy的爬虫抓取工作.  2. 如果抓取过程中产生了新的请求. 不论是哪个节点产生的, 最终都会到redis的去重集合中进行判定是否抓取过. 3. 如果抓取过. 直接就放弃该请求. 如果没有抓取过. 自动丢到redis请求队列中. 4. 调度器继续从redis请求队列里获取要进行抓取的请求. 完成爬虫后续的工作. </code></pre><p>接下来. 我们用scrapy-redis完成上述流程</p><ol><li><p>首先, 创建项目, 和以前一样, 该怎么创建还怎么创建. </p></li><li><p>修改Spider. 将start_urls注释掉. 更换成redis_key</p></li><li><p>然后再settings中对redis以及scrapy_redis配置一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">REDIS_HOST = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line">REDIS_DB = <span class="number">8</span></span><br><span class="line">REDIS_PARAMS = &#123;</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># scrapy-redis配置信息  # 固定的</span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span>  <span class="comment"># 如果为真. 在关闭时自动保存请求信息, 如果为假, 则不保存请求信息</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span> <span class="comment"># 去重的逻辑. 要用redis的</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;tianya2.pipelines.Tianya2Pipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">&#x27;scrapy_redis.pipelines.RedisPipeline&#x27;</span>: <span class="number">301</span>  <span class="comment"># 配置redis的pipeline</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>布隆过滤器:</p><p>​平时, 我们如果需要对数据进行去重操作可以有以下方案: </p><pre><code>1. 直接用set集合来存储url. (最low的方案)2. 用set集合存储hash过的url. scrapy默认3. 用redis来存储hash过的请求, scrapy-redis默认就是这样做的. 如果请求非常非常多. redis压力是很大的.4. 用布隆过滤器. </code></pre><p>布隆过滤器的原理: 其实它里面就是一个改良版的bitmap. 何为bitmap, 假设我提前准备好一个数组, 然后把源数据经过hash计算. 会计算出一个数字. 我们按照下标来找到该下标对应的位置. 然后设置成1. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = 李嘉诚</span><br><span class="line">b = 张翠山</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>]  <span class="number">10</span>个长度数组</span><br><span class="line"></span><br><span class="line"><span class="built_in">hash</span>(a) = <span class="number">3</span></span><br><span class="line"><span class="built_in">hash</span>(b) = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>] </span><br><span class="line"><span class="built_in">hash</span>(张三) = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找的时候依然执行该hash算法. 然后直接去找对应下标的位置看看是不是1. 是1就有, 不是1就没有</span></span><br></pre></td></tr></table></figure><p>这样有个不好的现象. 容易误判. 如果hash算法选的不够好. 很容易搞错. 那怎么办. 多选几个hash算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = 李嘉诚</span><br><span class="line">b = 张翠山</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">hash1(a) = <span class="number">3</span></span><br><span class="line">hash2(a) = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">hash1(b) = <span class="number">2</span></span><br><span class="line">hash2(b) = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找的时候, 重新按照这个hash的顺序, 在重新执行一遍. 依然会得到2个值. 分别去这两个位置看是否是1. 如果全是1, 就有,  如果有一个是0, 就没有. </span></span><br></pre></td></tr></table></figure><p>在scrapy-redis中想要使用布隆过滤器是非常简单的. 你可以自己去写这个布隆过滤器的逻辑. 不过我建议直接用第三方的就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装布隆过滤器</span></span><br><span class="line">pip install scrapy_redis_bloomfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重类，要使用 BloomFilter 请替换 DUPEFILTER_CLASS</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis_bloomfilter.dupefilter.RFPDupeFilter&quot;</span></span><br><span class="line"><span class="comment"># 哈希函数的个数，默认为 6，可以自行修改</span></span><br><span class="line">BLOOMFILTER_HASH_NUMBER = <span class="number">6</span></span><br><span class="line"><span class="comment"># BloomFilter 的 bit 参数，默认 30，占用 128MB 空间，去重量级 1 亿</span></span><br><span class="line">BLOOMFILTER_BIT = <span class="number">30</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="爬虫开发" scheme="http://blog.ioimp.top/categories/%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Scrapy爬虫" scheme="http://blog.ioimp.top/tags/Scrapy%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>crawlSpider</title>
    <link href="http://blog.ioimp.top/2023/12/03/crawlSpider/"/>
    <id>http://blog.ioimp.top/2023/12/03/crawlSpider/</id>
    <published>2023-12-03T03:58:31.000Z</published>
    <updated>2023-12-03T03:59:08.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Scrapy抓取全网站数据"><a href="#Scrapy抓取全网站数据" class="headerlink" title="Scrapy抓取全网站数据"></a>Scrapy抓取全网站数据</h1><h2 id="一-使用常规Spider"><a href="#一-使用常规Spider" class="headerlink" title="一. 使用常规Spider"></a>一. 使用常规Spider</h2><p>我们把目光对准汽车之家. 抓取二手车信息.</p><p>注意, 汽车之家的访问频率要控制一下. 要不然会跳验证的. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD_DELAY = <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErshouSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;ershou&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;che168.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.che168.com/beijing/a0_0msdgscncgpi1ltocsp100exx0/?pvareaid=102179#currengpostion&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        <span class="comment"># print(resp.text)</span></span><br><span class="line">        <span class="comment"># 链接提取器</span></span><br><span class="line">        le = LinkExtractor(restrict_xpaths=(<span class="string">&quot;//ul[@class=&#x27;viewlist_ul&#x27;]/li/a&quot;</span>,), deny_domains=(<span class="string">&quot;topicm.che168.com&quot;</span>,) )</span><br><span class="line">        links = le.extract_links(resp)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">                url=link.url,</span><br><span class="line">                callback=self.parse_detail</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># 翻页功能</span></span><br><span class="line">        le2 = LinkExtractor(restrict_xpaths=(<span class="string">&quot;//div[@id=&#x27;listpagination&#x27;]/a&quot;</span>,))</span><br><span class="line">        pages = le2.extract_links(resp)</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> pages:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=page.url, callback=self.parse_detail)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_detail</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        title = resp.xpath(<span class="string">&#x27;/html/body/div[5]/div[2]/h3/text()&#x27;</span>).extract_first()</span><br><span class="line">        <span class="built_in">print</span>(title)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LinkExtractor: 链接提取器. 可以非常方便的帮助我们从一个响应页面中提取到url链接. 我们只需要提前定义好规则即可. </p><p>参数: </p><p>​allow, 接收一堆正则表达式, 可以提取出符合该正则的链接<br>​deny, 接收一堆正则表达式, 可以剔除符合该正则的链接<br>​allow_domains: 接收一堆域名, 符合里面的域名的链接被提取<br>​deny_domains: 接收一堆域名, 剔除不符合该域名的链接<br>​restrict_xpaths: 接收一堆xpath, 可以提取符合要求xpath的链接<br>​restrict_css: 接收一堆css选择器, 可以提取符合要求的css选择器的链接<br>​tags: 接收一堆标签名, 从某个标签中提取链接, 默认a, area<br>​attrs: 接收一堆属性名, 从某个属性中提取链接, 默认href</p><p>值得注意的, &#x3D;&#x3D;在提取到的url中, 是有重复的内容的. 但是我们不用管. scrapy会自动帮我们过滤掉重复的url请求.&#x3D;&#x3D; </p><h2 id="二-使用CrawlSpider"><a href="#二-使用CrawlSpider" class="headerlink" title="二. 使用CrawlSpider"></a>二. 使用CrawlSpider</h2><p>在scrapy中提供了CrawlSpider来完成全站数据抓取. </p><ol><li><p>创建项目</p><p><code>scrapy startproject qichezhijia</code></p></li><li><p>进入项目</p><p><code>cd qichezhijia</code></p></li><li><p>创建爬虫(CrawlSpider)</p><p><code>scrapy genspider </code>&#x3D;&#x3D;-t crawl&#x3D;&#x3D;<code> ershouche che168.com</code></p><p>和以往的爬虫不同. 该爬虫需要用到crawl的模板来创建爬虫. </p></li><li><p>修改spider中的rules和回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErshoucheSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&#x27;ershouche&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;che168.com&#x27;</span>, <span class="string">&#x27;autohome.com.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.che168.com/beijing/a0_0msdgscncgpi1ltocsp1exx0/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    le = LinkExtractor(restrict_xpaths=(<span class="string">&quot;//ul[@class=&#x27;viewlist_ul&#x27;]/li/a&quot;</span>,), deny_domains=(<span class="string">&quot;topicm.che168.com&quot;</span>,) )</span><br><span class="line">    le1 = LinkExtractor(restrict_xpaths=(<span class="string">&quot;//div[@id=&#x27;listpagination&#x27;]/a&quot;</span>,))</span><br><span class="line">    rules = (</span><br><span class="line">        Rule(le1, follow=<span class="literal">True</span>),  <span class="comment"># 单纯为了做分页</span></span><br><span class="line">        Rule(le, callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>), <span class="comment"># 单纯提取数据</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(response.url)</span><br></pre></td></tr></table></figure><p>CrawlSpider的工作流程. </p><p>前期和普通的spider是一致的. 在第一次请求回来之后. 会自动的将返回的response按照rules中订制的规则来提取链接. 并进一步执行callback中的回调. 如果follow是True, 则继续在响应的内容中继续使用该规则提取链接.  相当于在parse中的scrapy.request(xxx, callback&#x3D;self.parse)</p></li></ol><h2 id="三-Redis简单使用"><a href="#三-Redis简单使用" class="headerlink" title="三. Redis简单使用"></a>三. Redis简单使用</h2><p>​redis作为一款目前这个星球上性能最高的非关系型数据库之一. 拥有每秒近十万次的读写能力. 其实力只能用恐怖来形容. </p><ol><li><p>安装redis</p><p>redis是我见过这个星球上最好安装的软件了. 比起前面的那一坨. 它简直了…</p><p>直接把压缩包解压. 然后配置一下环境变量就可以了. </p><p><img src="/images/scrapy01/image-20210810184227132.png" alt="images/scrapy01/image-20210810184227132"></p><p><img src="/images/scrapy01/image-20210810184318301.png" alt="images/scrapy01/image-20210810184318301"></p><p>接下来, 在环境变量中将该文件夹配置到path中. </p><p><img src="/images/scrapy01/image-20210810184649037.png" alt="images/scrapy01/image-20210810184649037"></p><p>win7的同学自求多福吧…</p><p>我们给redis多配置几个东西(修改redis的配置文件, mac是: redis.conf, windows是: )</p><ol><li><p>关闭bind</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bind 127.0.0.1 ::1  # 注释掉它</span></span><br></pre></td></tr></table></figure></li><li><p>关闭保护模式  windows不用设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no    <span class="comment"># 设置为no</span></span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass <span class="number">123456</span>   <span class="comment"># 设置密码</span></span><br></pre></td></tr></table></figure></li></ol><p>将redis怼到windows服务&#x3D;&#x3D;必须进入到redis目录后才可以&#x3D;&#x3D;</p><p><img src="/images/scrapy01/image-20210810185306517.png" alt="images/scrapy01/image-20210810185306517"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 将redis安装到windows服务</span><br><span class="line">redis-server.exe --service-install redis.windows.conf --loglevel verbose</span><br><span class="line"># 卸载服务：</span><br><span class="line">redis-server --service-uninstall</span><br><span class="line"># 开启服务：</span><br><span class="line">redis-server --service-<span class="built_in">start</span></span><br><span class="line"># 停止服务：</span><br><span class="line">redis-server --service-stop</span><br></pre></td></tr></table></figure><p>使用redis-cli链接redis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h ip地址 -p 端口 --raw   <span class="comment"># raw可以让redis显示出中文</span></span><br><span class="line">auth 密码   <span class="comment"># 如果有密码可以这样来登录, 如果没有.不用这一步</span></span><br></pre></td></tr></table></figure><p><img src="/images/scrapy01/image-20210810185605290.png" alt="images/scrapy01/image-20210810185605290"></p><p>附赠RDM, redis desktop manager. 可以帮我们完成redis数据库的可视化操作(需要就装, 不需要就算)</p><p><img src="/images/scrapy01/image-20210810185659813.png" alt="images/scrapy01/image-20210810185659813"></p></li><li><p>redis常见数据类型</p><p>redis中常见的数据类型有5个. </p><p>命令规则:  <code>命令 key 参数</code></p><ol><li><p>string</p><p>字符串(它自己认为是字符串, 我认为是任何东西. ), redis最基础的数据类型. </p><p>常用命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value  <span class="comment"># 添加一条数据</span></span><br><span class="line">get key   <span class="comment"># 查看一条数据</span></span><br><span class="line">incr key       <span class="comment"># 让该key对应的数据自增1(原子性, 安全)</span></span><br><span class="line">incrby key count     <span class="comment"># 让该key对应的value自增 count </span></span><br><span class="line"><span class="built_in">type</span> key<span class="comment"># 查看数据类型(set进去的东西一律全是字符串)</span></span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> name zhangsan  <span class="comment"># 添加数据  name = zhangsan</span></span><br><span class="line">get name<span class="comment"># 查看数据 zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> age <span class="number">10</span></span><br><span class="line">get age <span class="comment"># 10</span></span><br><span class="line">incr age<span class="comment"># 11</span></span><br><span class="line">get age <span class="comment"># 11</span></span><br><span class="line">incrby age <span class="number">5</span><span class="comment"># 16</span></span><br></pre></td></tr></table></figure></li><li><p>hash</p><p>哈希, 相当于字典. </p><p>常见操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hset key k1 v1   <span class="comment"># 将k1, v1存储在key上</span></span><br><span class="line">hget key k1      <span class="comment"># 将key上的k1提取出来</span></span><br><span class="line">hmset key k1 v1 k2 v2 k3 v3....  <span class="comment"># 一次性将多个k,v存储在key</span></span><br><span class="line">hmget key k1 k2....<span class="comment"># 一次性将key中的k1, k2...提取出来</span></span><br><span class="line">hgetall key <span class="comment"># 一次性将key中所有内容全部提取</span></span><br><span class="line">hkeys key<span class="comment"># 将key中所有的k全部提取</span></span><br><span class="line">hvals key <span class="comment"># 将key中所有的v全部提取</span></span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HMSET stu <span class="built_in">id</span> <span class="number">1</span> name sylar age <span class="number">18</span></span><br><span class="line">HMGET stu name age   <span class="comment"># syalr 18</span></span><br><span class="line">HGETALL stu    <span class="comment"># id 1 name sylar age 18</span></span><br><span class="line">HKEYS stu <span class="comment"># id name age</span></span><br><span class="line">HVALS stu   <span class="comment"># 1 syalr 18</span></span><br></pre></td></tr></table></figure></li><li><p>list</p><p>列表, 底层是一个双向链表. 可以从左边和右边进行插入. 记住每次插入都要记得这货是个&#x3D;&#x3D;双向链表&#x3D;&#x3D;</p><p>常见操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LPUSH key 数据<span class="number">1</span> 数据<span class="number">2</span> 数据<span class="number">3.</span>... <span class="comment"># 从左边插入数据</span></span><br><span class="line">RPUSH key 数据<span class="number">1</span> 数据<span class="number">2</span> 数据<span class="number">3.</span>... <span class="comment"># 从右边插入数据</span></span><br><span class="line">LRANGE key start stop     <span class="comment"># 从start到stop提取数据. </span></span><br><span class="line"></span><br><span class="line">LLEN key<span class="comment"># 返回key对应列表的长度</span></span><br><span class="line">LPOP key        <span class="comment"># 从左边删除一个.并返回被删除元素</span></span><br><span class="line">RPOP key<span class="comment"># 从右边删除一个.并返回被删除元素</span></span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LPUSH banji yiban erban sanban siban</span><br><span class="line">LRANGE banji <span class="number">0</span> -<span class="number">1</span>   <span class="comment"># yiban erban sanban siban</span></span><br><span class="line">RPUSH ban ban1 ban2 ban3</span><br><span class="line">LRANGE ban <span class="number">0</span> -<span class="number">1</span>     <span class="comment"># ban1 ban2 ban3</span></span><br><span class="line">LPOP ban  <span class="comment"># ban1</span></span><br><span class="line">LLEN key  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></li><li><p>set</p><p>set是无序的超大集合. 无序, 不重复. </p><p>常见操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SADD key 值   <span class="comment"># 向集合内存入数据</span></span><br><span class="line">SMEMBERS key  <span class="comment"># 查看集合内所有元素</span></span><br><span class="line">SCARD key <span class="comment"># 查看key中元素的个数</span></span><br><span class="line">SISMEMBER key val  <span class="comment"># 查看key中是否包含val</span></span><br><span class="line">SUNION key1 key2  <span class="comment"># 并集</span></span><br><span class="line">SDIFF key1 key2  <span class="comment"># 差集合, 在key1中, 但不在key2中的数据</span></span><br><span class="line">SINTER key1 key2 <span class="comment"># 计算交集, 在key1和key2中都出现了的</span></span><br><span class="line">SPOP key  <span class="comment"># 随机从key中删除一个数据</span></span><br><span class="line">SRANDMEMBER key count <span class="comment"># 随机从key中查询count个数据</span></span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SADD stars 柯震东 吴亦凡 张默 房祖名   <span class="comment"># 4</span></span><br><span class="line">SADD stars 吴亦凡    <span class="comment"># 0. 重复的数据是存储不进去的.</span></span><br><span class="line">SMEMBERS stars   <span class="comment"># 柯震东 吴亦凡 张默 房祖名</span></span><br><span class="line">SISMEMBER stars 吴亦凡  <span class="comment"># 吴亦凡在 stars里么?  1 在  0 不在</span></span><br><span class="line"></span><br><span class="line">SADD my 周杰伦 吴亦凡 房祖名  </span><br><span class="line">SINTER stars my  <span class="comment"># 计算交集  吴亦凡 房祖名</span></span><br><span class="line"></span><br><span class="line">SPOP my  <span class="comment"># 随机删除一个</span></span><br><span class="line">SRANDMEMEBER my <span class="number">2</span>   <span class="comment"># 从集合总随机查看2个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>zset</p><p>有序集合, 有序集合中的内容也是不可以重复的. 并且存储的数据也是redis最基础的string数据. 但是在存储数据的同时还增加了一个score. 表示分值. redis就是通过这个score作为排序的规则的. </p><p>常用操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ZADD key s1 m1 s2 m2 ... <span class="comment"># 向key中存入 m1 m2 分数分别为s1 s2</span></span><br><span class="line">ZRANGE key start stop [withscores]   <span class="comment"># 查看从start 到stop中的所有数据 [是否要分数]</span></span><br><span class="line">ZREVRANGE key start stop <span class="comment"># 倒叙查看start到stop的数据</span></span><br><span class="line">ZCARD key   <span class="comment"># 查看zset的数据个数</span></span><br><span class="line">ZCOUNT key <span class="built_in">min</span> <span class="built_in">max</span>  <span class="comment"># 查看分数在min和max之间的数据量</span></span><br><span class="line">ZINCRBY key score member  <span class="comment"># 将key中member的分值score</span></span><br><span class="line">ZSCORE key m  <span class="comment"># 查看key中m的分值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ZADD fam <span class="number">1</span> sylar <span class="number">2</span> alex <span class="number">3</span> tory  <span class="comment"># 添加三个数据</span></span><br><span class="line">ZRANGE fam <span class="number">0</span> -<span class="number">1</span> WITHSCORES <span class="comment"># 正序查看</span></span><br><span class="line">ZREVRANGE fam <span class="number">0</span> -<span class="number">1</span> WITHSCORES   <span class="comment"># 倒叙查看</span></span><br><span class="line">ZINCRBY fam <span class="number">10</span> alex  <span class="comment"># 给alex加10分</span></span><br><span class="line">ZADD fam <span class="number">100</span> alex   <span class="comment"># 给alex修改分数为100分</span></span><br><span class="line">ZSCORE fam alex   <span class="comment"># 查看alex的分数</span></span><br><span class="line">ZCARD fam    <span class="comment"># 查看fam的数据个数</span></span><br></pre></td></tr></table></figure></li></ol><p>redis还有非常非常多的操作. 我们就不一一列举了. 各位可以在网络上找到非常多的资料. </p><p>&#x3D;&#x3D;各位大佬们注意. 数据保存完一定要save一下, 避免数据没有写入硬盘而产生的数据丢失&#x3D;&#x3D;</p></li></ol><h2 id="四-python搞定redis"><a href="#四-python搞定redis" class="headerlink" title="四. python搞定redis"></a>四. python搞定redis</h2><p>​python处理redis使用专用的redis模块. 同样的, 它也是一个第三方库.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure><p>​获取连接(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line">red = Redis(host=<span class="string">&quot;127.0.0.1&quot;</span>,  <span class="comment"># 地址</span></span><br><span class="line">            port=<span class="number">6379</span>,   <span class="comment"># 端口</span></span><br><span class="line">            db=<span class="number">0</span>,   <span class="comment"># 数据库</span></span><br><span class="line">            password=<span class="number">123456</span>,  <span class="comment"># 密码</span></span><br><span class="line">            decode_responses=<span class="literal">True</span>)  <span class="comment"># 是否自动解码</span></span><br></pre></td></tr></table></figure><p>​获取连接(2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pool = redis.ConnectionPool(</span><br><span class="line">        host=<span class="string">&quot;127.0.0.1&quot;</span>,  <span class="comment"># 地址</span></span><br><span class="line">        port=<span class="number">6379</span>,   <span class="comment"># 端口</span></span><br><span class="line">        db=<span class="number">0</span>,   <span class="comment"># 数据库</span></span><br><span class="line">        password=<span class="number">123456</span>,  <span class="comment"># 密码</span></span><br><span class="line">        decode_responses=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"><span class="built_in">print</span>(r.keys())</span><br></pre></td></tr></table></figure><p>​我们以一个免费代理IP池能用到的操作来尝试一下redis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存入数据</span></span><br><span class="line">red.<span class="built_in">set</span>(<span class="string">&quot;sylar&quot;</span>, <span class="string">&quot;邱彦涛&quot;</span>)</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="built_in">print</span>(red.get(<span class="string">&quot;sylar&quot;</span>))</span><br><span class="line"></span><br><span class="line">lst = [<span class="string">&quot;张三丰&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;张翠山&quot;</span>, <span class="string">&quot;张娜拉&quot;</span>]</span><br><span class="line">red.lpush(<span class="string">&quot;names&quot;</span>, *lst)  <span class="comment"># 将所有的名字都存入names</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 查询所有数据</span></span><br><span class="line">result = red.lrange(<span class="string">&quot;names&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从上面的操作上可以看出. python中的redis和redis-cli中的操作是几乎一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来, 咱们站在一个代理IP池的角度来分析各个功能</span></span><br><span class="line"><span class="comment"># 抓取到了IP. 保存入库</span></span><br><span class="line">red.zadd(<span class="string">&quot;proxy&quot;</span>, &#123;<span class="string">&quot;192.168.1.1&quot;</span>: <span class="number">10</span>, <span class="string">&quot;192.168.1.2&quot;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">red.zadd(<span class="string">&quot;proxy&quot;</span>, &#123;<span class="string">&quot;192.168.1.3&quot;</span>: <span class="number">10</span>, <span class="string">&quot;192.168.1.6&quot;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">red.zadd(<span class="string">&quot;proxy&quot;</span>, &#123;<span class="string">&quot;192.168.1.4&quot;</span>: <span class="number">10</span>, <span class="string">&quot;192.168.1.7&quot;</span>: <span class="number">10</span>&#125;)</span><br><span class="line">red.zadd(<span class="string">&quot;proxy&quot;</span>, &#123;<span class="string">&quot;192.168.1.5&quot;</span>: <span class="number">10</span>, <span class="string">&quot;192.168.1.8&quot;</span>: <span class="number">10</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给某一个ip增加到100分</span></span><br><span class="line">red.zadd(<span class="string">&quot;proxy&quot;</span>, &#123;<span class="string">&quot;192.168.1.4&quot;</span>: <span class="number">100</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给&quot;192.168.1.4&quot; 扣10分</span></span><br><span class="line">red.zincrby(<span class="string">&quot;proxy&quot;</span>, -<span class="number">10</span>, <span class="string">&quot;192.168.1.4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分扣没了. 删除掉它</span></span><br><span class="line">red.zrem(<span class="string">&quot;proxy&quot;</span>, <span class="string">&quot;192.168.1.4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可用的代理数量</span></span><br><span class="line">c = red.zcard(<span class="string">&quot;proxy&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 根据分值进行查询(0~100)之间</span></span><br><span class="line">r = red.zrangebyscore(<span class="string">&quot;proxy&quot;</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询前100个数据(分页查询)</span></span><br><span class="line">r = red.zrevrange(<span class="string">&#x27;proxy&#x27;</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断proxy是否存在, 如果是None就是不存在</span></span><br><span class="line">r = red.zscore(<span class="string">&quot;proxy&quot;</span>, <span class="string">&quot;192.168.1.4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="爬虫开发" scheme="http://blog.ioimp.top/categories/%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Scrapy爬虫" scheme="http://blog.ioimp.top/tags/Scrapy%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy_模拟登录与中间件</title>
    <link href="http://blog.ioimp.top/2023/12/03/Scrapy-%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://blog.ioimp.top/2023/12/03/Scrapy-%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2023-12-03T03:57:12.000Z</published>
    <updated>2023-12-03T03:58:19.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模拟登录与中间件"><a href="#模拟登录与中间件" class="headerlink" title="模拟登录与中间件"></a>模拟登录与中间件</h1><h2 id="一-Scrapy处理cookie"><a href="#一-Scrapy处理cookie" class="headerlink" title="一. Scrapy处理cookie"></a>一. Scrapy处理cookie</h2><p>​在requests中我们讲解处理cookie主要有两个方案. 第一个方案. 从浏览器里直接把cookie搞出来. 贴到heades里. 这种方案, 简单粗暴. 第二个方案是走正常的登录流程. 通过session来记录请求过程中的cookie. 那么到了scrapy中如何处理cookie?  其实也是这两个方案. </p><p>​首先, 我们依然是把目标定好,  还是我们的老朋友, <a href="https://user.17k.com/ck/author/shelf?page=1&appKey=2406394919">https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919</a></p><p>​这个url必须要登录后才能访问(用户书架). &#x3D;&#x3D;对于该网页而言&#x3D;&#x3D;, 就必须要用到cookie了. 首先, 创建项目, 建立爬虫. 把该填的地方填上. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request, FormRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;login&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;17k.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​此时运行时, 显示的是该用户还未登录. 不论是哪个方案. 在请求到start_urls里面的url之前必须得获取到cookie. 但是默认情况下, scrapy会自动的帮我们完成其实request的创建. 此时, 我们需要自己去组装第一个请求. 这时就需要我们自己的爬虫中重写start_requests()方法. 该方法负责起始request的组装工作. 我们不妨先看看原来的start_requests()是如何工作的. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下是scrapy源码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    cls = self.__class__</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.start_urls <span class="keyword">and</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;start_url&#x27;</span>):</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(</span><br><span class="line">            <span class="string">&quot;Crawling could not start: &#x27;start_urls&#x27; not found &quot;</span></span><br><span class="line">            <span class="string">&quot;or empty (but found &#x27;start_url&#x27; attribute instead, &quot;</span></span><br><span class="line">            <span class="string">&quot;did you miss an &#x27;s&#x27;?)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> method_is_overridden(cls, Spider, <span class="string">&#x27;make_requests_from_url&#x27;</span>):</span><br><span class="line">        warnings.warn(</span><br><span class="line">            <span class="string">&quot;Spider.make_requests_from_url method is deprecated; it &quot;</span></span><br><span class="line">            <span class="string">&quot;won&#x27;t be called in future Scrapy releases. Please &quot;</span></span><br><span class="line">            <span class="string">&quot;override Spider.start_requests method instead (see %s.%s).&quot;</span> % (</span><br><span class="line">                cls.__module__, cls.__name__</span><br><span class="line">            ),</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">            <span class="keyword">yield</span> self.make_requests_from_url(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">            <span class="comment"># 核心就这么一句话. 组建一个Request对象.我们也可以这么干. </span></span><br><span class="line">            <span class="keyword">yield</span> Request(url, dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>自己写个start_requests()看看. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是万恶之源&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> Request(</span><br><span class="line">        url=LoginSpider.start_urls[<span class="number">0</span>],</span><br><span class="line">        callback=self.parse</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>接下来, 我们去处理cookie</p><h3 id="1-方案一-直接从浏览器复制cookie过来"><a href="#1-方案一-直接从浏览器复制cookie过来" class="headerlink" title="1. 方案一, 直接从浏览器复制cookie过来"></a>1. 方案一, 直接从浏览器复制cookie过来</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 直接从浏览器复制</span></span><br><span class="line">        cookies = <span class="string">&quot;GUID=bbb5f65a-2fa2-40a0-ac87-49840eae4ad1; c_channel=0; c_csc=web; Hm_lvt_9793f42b498361373512340937deb2a0=1627572532,1627711457,1627898858,1628144975; accessToken=avatarUrl%3Dhttps%253A%252F%252Fcdn.static.17k.com%252Fuser%252Favatar%252F16%252F16%252F64%252F75836416.jpg-88x88%253Fv%253D1610625030000%26id%3D75836416%26nickname%3D%25E5%25AD%25A4%25E9%25AD%2582%25E9%2587%258E%25E9%25AC%25BCsb%26e%3D1643697376%26s%3D73f8877e452e744c; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%2275836416%22%2C%22%24device_id%22%3A%2217700ba9c71257-035a42ce449776-326d7006-2073600-17700ba9c728de%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22%22%2C%22%24latest_referrer_host%22%3A%22%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%7D%2C%22first_id%22%3A%22bbb5f65a-2fa2-40a0-ac87-49840eae4ad1%22%7D; Hm_lpvt_9793f42b498361373512340937deb2a0=1628145672&quot;</span></span><br><span class="line">        cookie_dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> cookies.split(<span class="string">&quot;; &quot;</span>):</span><br><span class="line">            k, v = c.split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">            cookie_dic[k] = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> Request(</span><br><span class="line">            url=LoginSpider.start_urls[<span class="number">0</span>],</span><br><span class="line">            cookies=cookie_dic,</span><br><span class="line">            callback=self.parse</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>这种方案和原来的requests几乎一模一样.  需要注意的是: cookie需要通过cookies参数进行传递!</p><h3 id="2-方案二-完成登录过程"><a href="#2-方案二-完成登录过程" class="headerlink" title="2. 方案二, 完成登录过程."></a>2. 方案二, 完成登录过程.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 登录流程</span></span><br><span class="line">    username = <span class="string">&quot;18614075987&quot;</span></span><br><span class="line">    password = <span class="string">&quot;q6035945&quot;</span></span><br><span class="line">    url = <span class="string">&quot;https://passport.17k.com/ck/user/login&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送post请求</span></span><br><span class="line">    <span class="comment"># yield Request(</span></span><br><span class="line">    <span class="comment">#     url=url,</span></span><br><span class="line">    <span class="comment">#     method=&quot;post&quot;,</span></span><br><span class="line">    <span class="comment">#     body=&quot;loginName=18614075987&amp;password=q6035945&quot;,</span></span><br><span class="line">    <span class="comment">#     callback=self.parse</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 发送post请求</span></span><br><span class="line">    <span class="keyword">yield</span> FormRequest(</span><br><span class="line">        url=url,</span><br><span class="line">        formdata=&#123;</span><br><span class="line">            <span class="string">&quot;loginName&quot;</span>: username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: password</span><br><span class="line">        &#125;,</span><br><span class="line">        callback=self.parse</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="comment"># 得到响应结果. 直接请求到默认的start_urls</span></span><br><span class="line">    <span class="keyword">yield</span> Request(</span><br><span class="line">        url=LoginSpider.start_urls[<span class="number">0</span>],</span><br><span class="line">        callback=self.parse_detail</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_detail</span>(<span class="params">self, resp</span>):</span><br><span class="line">    <span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>​注意, 发送post请求有两个方案, </p><ol><li><p>Scrapy.Request(url&#x3D;url, method&#x3D;’post’, body&#x3D;数据)</p></li><li><p>Scarpy.FormRequest(url&#x3D;url, formdata&#x3D;数据)  -&gt; 推荐</p><p>区别: 方式1的数据只能是字符串. 这个就很难受. 所以推荐用第二种.</p></li></ol><h2 id="二-Scrapy的中间件"><a href="#二-Scrapy的中间件" class="headerlink" title="二. Scrapy的中间件"></a>二. Scrapy的中间件</h2><p>​中间件的作用: 负责处理引擎和爬虫以及引擎和下载器之间的请求和响应. 主要是可以对request和response做预处理. 为后面的操作做好充足的准备工作. 在python中准备了两种中间件, 分别是下载器中间件和爬虫中间件. </p><h3 id="1-DownloaderMiddleware"><a href="#1-DownloaderMiddleware" class="headerlink" title="1. DownloaderMiddleware"></a>1. DownloaderMiddleware</h3><p>​下载中间件, 它是介于引擎和下载器之间,  引擎在获取到request对象后, 会交给下载器去下载, 在这之间我们可以设置下载中间件. 它的执行流程:</p><p>​引擎拿到request -&gt; 中间件1(process_request) -&gt; 中间件2(process_request) …..-&gt;      下载器-|<br>​    引擎拿到request &lt;- 中间件1(process_response) &lt;- 中间件2(process_response) ….. &lt;-下载器-|</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MidDownloaderMiddleware1</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;process_request&quot;</span>, <span class="string">&quot;ware1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;process_response&quot;</span>, <span class="string">&quot;ware1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;process_exception&quot;</span>, <span class="string">&quot;ware1&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MidDownloaderMiddleware2</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;process_request&quot;</span>, <span class="string">&quot;ware2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;process_response&quot;</span>, <span class="string">&quot;ware2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;process_exception&quot;</span>, <span class="string">&quot;ware2&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="comment"># &#x27;mid.middlewares.MidDownloaderMiddleware&#x27;: 542,</span></span><br><span class="line">   <span class="string">&#x27;mid.middlewares.MidDownloaderMiddleware1&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">   <span class="string">&#x27;mid.middlewares.MidDownloaderMiddleware2&#x27;</span>: <span class="number">544</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先级参考管道. </p><p>运行效果;</p><p><img src="/images/scrapy01/image-20210805180841148.png" alt="images/scrapy01/image-20210805180841148"></p><p>接下来, 我们来说说这几个方法的返回值问题(难点)</p><ol><li><p>process_request(request, spider):  在每个请求到达下载器之前调用</p><p>一, return None  不拦截, 把请求继续向后传递给权重低的中间件或者下载器</p><p>二, return request 请求被拦截, 并将一个新的请求返回. 后续中间件以及下载器收不到本次请求</p><p>三, return response 请求被拦截, 下载器将获取不到请求, 但是引擎是可以接收到本次响应的内容, 也就是说在当前方法内就已经把响应内容获取到了. </p></li><li><p>proccess_response(request, response, spider): 每个请求从下载器出来调用</p><p>一, return response 通过引擎将响应内容继续传递给其他组件或传递给其他process_response()处理</p><p>二, return request  响应被拦截. 将返回内容直接回馈给调度器(通过引擎), 后续process_response()接收不到响应内容.</p></li></ol><p>OK, 至此, 中间件的含义算是完事儿了. 那这东西有啥用?  我们上案例!</p><h4 id="1-1-动态随机设置UA"><a href="#1-1-动态随机设置UA" class="headerlink" title="1.1. 动态随机设置UA"></a>1.1. 动态随机设置UA</h4><p>设置统一的UA很简单. 直接在settings里设置即可. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="string">&#x27;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&#x27;</span></span><br></pre></td></tr></table></figure><p>但是这个不够好, 我希望得到一个随机的UA.  此时就可以这样设计, 首先, 在settings里定义好一堆UserAgent.  <a href="http://useragentstring.com/pages/useragentstring.php?name=Chrome">http://useragentstring.com/pages/useragentstring.php?name=Chrome</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT_LIST = [</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2919.83 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2866.71 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (X11; Ubuntu; Linux i686 on x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2820.59 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2762.73 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2656.18 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/44.0.2403.155 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2226.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.4; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2225.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2225.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2224.3 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 4.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyRandomUserAgentMiddleware</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        UA = choice(USER_AGENT_LIST)</span><br><span class="line">        request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = UA</span><br><span class="line">        <span class="comment"># 不要返回任何东西</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="1-2-处理代理问题"><a href="#1-2-处理代理问题" class="headerlink" title="1.2 处理代理问题"></a>1.2 处理代理问题</h4><p>代理问题一直是我们作为一名爬虫工程师很蛋疼的问题. 不加容易被检测, 加了效率低, 免费的可用IP更是凤毛麟角. 没办法, 无论如何还是得面对它. 这里, 我们采用两个方案来给各位展示scrapy中添加代理的逻辑.</p><ol><li><p>免费代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyMiddleware</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;又来&quot;</span>)</span><br><span class="line">        proxy = choice(PROXY_LIST)</span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&quot;https://&quot;</span>+proxy  <span class="comment"># 设置代理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;有么有结果???&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status != <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;尝试失败&quot;</span>)</span><br><span class="line">            request.dont_filter = <span class="literal">True</span>  <span class="comment"># 丢回调度器重新请求</span></span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;出错了!&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>收费代理</p><p>免费代理实在太难用了. 我们这里直接选择一个收费代理. 依然选择<code>快代理</code>, 这个根据你自己的喜好进行调整. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MoneyProxyMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_proxy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        912831993520336t12831993520578每次请求换IP</span></span><br><span class="line"><span class="string">        tps138.kdlapi.com 15818</span></span><br><span class="line"><span class="string">        需实名认证5次/s5Mb/s有效续费|订单详情|实名认证</span></span><br><span class="line"><span class="string">        隧道用户名密码修改密码</span></span><br><span class="line"><span class="string">        用户名：t12831993520578密码：t72a13xu</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        url = <span class="string">&quot;http://tps138.kdlapi.com:15818&quot;</span></span><br><span class="line">        auth = basic_auth_header(username=<span class="string">&quot;t12831993520578&quot;</span>, password=<span class="string">&quot;t72a13xu&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> url, auth</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;......&quot;</span>)</span><br><span class="line">        url, auth = self._get_proxy()</span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = url</span><br><span class="line">        request.headers[<span class="string">&#x27;Proxy-Authorization&#x27;</span>] = auth</span><br><span class="line">        request.headers[<span class="string">&#x27;Connection&#x27;</span>] = <span class="string">&#x27;close&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(response.status, <span class="built_in">type</span>(response.status))</span><br><span class="line">        <span class="keyword">if</span> response.status != <span class="number">200</span>:</span><br><span class="line">            request.dont_filter = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="1-3-使用selenium完成数据抓取"><a href="#1-3-使用selenium完成数据抓取" class="headerlink" title="1.3 使用selenium完成数据抓取"></a>1.3 使用selenium完成数据抓取</h4><p>首先, 我们需要使用selenium作为下载器进行下载. 那么我们的请求应该也是特殊订制的. 所以, 在我的设计里, 我可以重新设计一个请求. 就叫SeleniumRequest</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.http.request <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeleniumRequest</span>(<span class="title class_ inherited__">Request</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里面不需要做任何操作. 整体还是用它父类的东西来进行操作. </p><p>接下来. 完善一下spider</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> boss.request <span class="keyword">import</span> SeleniumRequest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BeijingSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;beijing&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;zhipin.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.zhipin.com/job_detail/?query=python&amp;city=101010100&amp;industry=&amp;position=&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">yield</span> SeleniumRequest(</span><br><span class="line">            url=BeijingSpider.start_urls[<span class="number">0</span>],</span><br><span class="line">            callback=self.parse,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        li_list = resp.xpath(<span class="string">&#x27;//*[@id=&quot;main&quot;]/div/div[3]/ul/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            href = li.xpath(<span class="string">&quot;./div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/a[1]/@href&quot;</span>).extract_first()</span><br><span class="line">            name = li.xpath(<span class="string">&quot;./div[1]/div[1]/div[1]/div[1]/div[1]/span[1]/a[1]/text()&quot;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(name, href)</span><br><span class="line">            <span class="built_in">print</span>(resp.urljoin(href))</span><br><span class="line">            <span class="keyword">yield</span> SeleniumRequest(</span><br><span class="line">                url=resp.urljoin(href),</span><br><span class="line">                callback=self.parse_detail,</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># 下一页.....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_detail</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;招聘人&quot;</span>, resp.xpath(<span class="string">&#x27;//*[@id=&quot;main&quot;]/div[3]/div/div[2]/div[1]/h2&#x27;</span>).extract())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中间件~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BossDownloaderMiddleware</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">        s = cls()</span><br><span class="line">        <span class="comment"># 这里很关键哦. </span></span><br><span class="line">        <span class="comment"># 在爬虫开始的时候. 执行spider_opened</span></span><br><span class="line">        <span class="comment"># 在爬虫结束的时候. 执行spider_closed</span></span><br><span class="line">        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        crawler.signals.connect(s.spider_closed, signal=signals.spider_closed)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(request, SeleniumRequest):</span><br><span class="line">            self.web.get(request.url)</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            page_source = self.web.page_source</span><br><span class="line">            <span class="keyword">return</span> HtmlResponse(url=request.url, encoding=<span class="string">&#x27;utf-8&#x27;</span>, request=request, body=page_source)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_opened</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.web = Chrome()</span><br><span class="line">        self.web.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 完成登录. 拿到cookie. 很容易...</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建浏览器&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_closed</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.web.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;关闭浏览器&quot;</span>)</span><br></pre></td></tr></table></figure><p>settings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="comment"># 怼在所有默认中间件前面. 只要是selenium后面所有的中间件都给我停</span></span><br><span class="line">   <span class="string">&#x27;boss.middlewares.BossDownloaderMiddleware&#x27;</span>: <span class="number">99</span>,  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-用selenium设置cookie"><a href="#1-4-用selenium设置cookie" class="headerlink" title="1.4 用selenium设置cookie"></a>1.4 用selenium设置cookie</h4><p>有了这个案例. 想要用selenium处理cookie也很容易了. 直接在spider_opened位置完成登录, 然后在process_request()中简单设置一下即可. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChaojiyingDownloaderMiddleware</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">        s = cls()</span><br><span class="line">        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.cookies:</span><br><span class="line">            request.cookies = self.cookie</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_opened</span>(<span class="params">self, spider</span>):</span><br><span class="line">        web = Chrome()</span><br><span class="line">        web.get(<span class="string">&quot;https://www.chaojiying.com/user/login/&quot;</span>)</span><br><span class="line">        web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/p[1]/input&#x27;</span>).send_keys(<span class="string">&quot;18614075987&quot;</span>)</span><br><span class="line">        web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/p[2]/input&#x27;</span>).send_keys(<span class="string">&#x27;q6035945&#x27;</span>)</span><br><span class="line">        img = web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/div/img&#x27;</span>)</span><br><span class="line">        verify_code = self.base64_api(<span class="string">&quot;q6035945&quot;</span>, <span class="string">&quot;q6035945&quot;</span>, img.screenshot_as_base64, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/p[3]/input&#x27;</span>).send_keys(verify_code)</span><br><span class="line"></span><br><span class="line">        web.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/div/div[3]/div[1]/form/p[4]/input&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        cookies = web.get_cookies()</span><br><span class="line">        self.cookie = &#123;dic[<span class="string">&#x27;name&#x27;</span>]:dic[<span class="string">&#x27;value&#x27;</span>] <span class="keyword">for</span> dic <span class="keyword">in</span> cookies&#125;</span><br><span class="line">        web.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base64_api</span>(<span class="params">self, uname, pwd, b64_img, typeid</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: uname,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: pwd,</span><br><span class="line">            <span class="string">&quot;typeid&quot;</span>: typeid,</span><br><span class="line">            <span class="string">&quot;image&quot;</span>: b64_img</span><br><span class="line">        &#125;</span><br><span class="line">        result = json.loads(requests.post(<span class="string">&quot;http://api.ttshitu.com/predict&quot;</span>, json=data).text)</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> result[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;result&quot;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> result[<span class="string">&quot;message&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="2-SpiderMiddleware-了解"><a href="#2-SpiderMiddleware-了解" class="headerlink" title="2. SpiderMiddleware(了解)"></a>2. SpiderMiddleware(了解)</h3><p>​爬虫中间件. 是处于引擎和spider之间的中间件. 里面常用的方法有:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CuowuSpiderMiddleware</span>:</span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy acts as if the spider middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">        s = cls()</span><br><span class="line">        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_spider_input</span>(<span class="params">self, response, spider</span>):</span><br><span class="line">        <span class="comment"># 请求被返回, 即将进入到spider时调用</span></span><br><span class="line">        <span class="comment"># 要么返回None, 要么报错</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是process_spider_input&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_spider_output</span>(<span class="params">self, response, result, spider</span>):</span><br><span class="line">        <span class="comment"># 处理完spider中的数据. 返回数据后. 执行</span></span><br><span class="line">        <span class="comment"># 返回值要么是item, 要么是request.</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是process_spider_output&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是process_spider_output&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_spider_exception</span>(<span class="params">self, response, exception, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;process_spider_exception&quot;</span>)</span><br><span class="line">        <span class="comment"># spider中报错 或者, process_spider_input() 方法报错</span></span><br><span class="line">        <span class="comment"># 返回None或者Request或者item.</span></span><br><span class="line">        it = ErrorItem()</span><br><span class="line">        it[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;exception&quot;</span></span><br><span class="line">        it[<span class="string">&#x27;url&#x27;</span>] = response.url</span><br><span class="line">        <span class="keyword">yield</span> it</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_start_requests</span>(<span class="params">self, start_requests, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;process_start_requests&quot;</span>)</span><br><span class="line">        <span class="comment"># 第一次启动爬虫时被调用.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must return only requests (not items).</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> start_requests:</span><br><span class="line">            <span class="keyword">yield</span> r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_opened</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>items</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorItem</span>(scrapy.Item):</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    url = scrapy.Field()</span><br></pre></td></tr></table></figure><p>spider:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaocuoSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;baocuo&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;baidu.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.baidu.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        name = resp.xpath(<span class="string">&#x27;//title/text()&#x27;</span>).extract_first()</span><br><span class="line">        <span class="comment"># print(1/0)  # 调整调整这个. 简单琢磨一下即可~~</span></span><br><span class="line">        it = CuowuItem()</span><br><span class="line">        it[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        <span class="keyword">yield</span> it</span><br></pre></td></tr></table></figure><p>pipeline:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cuowu.items <span class="keyword">import</span> ErrorItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CuowuPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, ErrorItem):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;错误&quot;</span>, item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;没错&quot;</span>, item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目录结构:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cuowu</span><br><span class="line">├── cuowu</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── baocuo.py</span><br><span class="line">└── scrapy.cfg</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="爬虫开发" scheme="http://blog.ioimp.top/categories/%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Scrapy爬虫" scheme="http://blog.ioimp.top/tags/Scrapy%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy_管道</title>
    <link href="http://blog.ioimp.top/2023/12/03/09-Scrapy-%E7%AE%A1%E9%81%93/"/>
    <id>http://blog.ioimp.top/2023/12/03/09-Scrapy-%E7%AE%A1%E9%81%93/</id>
    <published>2023-12-03T03:56:22.000Z</published>
    <updated>2023-12-03T03:56:56.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Scrapy管道"><a href="#Scrapy管道" class="headerlink" title="Scrapy管道"></a>Scrapy管道</h1><p>在上一小节中, 我们初步掌握了Scrapy的基本运行流程以及基本开发流程. 本节继续讨论关于Scrapy更多的内容. </p><h2 id="一-关于管道"><a href="#一-关于管道" class="headerlink" title="一. 关于管道"></a>一. 关于管道</h2><p>上一节内容, 我们已经可以从spider中提取到数据. 然后通过引擎将数据传递给pipeline, 那么在pipeline中如何对数据进行保存呢? 我们主要针对四种数据存储展开讲解. </p><p>前三个案例以<a href="http://datachart.500.com/ssq/%E4%B8%BA%E6%A1%88%E4%BE%8B%E5%9F%BA%E7%A1%80">http://datachart.500.com/ssq/为案例基础</a>. 最后一个以<a href="https://www.tupianzj.com/bizhi/DNmeinv/%E4%B8%BA%E6%A1%88%E4%BE%8B%E5%9F%BA%E7%A1%80">https://www.tupianzj.com/bizhi/DNmeinv/为案例基础</a>. </p><h3 id="1-csv文件写入"><a href="#1-csv文件写入" class="headerlink" title="1. csv文件写入"></a>1. csv文件写入</h3><p>​写入文件是一个非常简单的事情. 直接在pipeline中开启文件即可. 但这里要说明的是. 如果我们只在process_item中进行处理文件是不够优雅的.  总不能有一条数据就open一次吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CaipiaoFilePipeline</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;caipiao.txt&quot;</span>, mode=<span class="string">&quot;a&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 写入文件</span></span><br><span class="line">            f.write(<span class="string">f&quot;<span class="subst">&#123;item[<span class="string">&#x27;qihao&#x27;</span>]&#125;</span>, <span class="subst">&#123;<span class="string">&#x27;_&#x27;</span>.join(item[<span class="string">&#x27;red_ball&#x27;</span>])&#125;</span>, <span class="subst">&#123;<span class="string">&#x27;_&#x27;</span>.join(item[<span class="string">&#x27;blue_ball&#x27;</span>])&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>​我们希望的是, 能不能打开一个文件, 然后就用这一个文件句柄来完成数据的保存. 答案是可以的. 我们可以在pipeline中创建两个方法, 一个是open_spider(), 另一个是close_spider(). 看名字也能明白其含义: </p><p>​open_spider(), 在爬虫开始的时候执行一次<br>​close_spider(), 在爬虫结束的时候执行一次</p><p>​有了这俩货, 我们就可以很简单的去处理这个问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CaipiaoFilePipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.f = <span class="built_in">open</span>(<span class="string">&quot;caipiao.txt&quot;</span>, mode=<span class="string">&quot;a&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> self.f:</span><br><span class="line">            self.f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="comment"># 写入文件</span></span><br><span class="line">        self.f.write(<span class="string">f&quot;<span class="subst">&#123;item[<span class="string">&#x27;qihao&#x27;</span>]&#125;</span>, <span class="subst">&#123;<span class="string">&#x27;_&#x27;</span>.join(item[<span class="string">&#x27;red_ball&#x27;</span>])&#125;</span>, <span class="subst">&#123;<span class="string">&#x27;_&#x27;</span>.join(item[<span class="string">&#x27;blue_ball&#x27;</span>])&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>​在爬虫开始的时候打开一个文件, 在爬虫结束的时候关闭这个文件. 满分~</p><p>​对了, 别忘了设置settings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;caipiao.pipelines.CaipiaoFilePipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-mysql数据库写入"><a href="#2-mysql数据库写入" class="headerlink" title="2. mysql数据库写入"></a>2. mysql数据库写入</h3><p>​有了上面的示例, 写入数据库其实也就很顺其自然了, 首先, 在open_spider中创建好数据库连接. 在close_spider中关闭链接. 在proccess_item中对数据进行保存工作. </p><p>先把mysql相关设置丢到settings里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MYSQL配置信息</span></span><br><span class="line">MYSQL_CONFIG = &#123;</span><br><span class="line">   <span class="string">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">   <span class="string">&quot;port&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">   <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">   <span class="string">&quot;password&quot;</span>: <span class="string">&quot;test123456&quot;</span>,</span><br><span class="line">   <span class="string">&quot;database&quot;</span>: <span class="string">&quot;spider&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> caipiao.settings <span class="keyword">import</span> MYSQL_CONFIG <span class="keyword">as</span> mysql</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CaipiaoMySQLPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.conn = pymysql.connect(host=mysql[<span class="string">&quot;host&quot;</span>], port=mysql[<span class="string">&quot;port&quot;</span>], user=mysql[<span class="string">&quot;user&quot;</span>], password=mysql[<span class="string">&quot;password&quot;</span>], database=mysql[<span class="string">&quot;database&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="comment"># 写入文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor = self.conn.cursor()</span><br><span class="line">            sql = <span class="string">&quot;insert into caipiao(qihao, red, blue) values(%s, %s, %s)&quot;</span></span><br><span class="line">            red = <span class="string">&quot;,&quot;</span>.join(item[<span class="string">&#x27;red_ball&#x27;</span>])</span><br><span class="line">            blue = <span class="string">&quot;,&quot;</span>.join(item[<span class="string">&#x27;blue_ball&#x27;</span>])</span><br><span class="line">            cursor.execute(sql, (item[<span class="string">&#x27;qihao&#x27;</span>], red, blue))</span><br><span class="line">            self.conn.commit()</span><br><span class="line">            spider.logger.info(<span class="string">f&quot;保存数据<span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            spider.logger.error(<span class="string">f&quot;保存数据库失败!&quot;</span>, e, <span class="string">f&quot;数据是: <span class="subst">&#123;item&#125;</span>&quot;</span>)  <span class="comment"># 记录错误日志</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>别忘了把pipeline设置一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;caipiao.pipelines.CaipiaoMySQLPipeline&#x27;</span>: <span class="number">301</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-mongodb数据库写入"><a href="#3-mongodb数据库写入" class="headerlink" title="3. mongodb数据库写入"></a>3. mongodb数据库写入</h3><p>​mongodb数据库写入和mysql写入如出一辙…不废话直接上代码吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MONGO_CONFIG = &#123;</span><br><span class="line">   <span class="string">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">   <span class="string">&quot;port&quot;</span>: <span class="number">27017</span>,</span><br><span class="line">   <span class="string">&#x27;has_user&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">   <span class="string">&#x27;user&#x27;</span>: <span class="string">&quot;python_admin&quot;</span>,</span><br><span class="line">   <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">   <span class="string">&quot;db&quot;</span>: <span class="string">&quot;python&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> caipiao.settings <span class="keyword">import</span> MONGO_CONFIG <span class="keyword">as</span> mongo</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CaipiaoMongoDBPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        client = pymongo.MongoClient(host=mongo[<span class="string">&#x27;host&#x27;</span>],</span><br><span class="line">                                     port=mongo[<span class="string">&#x27;port&#x27;</span>])</span><br><span class="line">        db = client[mongo[<span class="string">&#x27;db&#x27;</span>]]</span><br><span class="line">        <span class="keyword">if</span> mongo[<span class="string">&#x27;has_user&#x27;</span>]:</span><br><span class="line">            db.authenticate(mongo[<span class="string">&#x27;user&#x27;</span>], mongo[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        self.client = client</span><br><span class="line">        self.collection = db[<span class="string">&#x27;caipiao&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.client.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.collection.insert(&#123;<span class="string">&quot;qihao&quot;</span>: item[<span class="string">&#x27;qihao&#x27;</span>], <span class="string">&#x27;red&#x27;</span>: item[<span class="string">&quot;red_ball&quot;</span>], <span class="string">&#x27;blue&#x27;</span>: item[<span class="string">&#x27;blue_ball&#x27;</span>]&#125;)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="comment"># 三个管道可以共存~</span></span><br><span class="line">   <span class="string">&#x27;caipiao.pipelines.CaipiaoFilePipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">   <span class="string">&#x27;caipiao.pipelines.CaipiaoMySQLPipeline&#x27;</span>: <span class="number">301</span>,</span><br><span class="line">   <span class="string">&#x27;caipiao.pipelines.CaipiaoMongoDBPipeline&#x27;</span>: <span class="number">302</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-文件保存"><a href="#4-文件保存" class="headerlink" title="4. 文件保存"></a>4. 文件保存</h3><p>接下来我们来尝试使用scrapy来下载一些图片, 看看效果如何. </p><p>首先, 随便找个图片网站(安排好的). <a href="https://www.tupianzj.com/bizhi/DNmeinv/">https://www.tupianzj.com/bizhi/DNmeinv/</a>. 可以去看看, 妹子们还是很漂亮的. </p><p>接下来. 创建好项目,  定义好数据结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MeinvItem</span>(scrapy.Item):</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    img_url = scrapy.Field()</span><br><span class="line">    img_path = scrapy.Field()</span><br></pre></td></tr></table></figure><p>完善spider, 注意看yield scrapy.Request()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> meinv.items <span class="keyword">import</span> MeinvItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TupianzhijiaSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;tupianzhijia&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;tupianzj.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.tupianzj.com/bizhi/DNmeinv/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, resp, **kwargs</span>):</span><br><span class="line">        li_list = resp.xpath(<span class="string">&quot;//ul[@class=&#x27;list_con_box_ul&#x27;]/li&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            href = li.xpath(<span class="string">&quot;./a/@href&quot;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 拿到href为了什么? 进入详情页啊</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            url: 请求地址</span></span><br><span class="line"><span class="string">            method: 请求方式</span></span><br><span class="line"><span class="string">            callback: 回调函数</span></span><br><span class="line"><span class="string">            errback: 报错回调</span></span><br><span class="line"><span class="string">            dont_filter: 默认False, 表示&quot;不过滤&quot;, 该请求会重新进行发送</span></span><br><span class="line"><span class="string">            headers: 请求头. </span></span><br><span class="line"><span class="string">            cookies: cookie信息</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">                url=resp.urljoin(href),  <span class="comment"># scrapy的url拼接</span></span><br><span class="line">                method=<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">                callback=self.parse_detail,</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># 下一页</span></span><br><span class="line">        next_page = resp.xpath(<span class="string">&#x27;//div[@class=&quot;pages&quot;]/ul/li/a[contains(text(), &quot;下一页&quot;)]/@href&#x27;</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">                url=resp.urljoin(next_page),</span><br><span class="line">                method=<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">                callback=self.parse</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_detail</span>(<span class="params">self, resp</span>):</span><br><span class="line">        img_src = resp.xpath(<span class="string">&#x27;//*[@id=&quot;bigpic&quot;]/a[1]/img/@src&#x27;</span>).extract_first()</span><br><span class="line">        name = resp.xpath(<span class="string">&#x27;//*[@id=&quot;container&quot;]/div/div/div[2]/h1/text()&#x27;</span>).extract_first()</span><br><span class="line">        meinv = MeinvItem()</span><br><span class="line">        meinv[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        meinv[<span class="string">&#x27;img_url&#x27;</span>] = img_src</span><br><span class="line">        <span class="keyword">yield</span> meinv</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>​关于Request()的参数:<br>​url: 请求地址<br>​            method: 请求方式<br>​            callback: 回调函数<br>​            errback: 报错回调<br>​            dont_filter: 默认False, 表示”不过滤”, 该请求会重新进行发送<br>​            headers: 请求头.<br>​            cookies: cookie信息</p><p>​接下来就是下载问题了. 如何在pipeline中下载一张图片呢? Scrapy早就帮你准备好了. 在Scrapy中有一个ImagesPipeline可以实现自动图片下载功能. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline, FilesPipeline</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> meinv.settings <span class="keyword">import</span> MYSQL</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MeinvPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.conn = pymysql.connect(</span><br><span class="line">            host=MYSQL[<span class="string">&#x27;host&#x27;</span>],</span><br><span class="line">            port=MYSQL[<span class="string">&#x27;port&#x27;</span>],</span><br><span class="line">            user=MYSQL[<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">            password=MYSQL[<span class="string">&#x27;password&#x27;</span>],</span><br><span class="line">            database=MYSQL[<span class="string">&#x27;database&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> self.conn:</span><br><span class="line">            self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor = self.conn.cursor()</span><br><span class="line">            sql = <span class="string">&quot;insert into tu (name, img_src, img_path) values (%s, %s, %s)&quot;</span></span><br><span class="line">            cursor.execute(sql, (item[<span class="string">&#x27;name&#x27;</span>], item[<span class="string">&#x27;img_src&#x27;</span>], item[<span class="string">&#x27;img_path&#x27;</span>]))</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> cursor:</span><br><span class="line">                cursor.close()</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MeinvSavePipeline</span>(<span class="title class_ inherited__">ImagesPipeline</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_media_requests</span>(<span class="params">self, item, info</span>):</span><br><span class="line">        <span class="comment"># 发送请求去下载图片</span></span><br><span class="line">        <span class="comment"># 如果是一堆图片. 可以使用循环去得到每一个url, 然后在yield每一个图片对应的Request对象</span></span><br><span class="line">        <span class="keyword">return</span> scrapy.Request(item[<span class="string">&#x27;img_url&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 准备好图片的名称</span></span><br><span class="line">        filename = request.url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;img/<span class="subst">&#123;filename&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">item_completed</span>(<span class="params">self, results, item, info</span>):</span><br><span class="line">        <span class="comment"># 文件存储的路径</span></span><br><span class="line">        ok, res = results[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(res[&#x27;path&#x27;])</span></span><br><span class="line">        item[<span class="string">&#x27;img_path&#x27;</span>] = res[<span class="string">&quot;path&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>最后, 需要在settings中设置以下内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MYSQL = &#123;</span><br><span class="line">   <span class="string">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">   <span class="string">&quot;port&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">   <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">   <span class="string">&quot;password&quot;</span>: <span class="string">&quot;test123456&quot;</span>,</span><br><span class="line">   <span class="string">&quot;database&quot;</span>: <span class="string">&#x27;spider&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;meinv.pipelines.MeinvPipeline&#x27;</span>: <span class="number">303</span>,</span><br><span class="line">    <span class="string">&#x27;meinv.pipelines.MeinvSavePipeline&#x27;</span>: <span class="number">301</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 图片保存路径  -&gt; ImagesPipeline</span></span><br><span class="line">IMAGES_STORE= <span class="string">&#x27;./my_tu&#x27;</span></span><br><span class="line"><span class="comment"># 文件保存路径 -&gt; FilesPipeline</span></span><br><span class="line">FILES_STORE = <span class="string">&#x27;./my_tu&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="爬虫开发" scheme="http://blog.ioimp.top/categories/%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Scrapy爬虫" scheme="http://blog.ioimp.top/tags/Scrapy%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>scrapy入门课件</title>
    <link href="http://blog.ioimp.top/2023/12/03/scrapy%E5%85%A5%E9%97%A8%E8%AF%BE%E4%BB%B6/"/>
    <id>http://blog.ioimp.top/2023/12/03/scrapy%E5%85%A5%E9%97%A8%E8%AF%BE%E4%BB%B6/</id>
    <published>2023-12-03T03:53:32.000Z</published>
    <updated>2023-12-03T03:55:45.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Scrapy-基本介绍与使用"><a href="#Scrapy-基本介绍与使用" class="headerlink" title="Scrapy 基本介绍与使用"></a>Scrapy 基本介绍与使用</h1><h2 id="一-爬虫工程化"><a href="#一-爬虫工程化" class="headerlink" title="一, 爬虫工程化"></a>一, 爬虫工程化</h2><p>​在之前的学习中我们已经掌握了爬虫这门技术需要的大多数的技术点, 但是我们现在写的代码还很流程化, 很难进行商用的. 想要我们的爬虫达到商用级别, 必须要对我们现在编写的爬虫代码进行大刀阔斧式的重组, 已达到工程化的爬虫. 何为工程化, 就是让你的程序更加的有体系, 有逻辑, 更加的模块化. </p><p>​就好比, 我们家里以前做过鞋子, 我妈妈给我做鞋, 她需要从画图纸到裁剪到最后的缝合, 一步一步的完成一双鞋子的制作. 这种手工鞋子如果每年做个几双, 没问题. 我妈妈辛苦一点, 也能搞定. 但是, 如果现在我想去售卖这个鞋子. 再依靠妈妈一双一双的缝制. 你不赔死, 也得让你妈打死. 为什么? 第一, 产能跟不上. 一个人的力量是有限的, 第二, 一个人要完整的把制作鞋子的工艺从头搞到尾. 就算你想招人分担一下. 貌似也不好找这样厉害的手艺人. 怎么办? 聪明的你可能已经想到了. 从头到尾完成一双鞋的人不好找. 那我就把这个工艺过程分开. 分成4份, 画图, 裁剪, 缝合, 验收.  招4个人. 每个人就负责一小部分. 并且这一小部分是很容易完成的. 最终只要有一个人(我)来做一个总指挥. 我的制鞋小工厂就建起来了. </p><p>​上述逻辑同样适用于我们的爬虫, 想想, 到目前为止, 我们所编写的爬虫我们都是从头到尾的每一步都要亲力亲为. 这样做固然有其优点(可控性更好), 但是各位请认真思考. 这样的代码逻辑是不能形成批量生产的效果的(写100个爬虫). 很多具有共通性的代码逻辑都没有进行重复利用. 那我们就可以考虑看看, 能不能把一些共性的问题(获取页面源代码, 数据存储), 单独搞成一个功能. 如果我们把这些功能单独进行编写. 并且产生类似单独的功能模块, 将大大的提高我们爬虫的效率.  已达到我们爬虫工程化开发的效果. </p><p>​爬虫工程化: 对爬虫的功能进行模块化的开发. 并达到可以批量生产的效果(不论是开发还是数据产出)</p><h2 id="二-scrapy简介"><a href="#二-scrapy简介" class="headerlink" title="二, scrapy简介"></a>二, scrapy简介</h2><p>​Scrapy到目前为止依然是这个星球上最流行的爬虫框架. 摘一下官方给出对scrapy的介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">An open source and collaborative framework for extracting the data you need from websites.</span><br><span class="line"></span><br><span class="line">In a fast, simple, yet extensible way.</span><br></pre></td></tr></table></figure><p>​scrapy的特点: 速度快, 简单, 可扩展性强. </p><p>​scrapy的官方文档: <a href="https://docs.scrapy.org/en/latest/">https://docs.scrapy.org/en/latest/</a></p><h2 id="三-scrapy工作流程-重点"><a href="#三-scrapy工作流程-重点" class="headerlink" title="三, scrapy工作流程(重点)"></a>三, scrapy工作流程(重点)</h2><p>​之前我们所编写的爬虫的逻辑: </p><p><img src="/images/scrapy01/image-20210803105808636.png" alt="images/scrapy01/image-20210803105808636"></p><p>​scrapy的工作流程: </p><p><img src="/images/scrapy01/image-20210803113438252.png" alt="images/scrapy01/image-20210803113438252"></p><p>整个工作流程, </p><ol><li><p>爬虫中起始的url构造成request对象, 并传递给调度器. </p></li><li><p><code>引擎</code>从<code>调度器</code>中获取到request对象. 然后交给<code>下载器</code></p></li><li><p>由<code>下载器</code>来获取到页面源代码, 并封装成response对象. 并回馈给<code>引擎</code></p></li><li><p><code>引擎</code>将获取到的response对象传递给<code>spider</code>, 由<code>spider</code>对数据进行解析(parse). 并回馈给<code>引擎</code></p></li><li><p><code>引擎</code>将数据传递给pipeline进行数据持久化保存或进一步的数据处理. </p></li><li><p>在此期间如果spider中提取到的并不是数据. 而是子页面url. 可以进一步提交给调度器, 进而重复<code>步骤2</code>的过程</p></li></ol><p>上述过程中一直在重复着几个东西, </p><ol><li><p>引擎(engine)</p><p>scrapy的核心, 所有模块的衔接, 数据流程梳理.</p></li><li><p>调度器(scheduler)</p><p>本质上这东西可以看成是一个队列. 里面存放着一堆我们即将要发送的请求. 可以看成是一个url的容器. 它决定了下一步要去爬取哪一个url. 通常我们在这里可以对url进行去重操作.  </p></li><li><p>下载器(downloader)</p><p>它的本质就是用来发动请求的一个模块. 小白们完全可以把它理解成是一个get_page_source()的功能. 只不过这货返回的是一个response对象. </p></li><li><p>爬虫(spider)</p><p>这是我们要写的第一个部分的内容, 负责解析下载器返回的response对象.从中提取到我们需要的数据. </p></li><li><p>管道(pipeline)</p><p>这是我们要写的第二个部分的内容, 主要负责数据的存储和各种持久化操作.</p></li></ol><p>经过上述的介绍来看, scrapy其实就是把我们平时写的爬虫进行了四分五裂式的改造. 对每个功能进行了单独的封装, 并且, 各个模块之间互相的不做依赖. 一切都由引擎进行调配. 这种思想希望你能知道–解耦. 让模块与模块之间的关联性更加的松散. 这样我们如果希望替换某一模块的时候会非常的容易. 对其他模块也不会产生任何的影响. </p><p>到目前为止, 我们对scrapy暂时了解这么多就够了. 后面会继续在这个图上进一步展开. </p><h2 id="四-scrapy安装"><a href="#四-scrapy安装" class="headerlink" title="四, scrapy安装"></a>四, scrapy安装</h2><p>​在windows上安装scrapy是一个很痛苦的事情. 可能会出现各种各样的异常BUG. </p><p>​先使用pip直接安装看看报错不</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple scrapy </span><br></pre></td></tr></table></figure><p>​如果安装成功, 直接去创建项目即可. 如果报错可能需要安装VC++14.0库才可以. 安装的时候一定不要死记安装步骤, 要观察报错信息. 根据报错信息进行一点点的调整, 多试几次pip. 直至success. </p><p>如果上述过程还是无法正常安装scrapy, 可以考虑用下面的方案来安装:</p><ol><li><p>安装wheel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br></pre></td></tr></table></figure></li><li><p>下载twisted安装包, <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a></p><p><img src="/images/scrapy01/image-20210803144429440.png" alt="images/scrapy01/image-20210803144429440"></p><ol start="3"><li>用wheel安装twisted.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Twisted‑<span class="number">21.7</span><span class="number">.0</span>‑py3‑none‑<span class="built_in">any</span>.whl</span><br></pre></td></tr></table></figure></li><li><p>安装pywin32</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pywin32</span><br></pre></td></tr></table></figure></li><li><p>安装scrapy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure></li></ol><p>总之, 最终你的控制台输入<code>scrapy version</code>能显示版本号. 就算成功了</p><h2 id="五-scrapy实例"><a href="#五-scrapy实例" class="headerlink" title="五, scrapy实例"></a>五, scrapy实例</h2><p>​接下来, 我们用scrapy来完成一个超级简单的爬虫, 目标: 深入理解Scrapy工作的流程, 以及各个模块之间是如何搭配工作的. </p><ol><li><p>创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 项目名称</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject mySpider_2</span><br></pre></td></tr></table></figure><p>创建好项目后, 我们可以在pycharm里观察到scrapy帮我们创建了一个文件夹, 里面的目录结构如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mySpider_2   <span class="comment"># 项目所在文件夹, 建议用pycharm打开该文件夹</span></span><br><span class="line">    ├── mySpider_2  <span class="comment"># 项目跟目录</span></span><br><span class="line">    │   ├── __init__.py</span><br><span class="line">    │   ├── items.py  <span class="comment"># 封装数据的格式</span></span><br><span class="line">    │   ├── middlewares.py  <span class="comment"># 所有中间件</span></span><br><span class="line">    │   ├── pipelines.py<span class="comment"># 所有的管道</span></span><br><span class="line">    │   ├── settings.py<span class="comment"># 爬虫配置信息</span></span><br><span class="line">    │   └── spiders<span class="comment"># 爬虫文件夹, 稍后里面会写入爬虫代码</span></span><br><span class="line">    │       └── __init__.py</span><br><span class="line">    └── scrapy.cfg<span class="comment"># scrapy项目配置信息,不要删它,别动它,善待它. </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建爬虫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 文件夹  <span class="comment"># 进入项目所在文件夹</span></span><br><span class="line">scrapy genspider 爬虫名称 允许抓取的域名范围</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mySpider_2</span><br><span class="line">scrapy genspider youxi 4399.com</span><br></pre></td></tr></table></figure><p>效果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) sylardeMBP:第七章 sylar$ cd mySpider_2</span><br><span class="line">(base) sylardeMBP:mySpider_2 sylar$ ls</span><br><span class="line">mySpider_2      scrapy.cfg</span><br><span class="line">(base) sylardeMBP:mySpider_2 sylar$ scrapy genspider youxi http://www<span class="number">.4399</span>.com/</span><br><span class="line">Created spider <span class="string">&#x27;youxi&#x27;</span> using template <span class="string">&#x27;basic&#x27;</span> <span class="keyword">in</span> module:</span><br><span class="line">  mySpider_2.spiders.youxi</span><br><span class="line">(base) sylardeMBP:mySpider_2 sylar$ </span><br></pre></td></tr></table></figure><p>至此, 爬虫创建完毕, 我们打开文件夹看一下. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── mySpider_2</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── youxi.py   <span class="comment"># 多了一个这个. </span></span><br><span class="line">└── scrapy.cfg</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写数据解析过程</p><p>完善youxi.py中的内容. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YouxiSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;youxi&#x27;</span>  <span class="comment"># 该名字非常关键, 我们在启动该爬虫的时候需要这个名字</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;4399.com&#x27;</span>]  <span class="comment"># 爬虫抓取的域.</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.4399.com/flash/&#x27;</span>]  <span class="comment"># 起始页</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response, **kwargs</span>):</span><br><span class="line">        <span class="comment"># response.text  # 页面源代码</span></span><br><span class="line">        <span class="comment"># response.xpath()  # 通过xpath方式提取</span></span><br><span class="line">        <span class="comment"># response.css()  # 通过css方式提取</span></span><br><span class="line">        <span class="comment"># response.json() # 提取json数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用我们最熟悉的方式: xpath提取游戏名称, 游戏类别, 发布时间等信息</span></span><br><span class="line">        li_list = response.xpath(<span class="string">&quot;//ul[@class=&#x27;n-game cf&#x27;]/li&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            name = li.xpath(<span class="string">&quot;./a/b/text()&quot;</span>).extract_first()</span><br><span class="line">            category = li.xpath(<span class="string">&quot;./em/a/text()&quot;</span>).extract_first()</span><br><span class="line">            date = li.xpath(<span class="string">&quot;./em/text()&quot;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            dic = &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                <span class="string">&quot;category&quot;</span>: category,</span><br><span class="line">                <span class="string">&quot;date&quot;</span>: date</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将提取到的数据提交到管道内.</span></span><br><span class="line">            <span class="comment"># 注意, 这里只能返回 request对象, 字典, item数据, or None</span></span><br><span class="line">            <span class="keyword">yield</span> dic</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意: </p><p>&#x3D;&#x3D;spider返回的内容只能是字典, requestes对象, item数据或者None. 其他内容一律报错&#x3D;&#x3D;</p><p>运行爬虫: </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 爬虫名字</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl youxi</span><br></pre></td></tr></table></figure></li><li><p>编写pipeline.对数据进行简单的保存</p><p>数据传递到pipeline, 我们先看一下在pipeline中的样子. </p><p>首先修改settings.py文件中的pipeline信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="comment"># 前面是pipeline的类名地址               </span></span><br><span class="line">    <span class="comment"># 后面是优先级, 优先级月低越先执行</span></span><br><span class="line">   <span class="string">&#x27;mySpider_2.pipelines.Myspider2Pipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们修改一下pipeline中的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myspider2Pipeline</span>:</span><br><span class="line">    <span class="comment"># 这个方法的声明不能动!!! 在spider返回的数据会自动的调用这里的process_item方法. </span></span><br><span class="line">    <span class="comment"># 你把它改了. 管道就断了</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li></ol><h2 id="六-自定义数据传输结构item"><a href="#六-自定义数据传输结构item" class="headerlink" title="六, 自定义数据传输结构item"></a>六, 自定义数据传输结构item</h2><p>​在上述案例中, 我们使用字典作为数据传递的载体, 但是如果数据量非常大. 由于字典的key是随意创建的. 极易出现问题,  此时再用字典就不合适了. Scrapy中提供item作为数据格式的声明位置. 我们可以在items.py文件提前定义好该爬虫在进行数据传输时的数据格式. 然后再写代码的时候就有了数据名称的依据了. </p><p>item.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># 定义数据结构</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    category = scrapy.Field()</span><br><span class="line">    date = scrapy.Field()</span><br></pre></td></tr></table></figure><p>spider中. 这样来使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mySpider_2.items <span class="keyword">import</span> GameItem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下代码在spider中的parse替换掉原来的字典</span></span><br><span class="line">item = GameItem()</span><br><span class="line">item[<span class="string">&quot;name&quot;</span>] = name</span><br><span class="line">item[<span class="string">&quot;category&quot;</span>] = category</span><br><span class="line">item[<span class="string">&quot;date&quot;</span>] = date</span><br><span class="line"><span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h2 id="七-scrapy使用小总结"><a href="#七-scrapy使用小总结" class="headerlink" title="七, scrapy使用小总结"></a>七, scrapy使用小总结</h2><p>至此, 我们对scrapy有了一个非常初步的了解和使用. 快速总结一下. scrapy框架的使用流程: </p><ol><li>创建爬虫项目.   <code>scrapy startproject xxx     </code></li><li>进入项目目录.    <code>cd xxx  </code></li><li>创建爬虫            <code>scrapy genspider 名称 抓取域</code></li><li>编写<code>item.py</code> 文件, 定义好数据item</li><li>修改spider中的parse方法. 对返回的响应response对象进行解析. 返回item</li><li>在pipeline中对数据进行保存工作. </li><li>修改<code>settings.py</code>文件, 将pipeline设置为生效, 并设置好优先级</li><li>启动爬虫   <code>scrapy crawl 名称</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="爬虫开发" scheme="http://blog.ioimp.top/categories/%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Scrapy爬虫" scheme="http://blog.ioimp.top/tags/Scrapy%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>搭建github博客教程</title>
    <link href="http://blog.ioimp.top/2023/12/03/%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.ioimp.top/2023/12/03/%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</id>
    <published>2023-12-03T03:47:04.000Z</published>
    <updated>2023-12-03T03:52:10.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【2023最新版】Hexo-github搭建个人博客并绑定个人域名"><a href="#【2023最新版】Hexo-github搭建个人博客并绑定个人域名" class="headerlink" title="【2023最新版】Hexo+github搭建个人博客并绑定个人域名"></a>【2023最新版】Hexo+github搭建个人博客并绑定个人域名</h1><h2 id="Hexo-github搭建个人博客并绑定个人域名"><a href="#Hexo-github搭建个人博客并绑定个人域名" class="headerlink" title="Hexo+github搭建个人博客并绑定个人域名"></a><a href="https://so.csdn.net/so/search?q=Hexo&spm=1001.2101.3001.7020">Hexo</a>+github搭建个人博客并绑定个人域名</h2><h4 id="安装并配置Node-js"><a href="#安装并配置Node-js" class="headerlink" title="安装并配置Node.js"></a>安装并配置Node.js</h4><p>Node.js下载:【它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。】</p><p>教程：<a href="https://blog.csdn.net/weixin/_52799373/article/details/123840137%EF%BC%88%E8%BF%87%E7%A8%8B%E8%AF%A6%E7%BB%86%EF%BC%8C%E8%BF%98%E8%A6%86%E7%9B%96win11%EF%BC%8C%E8%AF%84%E8%AE%BA%E4%B8%8B%E9%9D%A2%E8%BF%98%E6%9C%89%E5%B8%88%E5%8F%94%E7%9A%84%E8%B6%B3%E8%BF%B9%EF%BC%89">https://blog.csdn.net/weixin\_52799373/article/details/123840137（过程详细，还覆盖win11，评论下面还有师叔的足迹）</a></p><p>注意一</p><p>全局安装最常用的 express 模块 进行测试命令如下:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install express -g</span><br></pre></td></tr></table></figure><p>报错图片：</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/566631a93202e6841e3b9728d4181c78.png"></p><p>解决方法：</p><ul><li><p>【亲测有效】</p></li><li><p>需要删除 npmrc 文件。</p></li><li><p>**强调：**不是nodejs安装目录npm模块下的那个npmrc文件</p></li><li><p>而是在 C:\Users\（你的用户名）\下的.npmrc文件</p></li><li><p><em><strong>聪明的你，一定想到了直接用evering搜索，省的还要调用文件管理器在一点一点的找</strong></em></p></li></ul><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/c55ce90256466fb4321c7ceec2174333.png"></p><p>注意二</p><p><strong>在文章第四歩测试上查看安装结果</strong></p><p>可能会出现下面照片结果，更改了目录为什么还是C盘目录下，这时候只需要以管理员身份运行命令即可。</p><p>在下面路径下找到cmd.exe并且管理员身份运行即可。</p><p>推测：出像这种现象的原因就是执行权限不够，推荐大家在桌面建立一个快捷方式（管理员命令的）cmd</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">C:</span>\Windows\System32\cmd.exe</span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/910c8ab64ab09363b6746b621bc8055a.png"></p><p>创建管理员权限的cmd桌面快捷方式</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/a24b65ce36754df5b84ebd74dcae3937.png"></p><h4 id="安装并配置Git"><a href="#安装并配置Git" class="headerlink" title="安装并配置Git"></a>安装并配置Git</h4><p>git是一个并源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</p><p>Windows系统Git安装教程：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><h4 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h4><p>生成ssh</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱地址&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/ffb1c86562ad1f7c9e38918c6a71ac24.png"></p><p>找到秘钥位置并复制</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/40764e8f2ea3b220e1492173880c71b4.png"></p><p>测试ssh是否绑定成功</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git<span class="meta">@github</span>.<span class="property">com</span></span><br></pre></td></tr></table></figure><p>如果问你（yes or no）,直接 yes 就可以得到下面这段话</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/0b809bb5e4c84157c139e010e1bc7917.png"></p><h4 id="本地访问博客"><a href="#本地访问博客" class="headerlink" title="本地访问博客"></a>本地访问博客</h4><p>1、创建一个名为 Blog 的文件，在里面启用 Git Bash Here</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/124885ee5a5be2c2605f30b880329825.png"></p><p>2、初始化hexo</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">init</span></span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/93962986201290891b09b0266420f301.png"></p><p>3、生成本地的hexo页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/7c03fe7e8d60be5cf82963e8103f9f6b.png"></p><p>4、访问</p><p>打开本地服务区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/975e56860c24c8076fb91ad2ec24e4f2.png"></p><blockquote><p>长按 Ctrl + c 关闭服务器</p></blockquote><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/745143e1d8f6411d54566506d555c313.png"></p><h4 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h4><p>修改-config.yml文件</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/5dad89898d2144898261ea18aefaa30f.png"></p><p>把图片上位置更换成</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">deploy</span>:  <span class="class"><span class="keyword">type</span>: git  repository: 你的github地址  branch: main</span></span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/85937e8781a64d4a893c4981e00e6a26.png"></p><p>安装hexo-deployer-git 自动部署发布工具</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>deployer<span class="operator">-</span>git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/681b76b969aa195e15d44c8bfc71565c.png"></p><p>生成页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/412c15c15d8987484a32f9546e4f9095.png"></p><p>注意一</p><p>如果报错如下：（无报错，请忽略此条）</p><p>报错信息是提示hexo的yml配置文件 冒号后面少了空格解决方案：到提示行将对应的空格补上即可</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/5f5f79045917c6d093df24b22e641516.png"></p><p>本地文件上传到Github上面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>中间会出现一个登录界面，可以用令牌登录。（令牌及时保存，就看不到了）</p><p>结束以后就上传 Github 就成功了！！！</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/15bc2a357a6eac25ec4719dcec9c5007.png"></p><p>注意二</p><p>如果出现如图错误网络报错，再次尝试，多次尝试，直到更换WiFi~~~~</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/5a2a4dabd744ba6a750102dfc623993e.png"></p><h4 id="访问GitHub博客"><a href="#访问GitHub博客" class="headerlink" title="访问GitHub博客"></a>访问GitHub博客</h4><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/aa9870ef4369263b6560c13aa5d753c9.png"></p><p>访问博客，开始的页面是初始化页面，没有做美化和增加内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wushishu.github.io/</span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/c05cd48fac0243ff9963413b078d2fcc.png"></p><h3 id="第二部分-文档学习"><a href="#第二部分-文档学习" class="headerlink" title="第二部分 文档学习"></a>第二部分 文档学习</h3><h4 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h4><p><em><strong>电脑要必须有Typora！电脑要必须有Typora！电脑要必须有Typora！</strong></em>（重要的事情说三遍）</p><p>文本教程：<a href="https://dhndzwxj.vercel.app/3276806131.html">https://dhndzwxj.vercel.app/3276806131.html</a></p><p>hexo标签教程：<a href="http://haiyong.site/post/cda958f2.html%EF%BC%88%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%E7%9C%8B%E9%9C%80%E6%B1%82%E5%8A%A0%E4%B8%8D%E5%8A%A0%EF%BC%89">http://haiyong.site/post/cda958f2.html（参考文档看需求加不加）</a></p><p>我们打开自己的博客根目录，跟着我一个个了解里面的这些文件（夹）都是干什么的：</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/d12390a33a7bc45be0582ac20092c28b.png"></p><ul><li><p><code>_config.yml</code>：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。</p></li><li><p><code>node_modules</code>:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。</p></li><li><p><code>package.json</code>：别问我，我也不知道干嘛的。</p></li><li><p><code>scaffolds</code>：模板文件夹，里面的<code>post.md</code>文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。</p></li><li><p><code>source</code>：非常重要。所有的个人文件都在里面！</p></li><li><p><code>themes</code>：主题文件夹，可以从<a href="https://hexo.io/themes/" title="Hexo主题官网">Hexo主题官网</a>或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！</p></li></ul><p>接下来重点介绍<code>source</code>文件夹。新建的博客中，<code>source</code>文件夹下默认只有一个子文件夹——<code>_posts</code>。我们写的博客都放在这个子文件夹里面。我们还可以在<code>source</code>里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。</p><blockquote><p>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/commands.html">https://hexo.io/zh-cn/docs/commands.html</a></p></blockquote><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/8389594494d846358792082d4096fce7.png"></p><p>写好内容后，在命令行一键三连：</p><blockquote><p>‘hexo cl’命令用于清除缓存文件（db.json）和已生成的静态文件（public）。</p><p>例如：在更换主题后，如果发现站点更改不生效，可以运行该命令。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后随便打开一个浏览器，在网址栏输入<code>localhost:4000/</code>，就能发现自己的网站更新了！不过这只是在本地进行了更新，要想部署到网上（Github上），输入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后在浏览器地址栏输入<code>https://yourname.github.io</code>，或者<code>yourname.github.io</code>就能在网上浏览自己的博客了！</p><p>以上，我们的博客网站1.0版本就搭建完成了，如果没有更多的需求，做到这里基本上就可以了。如果有更多的要求，还需要进一步的精耕细作！</p><h4 id="精耕细作"><a href="#精耕细作" class="headerlink" title="精耕细作"></a>精耕细作</h4><p>**海拥\Butterfly 主题美化：**<a href="http://haiyong.site/post/22e1d5da.html">http://haiyong.site/post/22e1d5da.html</a></p><p><strong>Butterfly参考文档（小白慎入，但是他也是你走向DIY必须迈出的一歩）</strong>:<a href="https://butterfly.js.org/posts/dc584b87/#Post-Front-matter">https://butterfly.js.org/posts/dc584b87/#Post-Front-matter</a></p><p>文章中要更改的文件（.yml .bug 等）可以要用viscode打开！！！</p><p>Butterfly 主题安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>这里面如果报错，如下图所示（长路漫漫，bug满满）</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/e28a8a9ed9eb2848f84075e0e0aeba0e.png"></p><p>只需要在命令行中执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span> http.proxy git config --<span class="keyword">global</span> --<span class="keyword">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>再次安装主题即可成功</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/8e0ff6ac2ae7b9712214f13438a40f27.png"></p><p><strong>应用主题</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> butterfly</span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/1a1fed2db4bbb066f43e879fb70cf5c5.png"></p><p><strong>安装插件</strong></p><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>renderer<span class="operator">-</span>pug hexo<span class="operator">-</span>renderer<span class="operator">-</span>stylus <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/cee71aa9a5c2766541aac4d5aa03c48a.png"></p><h4 id="Butterfly-主题美化"><a href="#Butterfly-主题美化" class="headerlink" title="Butterfly 主题美化"></a>Butterfly 主题美化</h4><p>生成文章唯一链接</p><p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文，</p><p>复制后的URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的url链接，偶然你又修改了改文章的标题，那这个URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用 hexo-abbrlink 插件，A Hexo plugin to generate static post link based on post titles ,来解决这个问题。 参考github官方： hexo-abbrlink 按照此教程配置完之后如下：</p><p>1、安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/6af8bde01cd64d3a7e38d3e4c2fd9816.png"></p><p>2、插件安装成功后，在根目录 [Blogroot] 的配置文件 _config.yml 找到 permalink：</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/img_convert/34cc88e45553f0dad679ca75f96168c2.png"></p><h4 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h4><p>这次了解我上面只有一个HelloWord的时候，为什么不让右键新建，<strong>因为需要命令生成啊，铁汁！</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">i</span> <span class="selector-tag">hexo-deployer-git</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> post <span class="string">&quot;新建博客文章名&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h4 id="hexo更换背景图片"><a href="#hexo更换背景图片" class="headerlink" title="hexo更换背景图片"></a>hexo更换背景图片</h4><p>背景图片参考网址：</p><ul><li><p><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></p></li><li><p><a href="https://wall.alphacoders.com/">https://wall.alphacoders.com/</a></p></li><li><p><a href="https://bz.zzzmh.cn/index">https://bz.zzzmh.cn/index</a></p></li></ul><p><em>本方法解决的是多次同步到GitHub上背景图片未成功的情况</em></p><p>直接更改原文件</p><p>图片所在目录：<code>hexo/themes/landscape/source/css/images/</code></p><p>图片名称：<code>banner.jpg</code></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="第三部分-绑定自己的域名"><a href="#第三部分-绑定自己的域名" class="headerlink" title="第三部分 绑定自己的域名"></a>第三部分 绑定自己的域名</h3><p>博客地址：<a href="https://www.likecs.com/show-30474.html">https://www.likecs.com/show-30474.html</a></p><p><strong>绑定之后你就有有一个自己专属的博客了。</strong></p><p>买一个域名，可以一块钱白嫖，但是续费贵的飞天！！！</p><p><em><strong>注意请谨慎绑定，想我就会出现提交一次 (hexo d) ,需要重新绑定域名</strong></em></p><blockquote><p>声明：如果遇到什么不懂的可以先百度，在不懂可以微信我wushibo0820</p></blockquote><h2 id="问题：解决-103-x69-x74-x40-103-105-116-104-x75-x62-46-x63-111-109-Permission-denied-publickey-fatal-Could-not-read-from-remote-repository-Pleas"><a href="#问题：解决-103-x69-x74-x40-103-105-116-104-x75-x62-46-x63-111-109-Permission-denied-publickey-fatal-Could-not-read-from-remote-repository-Pleas" class="headerlink" title="问题：解决&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;: Permission denied (publickey). fatal: Could not read from remote repository. Pleas"></a>问题：解决<a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;">&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;</a>: Permission denied (publickey). fatal: Could not read from remote repository. Pleas</h2><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/20200603101902230.png"></p><h4 id="一-原因分析"><a href="#一-原因分析" class="headerlink" title="一:原因分析"></a>一:原因分析</h4><p>Permission denied (publickey) 没有权限的publickey ，出现这错误一般是以下两种原因</p><ul><li>客户端与服务端未生成 ssh key</li><li>客户端与服务端的ssh key不匹配</li></ul><p>找到问题的原因了，解决办法也就有了，重新生成一次ssh key ，服务端也重新配置一次即可。</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="二-客户端生成ssh-key"><a href="#二-客户端生成ssh-key" class="headerlink" title="二:客户端生成ssh key"></a>二:客户端生成ssh key</h4><p>在cmd里面输入</p><p>ssh-keygen -t rsa -C “<a href="mailto:&#x78;&#x78;&#120;&#x78;&#120;&#120;&#120;&#x78;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x78;&#x78;&#120;&#x78;&#120;&#120;&#120;&#x78;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a>“</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>xxxxxx<a href="mailto:youremail@example.com">@qq.com</a>改为自己的邮箱即可，途中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。（如果重新生成的话会覆盖之前的ssh key。）</p><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/202006031025357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dfMzE3,size_16,color_FFFFFF,t_70"></p><h4 id="三-输入箭头处路径"><a href="#三-输入箭头处路径" class="headerlink" title="三:输入箭头处路径"></a>三:输入箭头处路径</h4><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/20200603102554725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dfMzE3,size_16,color_FFFFFF,t_70"></p><h4 id="四-打开id-rsa-pub文件-并且复制内容"><a href="#四-打开id-rsa-pub文件-并且复制内容" class="headerlink" title="四:打开id_rsa.pub文件,并且复制内容"></a>四:打开id_rsa.pub文件,并且复制内容</h4><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/20200603102735768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dfMzE3,size_16,color_FFFFFF,t_70"></p><h4 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h4><h4 id="五-在github上打开箭头处-点击Setting"><a href="#五-在github上打开箭头处-点击Setting" class="headerlink" title="五:在github上打开箭头处,点击Setting"></a>五:在github上打开箭头处,点击Setting</h4><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/20200603102157756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dfMzE3,size_16,color_FFFFFF,t_70"></p><h4 id="六-点击SSH-and-GPG-keys"><a href="#六-点击SSH-and-GPG-keys" class="headerlink" title="六:点击SSH and GPG keys"></a>六:点击SSH and GPG keys</h4><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/20200603102223280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dfMzE3,size_16,color_FFFFFF,t_70"></p><h4 id="七-打开你刚刚生成的id-rsa-pub，将里面的内容复制，进入你的github账号，在settings下，SSH-and-GPG-keys下new-SSH-key，然后将id-rsa-pub里的内容复制到Key中，完成后Add-SSH-Key。"><a href="#七-打开你刚刚生成的id-rsa-pub，将里面的内容复制，进入你的github账号，在settings下，SSH-and-GPG-keys下new-SSH-key，然后将id-rsa-pub里的内容复制到Key中，完成后Add-SSH-Key。" class="headerlink" title="七:打开你刚刚生成的id_rsa.pub，将里面的内容复制，进入你的github账号，在settings下，SSH and GPG keys下new SSH key，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。"></a>七:打开你刚刚生成的id_rsa.pub，将里面的内容复制，进入你的github账号，在settings下，SSH and GPG keys下new SSH key，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。</h4><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/2020060310174263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dfMzE3,size_16,color_FFFFFF,t_70"></p><h4 id="八-然后添加后入下图所示"><a href="#八-然后添加后入下图所示" class="headerlink" title="八:然后添加后入下图所示"></a>八:然后添加后入下图所示</h4><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/20200603101823216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dfMzE3,size_16,color_FFFFFF,t_70"></p><h4 id="九-用idea再次提交文件到-github上-显示提交成功"><a href="#九-用idea再次提交文件到-github上-显示提交成功" class="headerlink" title="九:用idea再次提交文件到 github上,显示提交成功"></a>九:用idea再次提交文件到 github上,显示提交成功</h4><p><img src="https://proxy.iximp.top/https://img-blog.csdnimg.cn/20200603103159683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dfMzE3,size_16,color_FFFFFF,t_70"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="杂类学习" scheme="http://blog.ioimp.top/categories/%E6%9D%82%E7%B1%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="博客搭建教程" scheme="http://blog.ioimp.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes核心概念</title>
    <link href="http://blog.ioimp.top/2023/11/24/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>http://blog.ioimp.top/2023/11/24/kubernetes%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</id>
    <published>2023-11-24T00:29:53.000Z</published>
    <updated>2023-11-24T00:35:24.630Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="01-kubernetes核心概念"><a href="#01-kubernetes核心概念" class="headerlink" title="01-kubernetes核心概念"></a>01-kubernetes核心概念</h2><p>1 有了docker 什么要用kubernetes</p><p>2 多容器跨主机提供服务</p><p>3 多容器分布节点部署</p><p>4 多容器的升级</p><p>5 高效管理容器</p><p>docker管理工具</p><p>Docker compose, docker machine, docker swarm</p><p>常见的容器编排工具：</p><p>kubernetes  google伯格系统</p><p>swarm  2018已经被docker废弃</p><p>mesos marathon  容器编排组件</p><!-- ![img](01-kubernetes核心概念.assets\kuadm01-17006173052243.png) --><h2 id="02-kubernetes是什么"><a href="#02-kubernetes是什么" class="headerlink" title="02-kubernetes是什么"></a>02-kubernetes是什么</h2><p>Kubernetes 是一个开源的容器编排引擎，用来对容器化应用进行自动化部署、 扩缩和管理。该项目托管在 <a href="https://www.cncf.io/about">CNCF</a>。</p><p>kubernetes是google 2014年开源的一个容器集群管理系统。简称k8s</p><p>Kubernetes 用于容器化应用程序的部署</p><p>官网</p><p><a href="https://kubernetes.io/zh/">https://kubernetes.io/zh/</a></p><h2 id="03-kubernetes架构与组件"><a href="#03-kubernetes架构与组件" class="headerlink" title="03-kubernetes架构与组件"></a>03-kubernetes架构与组件</h2><p>master 管理节点（管理集群）</p><p>Kubectl 管理工具</p><p>Api server,scheduler, conttroller manager，etcd分布式键值存储数据库</p><p>API Server：所有服务访问的唯一入口，提供认证、授权、访问控制、API 注册和发现等机制</p><p>Scheduler：负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上</p><p>Controller Manager：负责维护集群的状态，比如副本期望数量、故障检测、自动扩展、滚动更新等</p><p>etcd：键值对数据库，保存了整个集群的状态</p><p>Node 工作节点（运行应用）</p><p>Kubelet 代理</p><p>负责维护容器的生命周期，同时也负责 Volume 和网络的管理</p><p>kubelet的主要功能就是定时从node上获取 pod&#x2F;container 的期望状态。并负责管理pod和它们上面的容器，如images镜像、volumes、etc并确保这些Pod正常运行，能实时返回Pod的运行状态。</p><p>注意</p><p>在kubernetes 的设计中，最基本的管理单位是 pod，而不是 container。pod 是 kubernetes 在容器上的一层封装，由一组运行在同一主机的一个或者多个容器组成。</p><p>Kube-proxy </p><p>负责为 Service 提供 cluster 内部的服务发现和负载均衡</p><p>kube-proxy的作用主要是负责service的实现，具体来说，就是实现了内部从pod到service和外部的从node port向service的访问，其实就是pod的网络代理</p><p>Container runtime：</p><p>负责镜像管理以及 Pod 和容器的真正运行</p><p>除了核心组件，还有一些推荐的插件：<br>CoreDNS：可以为集群中的 SVC 创建一个域名 IP 的对应关系解析的 DNS 服务<br>Dashboard：为Kubernetes 集群提供了一个 B&#x2F;S 架构的访问入口<br>Ingress Controller：官方只能够实现四层的网络代理，而 Ingress 可以实现七层的代理<br>Prometheus：给 Kubernetes 集群提供资源监控的能力<br>Federation： 提供一个可以跨集群中心多 Kubernetes 的统一管理功能，提供跨可用区的集群</p><h2 id="05-kubernetes各个组件调用关系"><a href="#05-kubernetes各个组件调用关系" class="headerlink" title="05-kubernetes各个组件调用关系"></a>05-kubernetes各个组件调用关系</h2><p>master：集群的控制平面，负责集群的决策 ( 管理 )<br>ApiServer : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制<br>Scheduler : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上<br>ControllerManager : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等<br>Etcd ：负责存储集群中各种资源对象的信息</p><p>node：集群的数据平面，负责为容器提供运行环境 ( 干活 )<br>Kubelet : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器<br>KubeProxy : 负责提供集群内部的服务发现和负载均衡<br>Docker : 负责节点上容器的各种操作</p><!-- ![img](图片素材/组件调用流程.png) --><p>下面，以部署一个nginx服务来说明kubernetes系统各个组件调用关系：<br>kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中，一个nginx服务的安装请求会首先被发送到master节点的apiServer组件,apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上,此时它会从etcd中读取各个node节点的信息，然后按照特定的算法进行选择，并将结果告知apiServer，apiServer调用controller-manager去调度Node节点安装nginx服务，kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod，pod是kubernetes的最小操作单元，容器必须跑在pod中至此，一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理。这样外界用户就可以访问集群中的nginx服务了</p><h2 id="05-kubernetes概念"><a href="#05-kubernetes概念" class="headerlink" title="05-kubernetes概念"></a>05-kubernetes概念</h2><p>Master：集群控制节点，每个集群需要至少一个master节点负责集群的管控<br>Node：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的docker负责容器的运行<br>Pod：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器<br>Controller：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等<br>Service：pod对外服务的统一入口，下面可以维护者同一类的多个pod<br>Label：标签，用于对pod进行分类，同一类pod会拥有相同的标签<br>NameSpace：命名空间，用来隔离pod的运行环境</p><h2 id="06-kubernetes集群架构"><a href="#06-kubernetes集群架构" class="headerlink" title="06-kubernetes集群架构"></a>06-kubernetes集群架构</h2><p>官方文档 概念 和任务。</p><p>官网</p><p><a href="https://kubernetes.io/zh/">https://kubernetes.io/zh/</a></p><p>k8s的部署方式：</p><p>minikube：一个用于快速搭建单节点kubernetes的工具，minikube顾名思义即迷你型Kubernetes，非常适合快速学习k8s的各个组件的作用及yml的编写。</p><p>Kubeadm 部署  ：官方提供的一个用于快速搭建kubernetes集群的工具</p><ul><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></li></ul><p>二进制部署  ： 从官网下载每个组件的二进制包，依次去安装，此方式对于理解kubernetes组件更加有效</p><ul><li><a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes</a></li></ul><p>第三方工具部署： rancher  webui</p><p>k8s服务器硬件配置：</p><!-- <img src="图片素材/image-20220607193947482.png" alt="image-20220607193947482" style="zoom:50%;" /> --><p>kubernetes集群大体上分为两类：一主多从和多住多从</p><ul><li><p>一主多从：一台master节点和多台node节点，搭建简单，但是有单机故障风险，适用于测试环境</p></li><li><p>多主多从：多台master节点和多台node节点，搭建相对负载，安全性高，适用于生产环境</p><!-- ![image-20220607194851548](图片素材/image-20220607194851548.png) --></li></ul><h2 id="07-kubeadm快速部署k8s"><a href="#07-kubeadm快速部署k8s" class="headerlink" title="07-kubeadm快速部署k8s"></a>07-kubeadm快速部署k8s</h2><p>第一步首先安装 Linux ubuntu18.04</p><p>ubuntu下载地址：<a href="http://cdimage.ubuntu.com/releases/18.04.2/release/">http://cdimage.ubuntu.com/releases/</a></p><p>Ubuntu18.04设置国内源</p><p>阿里源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>中科大源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>网易源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>清华源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>第二步： 安装docker</p><p>第三步:    安装对应版本的kubeadm工具</p><p>第四步： 初始k8s集群</p><p>第五步： 安装k8s网络插件</p><h2 id="08-部署k8s-v1-26版本"><a href="#08-部署k8s-v1-26版本" class="headerlink" title="08-部署k8s v1.26版本"></a>08-部署k8s v1.26版本</h2><h3 id="8-1-系统环境准备"><a href="#8-1-系统环境准备" class="headerlink" title="8.1 系统环境准备"></a>8.1 系统环境准备</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">1.1 安装所需工具</span><br><span class="line">yum -y install vim</span><br><span class="line">yum -y install wget</span><br><span class="line"># 设置yum源</span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">1.2 修改主机名</span><br><span class="line">#master</span><br><span class="line">hostnamectl set-hostname master-01</span><br><span class="line">#node1</span><br><span class="line">hostnamectl set-hostname node-01</span><br><span class="line">#node2</span><br><span class="line">hostnamectl set-hostname node-02</span><br><span class="line">1.3 编辑hosts</span><br><span class="line">[root@localhost ~]# vim /etc/hosts</span><br><span class="line"></span><br><span class="line"># 增加以下内容</span><br><span class="line">192.168.31.249 master-01</span><br><span class="line">192.168.31.250 node-01</span><br><span class="line">192.168.31.251 node-02</span><br><span class="line"></span><br><span class="line">1.4 安装ntpdate并同步时间</span><br><span class="line">yum -y install ntpdate</span><br><span class="line">ntpdate ntp1.aliyun.com</span><br><span class="line"></span><br><span class="line">1.5 安装并配置 bash-completion，添加命令自动补充</span><br><span class="line">yum -y install bash-completion</span><br><span class="line">source /etc/profile</span><br><span class="line">1.6 关闭防火墙</span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">1.7 关闭selinux</span><br><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config  # 永久关闭</span><br><span class="line">1.8 关闭 swap</span><br><span class="line">free -h</span><br><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line">free -h</span><br><span class="line">二：安装k8s 1.26.x</span><br><span class="line">2.1 安装 Containerd</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo </span><br><span class="line">sudo yum install -y containerd.io</span><br><span class="line"></span><br><span class="line">systemctl stop containerd.service</span><br><span class="line"></span><br><span class="line">cp /etc/containerd/config.toml /etc/containerd/config.toml.bak</span><br><span class="line">sudo containerd config default &gt; $HOME/config.toml</span><br><span class="line">sudo cp $HOME/config.toml /etc/containerd/config.toml</span><br><span class="line"># 修改 /etc/containerd/config.toml 文件后，要将 docker、containerd 停止后，再启动</span><br><span class="line">sudo sed -i &quot;s#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&quot; /etc/containerd/config.toml</span><br><span class="line"># https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#containerd-systemd</span><br><span class="line"># 确保 /etc/containerd/config.toml 中的 disabled_plugins 内不存在 cri</span><br><span class="line">sudo sed -i &quot;s#SystemdCgroup = false#SystemdCgroup = true#g&quot; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line">#启动containerd</span><br><span class="line">systemctl start containerd.service</span><br><span class="line">systemctl status containerd.service</span><br><span class="line">2.2 添加阿里云 k8s 镜像仓库</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line"># 是否开启本仓库</span><br><span class="line">enabled=1</span><br><span class="line"># 是否检查 gpg 签名文件</span><br><span class="line">gpgcheck=0</span><br><span class="line"># 是否检查 gpg 签名文件</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">2.3 将桥接的 IPv4 流量传递到 iptables 的链</span><br><span class="line"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.ip_forward                 = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 应用 sysctl 参数而不重新启动</span><br><span class="line">sudo sysctl --system</span><br><span class="line"></span><br><span class="line"># 启动br_netfilter</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">2.4 安装k8s</span><br><span class="line"># 2023-03-02，经过测试，版本号：1.26.2，</span><br><span class="line">yum install -y kubelet-1.26.3-0 kubeadm-1.26.3-0 kubectl-1.26.3-0 --disableexcludes=kubernetes --nogpgcheck</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure><h3 id="8-2-初始化master集群"><a href="#8-2-初始化master集群" class="headerlink" title="8.2 初始化master集群"></a>8.2 初始化master集群</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">如需订制版本安装：</span><br><span class="line">需获取镜像文件,查看需要的镜像</span><br><span class="line">kubeadm config images list</span><br><span class="line"></span><br><span class="line">系统输出:</span><br><span class="line">[root@master-01 ~]# kubeadm config images list</span><br><span class="line">I1122 10:13:55.024056   66494 version.go:256] remote version is much newer: v1.28.4; falling back to: stable-1.26</span><br><span class="line">registry.k8s.io/kube-apiserver:v1.26.11</span><br><span class="line">registry.k8s.io/kube-controller-manager:v1.26.11</span><br><span class="line">registry.k8s.io/kube-scheduler:v1.26.11</span><br><span class="line">registry.k8s.io/kube-proxy:v1.26.11</span><br><span class="line">registry.k8s.io/pause:3.9</span><br><span class="line">registry.k8s.io/etcd:3.5.6-0</span><br><span class="line">registry.k8s.io/coredns/coredns:v1.9.3</span><br><span class="line">[root@master-01 ~]# </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编辑一个文件, 命名为： install_k8s_images.sh</span><br><span class="line"></span><br><span class="line">vim install_k8s_images.sh</span><br><span class="line"></span><br><span class="line">#! /bin/bash</span><br><span class="line">images=(</span><br><span class="line">    kube-apiserver:v1.26.11</span><br><span class="line">    kube-controller-manager:v1.26.11</span><br><span class="line">    kube-scheduler:v1.26.11</span><br><span class="line">    kube-proxy:v1.26.11</span><br><span class="line">    pause:3.9</span><br><span class="line">    etcd:3.5.6-0</span><br><span class="line">    coredns:1.9.3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName</span><br><span class="line">    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">将文件设置为可运行：</span><br><span class="line">chmod a+x install_k8s_images.sh</span><br><span class="line"></span><br><span class="line">运行 install_k8s_images.sh 安装所需要的镜像</span><br><span class="line">./install_k8s_images.sh</span><br><span class="line"></span><br><span class="line">注意：以上步骤需要在Master和work机器完成</span><br></pre></td></tr></table></figure><p>通过kubeadm命令初始化master集群</p><p>–kubernetes-version: 用于指定k8s版本；<br>–apiserver-advertise-address：用于指定kube-apiserver监听的ip地址,就是 master本机IP地址。<br>–pod-network-cidr：用于指定Pod的网络范围； 10.244.0.0&#x2F;16<br>–service-cidr：用于指定SVC的网络范围；<br>–image-repository: 指定阿里云镜像仓库地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.26.11 --apiserver-advertise-address=0.0.0.0 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.26.11 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><!-- ![](01-kubernetes核心概念.assets/kuadm01-17006173052243.png) --><p>8.2.1配置集群配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">设置配置文件变量</span><br><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">echo export KUBECONFIG=/etc/kubernetes/admin.conf &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8.2.2 各个工作节点，执行如下命令将工作节点加入集群</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.31.249:6443 --token f1226v.yjwsbpyrjs9oojmc --discovery-token-ca-cert-hash sha256:34220ce3bb6d29429afa0b1c6505ff14cc1aee7373a9b973904abd592aec3b3c</span><br></pre></td></tr></table></figure><p>查看加入集群的工作节点与token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master-01 ~]# kubeadm token create --print-join-command</span><br><span class="line">kubeadm join 192.168.31.249:6443 --token ojjtbl.lkchb9823sltuhwn --discovery-token-ca-cert-hash sha256:34220ce3bb6d29429afa0b1c6505ff14cc1aee7373a9b973904abd592aec3b3c </span><br><span class="line">[root@master-01 ~]# kubectl get node</span><br><span class="line">NAME        STATUS     ROLES           AGE     VERSION</span><br><span class="line">master-01   NotReady   control-plane   20m     v1.26.3</span><br><span class="line">node-01     NotReady   &lt;none&gt;          15m     v1.26.3</span><br><span class="line">node-02     NotReady   &lt;none&gt;          9m37s   v1.26.3</span><br><span class="line">[root@master-01 ~]# </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8.2.3 配置k8s网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> maste节点配置网络,使用Calico</span><br><span class="line"># 下载</span><br><span class="line">wget --no-check-certificate https://projectcalico.docs.tigera.io/archive/v3.25/manifests/calico.yaml</span><br><span class="line"></span><br><span class="line"># 修改 calico.yaml 文件</span><br><span class="line">vim calico.yaml</span><br><span class="line"># 在 - name: CLUSTER_TYPE 下方添加如下内容</span><br><span class="line">- name: CLUSTER_TYPE</span><br><span class="line">  value: &quot;k8s,bgp&quot;</span><br><span class="line">  # 下方为新增内容</span><br><span class="line">- name: IP_AUTODETECTION_METHOD</span><br><span class="line">  value: &quot;interface=网卡名称&quot;</span><br><span class="line">  # INTERFACE_NAME=ens33</span><br><span class="line">  </span><br><span class="line">设置pod网络为10.244.0.0/16 与前面初始步骤一致</span><br><span class="line">- name: CALICO_IPV4POOL_CIDR</span><br><span class="line">  value: &quot;10.244.0.0/16&quot;</span><br><span class="line"></span><br><span class="line">kubeadm 支持多种网络插件，我们选择 Calico 网络插件（kubeadm 仅支持基于容器网络接口（CNI）的网络（不支持kubenet）。），默认情况下，它给出的pod的IP段地址是 192.168.0.0/16 ,如果你的机器已经使用了此IP段，就需要修改这个配置项，将其值改为在初始化 Master 节点时使用 kubeadm init –pod-network-cidr=x.x.x.x/x 的IP地址段</span><br><span class="line"></span><br><span class="line">然后在部署 Pod 网络组件，当然对于现在的网络环境来说这些都不是必须的</span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"> 稍等片刻查询 pod 详情，你也可以使用 watch 命令来实时查看 pod 的状态，等待 Pod 网络组件部署成功后，就可以看到一些信息了，包括 Pod 的 IP 地址信息，这个过程时间可能会有点长。</span><br><span class="line"> </span><br><span class="line">kubectl get pods -n &lt;namespace&gt; --watch</span><br><span class="line">可以通过Ctrl+C终止这个Watch模式</span><br><span class="line"></span><br><span class="line">查看日志命令用于拍错</span><br><span class="line">journalctl -xefu kubelet</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-3-kubelet启用lvs负载"><a href="#8-3-kubelet启用lvs负载" class="headerlink" title="8.3 kubelet启用lvs负载"></a>8.3 kubelet启用lvs负载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">安装ipvsadm</span><br><span class="line">yum install -y ipvsadm</span><br><span class="line"></span><br><span class="line">手动载入如下模块</span><br><span class="line">modprobe ip_vs</span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe ip_vs_wrr</span><br><span class="line">modprobe ip_vs_sh</span><br><span class="line"></span><br><span class="line">确认ipvs模块以及载入</span><br><span class="line">root@manager:~# lsmod|grep ip_vs</span><br><span class="line">ip_vs_sh               16384  0</span><br><span class="line">ip_vs_wrr              16384  0</span><br><span class="line">ip_vs_rr               16384  12</span><br><span class="line">ip_vs                 172032  18 ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class="line">nf_conntrack          172032  7 xt_conntrack,nf_nat,nf_nat_ipv6,ipt_MASQUERADE,nf_nat_ipv4,nf_conntrack_netlink,ip_vs</span><br><span class="line">nf_defrag_ipv6         20480  2 nf_conntrack,ip_vs</span><br><span class="line">libcrc32c              16384  4 nf_conntrack,nf_nat,xfs,ip_vs</span><br><span class="line"></span><br><span class="line">否则要自己构建模块载入配置文件 并设置权限,以下是debian10的配置实例</span><br><span class="line">echo &gt; /etc/systemd/system/kubelet.service.d/10-proxy-ipvs.conf &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">#!/bin/bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack</span><br><span class="line">modprobe -- br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x /etc/systemd/system/kubelet.service.d/10-proxy-ipvs.conf </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">本例是cenntos配置实例</span><br><span class="line">cat &gt; /usr/lib/systemd/system/kubelet.service.d/10-proxy-ipvs.conf &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre=-modprobe ip_vs</span><br><span class="line">ExecStartPre=-modprobe ip_vs_rr</span><br><span class="line">ExecStartPre=-modprobe ip_vs_wrr</span><br><span class="line">ExecStartPre=-modprobe ip_vs_sh</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x /usr/lib/systemd/system/kubelet.service.d/10-proxy-ipvs.conf</span><br><span class="line">scp /usr/lib/systemd/system/kubelet.service.d/10-proxy-ipvs.conf root@192.168.3.166:/usr/lib/systemd/system/kubelet.service.d/10-proxy-ipvs.conf</span><br><span class="line">scp /usr/lib/systemd/system/kubelet.service.d/10-proxy-ipvs.conf root@192.168.3.167:/usr/lib/systemd/system/kubelet.service.d/10-proxy-ipvs.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">更改kube-proxy配置</span><br><span class="line">kubectl edit configmap kube-proxy -n kube-system</span><br><span class="line"></span><br><span class="line">找到如下部分的内容41行左右。</span><br><span class="line"></span><br><span class="line">   minSyncPeriod: 0s</span><br><span class="line">      scheduler: &quot;&quot;</span><br><span class="line">      syncPeriod: 30s</span><br><span class="line">    kind: KubeProxyConfiguration</span><br><span class="line">    metricsBindAddress: 127.0.0.1:10249</span><br><span class="line">    mode: &quot;ipvs&quot;                          # 加上这个</span><br><span class="line">    nodePortAddresses: null</span><br><span class="line">其中mode原来是空，默认为iptables模式，改为ipvs保存退出</span><br><span class="line">scheduler默认是空，默认负载均衡算法为轮训</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重启验证：   </span><br><span class="line">kubectl logs -n kube-system -f kube-proxy-8kzr2     #(8kzr2为ID)</span><br><span class="line">I1122 06:58:15.474822       1 node.go:136] Successfully retrieved node IP: 192.168.3.167</span><br><span class="line">I1122 06:58:15.474933       1 server_others.go:111] kube-proxy node IP is an IPv4 address (192.168.3.167), assume IPv4 operation</span><br><span class="line">I1122 06:58:15.847846       1 server_others.go:259] Using ipvs Proxier.</span><br><span class="line">W1122 06:58:15.848556       1 proxier.go:434] IPVS scheduler not specified, use rr by default</span><br><span class="line">I1122 06:58:15.848926       1 server.go:650] Version: v1.19.2</span><br><span class="line">I1122 06:58:15.849742       1 conntrack.go:100] Set sysctl &#x27;net/netfilter/nf_conntrack_max</span><br><span class="line"> </span><br><span class="line">ipvsadm -ln  #查看ipvsadm规则</span><br><span class="line">[root@master-01 ~]# ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.96.0.1:443 rr</span><br><span class="line">  -&gt; 192.168.31.249:6443          Masq    1      4          0         </span><br><span class="line">TCP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.184.4:53              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.184.5:53              Masq    1      0          0         </span><br><span class="line">TCP  10.96.0.10:9153 rr</span><br><span class="line">  -&gt; 10.244.184.4:9153            Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.184.5:9153            Masq    1      0          0         </span><br><span class="line">UDP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.184.4:53              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.184.5:53              Masq    1      0          0         </span><br><span class="line">[root@master-01 ~]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-4-kubectl-命令补全"><a href="#8-4-kubectl-命令补全" class="headerlink" title="8.4 kubectl 命令补全"></a>8.4 kubectl 命令补全</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source  ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="8-5kubectl工具常用命令"><a href="#8-5kubectl工具常用命令" class="headerlink" title="8.5kubectl工具常用命令"></a>8.5kubectl工具常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">查看帮助：kubectl -h</span><br><span class="line">查看可配置的资源对象：kubectl api-resources</span><br><span class="line">查看所有node信息：kubectl get node</span><br><span class="line">查看特定ns中的pod : kubectl get pod -n kube-system</span><br><span class="line">查看RC和service列表：kubectl get rc,svc</span><br><span class="line">显示Pod的详细信息：kubectl describe pod pod-name</span><br><span class="line">查看节点my-node的详细信息:   kubectl describe nodes my-node </span><br><span class="line">根据yaml创建资源：kubectl create -f pod.yaml  或 kubectl apply -f pod.yaml</span><br><span class="line">#apply 可以重复执行，create 不行</span><br><span class="line">基于pod.yaml定义的名称删除pod：kubectl delete -f pod.yaml </span><br><span class="line">删除所有包含某个label的pod和service：kubectl delete pod,svc -l name=label-name</span><br><span class="line">删除所有Pod：kubectl delete pod --all</span><br><span class="line">查看endpoint列表：kubectl get endpoints</span><br><span class="line">执行pod的date命令：</span><br><span class="line">kubectl exec pod-name -- date</span><br><span class="line">kubectl exec pod-name -- bash</span><br><span class="line">kubectl exec pod-name -- ping 10.24.51.9</span><br><span class="line"></span><br><span class="line">获得pod中某个容器的TTY（相当于登录容器）：</span><br><span class="line">kubectl exec -it pod-name -c container-name -- bash</span><br><span class="line">#查看容器的日志</span><br><span class="line">kubectl logs pod-name</span><br><span class="line">#实时查看日志</span><br><span class="line">kubectl logs -f pod-name</span><br><span class="line">#若pod只有一个容器，可以不加-c</span><br><span class="line">kubectl log pod-name -c container_name</span><br><span class="line">查看注释：</span><br><span class="line">kubectl explain pod</span><br><span class="line">kubectl explain pod.apiVersion</span><br><span class="line">查看节点labels：kubectl get node --show-label</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl创建pod实例：</span><br><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line">kubectl get pod nginx-748c667d99-b542k --watch  #查看容器启动状态</span><br><span class="line">kubectl get pod -n default -o wide</span><br><span class="line">kubectl get deployments.apps</span><br><span class="line">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line">kubectl get pod,svc</span><br><span class="line"></span><br><span class="line">扩容多个副本 拉伸实例</span><br><span class="line">kubectl scale deployment nginx --replicas=2</span><br><span class="line">查看pods会看到两个nginx容器</span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">如需修改端口为31000 可以使用edit选项直接指定。端口固定范围 --service-node-port-range=30000-50000。</span><br><span class="line"></span><br><span class="line">kubectl edit service nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-6-registry私用仓库"><a href="#8-6-registry私用仓库" class="headerlink" title="8.6 registry私用仓库"></a>8.6 registry私用仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">docker创建本地局域网私有仓库:</span><br><span class="line"></span><br><span class="line">但有时候使用公共仓库可能不方便，这种情况下用户可以使用registry创建一个本地仓库供私人使用，使用私有仓库有许多优点：节省网络带宽，针对于每个镜像不用每个人都去中央仓库上面去下载，只需要从私有仓库中下载即可；</span><br><span class="line">提供镜像资源利用，针对于公司内部使用的镜像，推送到本地的私有仓库中，以供公司内部相关人员使用。</span><br><span class="line">目前Docker Registry已经升级到了v2，Registryv2使用Go语言编写，在性能和安全性上做了很多优化，重新设计了镜像的存储格式。如果需要安装registry v2，就需要下载registry:2.2的版本。Docker官方提供的工具docker-registry可以用于构建私有的镜像仓库</span><br><span class="line">docker pull registry   #下载私有仓库镜像</span><br><span class="line">docker run -d -p 5000:5000 registry:latest #运行私有仓库容器映射端口号5000</span><br><span class="line">docker run -d --name=my_registry -p 5000:5000 -v /opt/data/registry:/tmp/registry docker.io/registry     #指定本地仓库路径 这样有利于路径的归纳如下</span><br><span class="line"></span><br><span class="line">这将使用官方的   镜像来启动私有仓库。默认情况下，仓库会被创建在 容器的   目录下。你可以通过 -v 参数来将镜像文件存放在 本地的指定路径。例如下面的例子将上传的镜像放到本地的/opt/data/registry 目录</span><br><span class="line"></span><br><span class="line">docker run -d --name=my_registry -p 5000:5000 -v /opt/data/registry:/var/lib/registry docker.io/registry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后回到要上传的客户端主机给要上传的本地镜像&quot;test_nginx&quot;打标签为仓库ip地址/后面是上传仓库后的镜像名称(centos7-nginx)。如下所示：</span><br><span class="line">docker tag test_nginx 192.168.3.138:5000/centos7-nginx</span><br><span class="line"></span><br><span class="line">docker push 192.168.3.138:5000/centos7-nginx  #上载镜像</span><br><span class="line">docker pull 192.168.3.138:5000/centos7-nginx  #下载镜像</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设置本地docker主机使用本地局域网http私有仓库,默认为https</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;&quot;insecure-registries&quot;:[&quot;192.168.3.138:5000&quot;]&#125;</span><br><span class="line"></span><br><span class="line">如下例所示：</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;graph&quot;:&quot;/docker&quot;,</span><br><span class="line">        &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">&quot;insecure-registries&quot;:[&quot;192.168.3.25:5000&quot;],</span><br><span class="line">        &quot;registry-mirrors&quot;: [</span><br><span class="line">               &quot;https://q2gr04ke.mirror.aliyuncs.com&quot;,</span><br><span class="line">               &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">               &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">          ],</span><br><span class="line">         &quot;bip&quot;: &quot;172.17.0.1/16&quot;,</span><br><span class="line">         &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">         &quot;live-restore&quot;: false,</span><br><span class="line">         &quot;dns&quot; : [ &quot;114.114.114.114&quot;,&quot;8.8.8.8&quot; ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">&quot;insecure-registries&quot;:[&quot;192.168.3.153:5000&quot;],</span><br><span class="line">        &quot;registry-mirrors&quot;: [</span><br><span class="line">               &quot;https://q2gr04ke.mirror.aliyuncs.com&quot;,</span><br><span class="line">               &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">               &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">          ],</span><br><span class="line">         &quot;bip&quot;: &quot;172.17.0.1/16&quot;,</span><br><span class="line">         &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">         &quot;live-restore&quot;: false,</span><br><span class="line">         &quot;dns&quot; : [ &quot;114.114.114.114&quot;,&quot;8.8.8.8&quot; ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart docker  #重启docker服务使设置生效</span><br><span class="line"></span><br><span class="line">查看私有仓库镜像</span><br><span class="line">curl http://192.168.3.138:5000/v2/_catalog</span><br><span class="line">curl -XGET http://192.168.3.138:5000/v2/centos7-nginx/tags/list</span><br><span class="line">docker pull 192.168.3.153:5000/centos7-nginx</span><br><span class="line">2.11 安装registry-web</span><br><span class="line"></span><br><span class="line">docker pull hyper/docker-registry-web</span><br><span class="line"></span><br><span class="line">docker run -d -p 5001:8080 --name registry-web --link my_registry -e REGISTRY_URL=http://192.168.3.25:5000/v2 -e REGISTRY_NAME=192.168.3.25:5000 hyper/docker-registry-web</span><br><span class="line"></span><br><span class="line">命令注释</span><br><span class="line">docker run                                      #运行</span><br><span class="line">-d                                                     #后台运行</span><br><span class="line">-p 5001:8080                               #端口映射</span><br><span class="line">--name registry-web                    #容器命名</span><br><span class="line">--link registry                                 #连接其他容器  加入registry到host</span><br><span class="line">-e REGISTRY_URL=http://registry:5000/v2    #指定仓库地址</span><br><span class="line">-e REGISTRY_NAME=localhost:5000               #仓库命名</span><br><span class="line">hyper/docker-registry-web                                 #被启动的镜像</span><br><span class="line"></span><br><span class="line">curl http://127.0.0.1:5001</span><br><span class="line"></span><br><span class="line">镜像仓库的IP为192.168.3.153实例：</span><br><span class="line">docker run -d -p 5001:8080 --name registry-web --link my_registry -e REGISTRY_URL=http://192.168.3.153:5000/v2 -e REGISTRY_NAME=192.168.3.153:5000 hyper/docker-registry-web</span><br><span class="line"></span><br><span class="line">设置本地docker主机使用本地局域网http私有仓库,默认为https</span><br><span class="line">vim /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://4pefdwvq.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [ &quot;192.168.3.25:5000&quot; ],</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">2.12 设置容器开机自启：</span><br><span class="line">docker run --restart=always --net=host --privileged=true -v /web:/usr/local/nginx/html/ -d b8ad90037e3a /bin/bash -c &#x27;/usr/local/nginx/sbin/nginx&#x27;</span><br><span class="line"></span><br><span class="line">注： --restart=always 实用容器开机自启</span><br><span class="line">restart的取值可以是以下3种情况：</span><br><span class="line">no -  容器退出时，不重启容器；</span><br><span class="line">on-failure - 只有在非0状态退出时才从新启动容器；</span><br><span class="line">always - 无论退出状态是如何，都重启容器；</span><br></pre></td></tr></table></figure><p>8.7 containerd指向本地私有仓库</p><p>修改config.toml配置文件</p><p>第61行 指定国内镜像仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61     sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.6&quot;</span><br></pre></td></tr></table></figure><p>114行区域可以指定http私库地址 如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">144     [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span><br><span class="line">145       config_path = &quot;&quot;</span><br><span class="line">146 </span><br><span class="line">147       [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span><br><span class="line">148         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span><br><span class="line">149           endpoint = [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;]</span><br><span class="line">150         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;192.168.31.252:5000&quot;]</span><br><span class="line">151           endpoint = [&quot;http://192.168.31.252:5000&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如下为完整config.toml实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line">[root@master-01 ~]# cat config.toml </span><br><span class="line">disabled_plugins = []</span><br><span class="line">imports = []</span><br><span class="line">oom_score = 0</span><br><span class="line">plugin_dir = &quot;&quot;</span><br><span class="line">required_plugins = []</span><br><span class="line">root = &quot;/var/lib/containerd&quot;</span><br><span class="line">state = &quot;/run/containerd&quot;</span><br><span class="line">temp = &quot;&quot;</span><br><span class="line">version = 2</span><br><span class="line"></span><br><span class="line">[cgroup]</span><br><span class="line">  path = &quot;&quot;</span><br><span class="line"></span><br><span class="line">[debug]</span><br><span class="line">  address = &quot;&quot;</span><br><span class="line">  format = &quot;&quot;</span><br><span class="line">  gid = 0</span><br><span class="line">  level = &quot;&quot;</span><br><span class="line">  uid = 0</span><br><span class="line"></span><br><span class="line">[grpc]</span><br><span class="line">  address = &quot;/run/containerd/containerd.sock&quot;</span><br><span class="line">  gid = 0</span><br><span class="line">  max_recv_message_size = 16777216</span><br><span class="line">  max_send_message_size = 16777216</span><br><span class="line">  tcp_address = &quot;&quot;</span><br><span class="line">  tcp_tls_ca = &quot;&quot;</span><br><span class="line">  tcp_tls_cert = &quot;&quot;</span><br><span class="line">  tcp_tls_key = &quot;&quot;</span><br><span class="line">  uid = 0</span><br><span class="line"></span><br><span class="line">[metrics]</span><br><span class="line">  address = &quot;&quot;</span><br><span class="line">  grpc_histogram = false</span><br><span class="line"></span><br><span class="line">[plugins]</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.gc.v1.scheduler&quot;]</span><br><span class="line">    deletion_threshold = 0</span><br><span class="line">    mutation_threshold = 100</span><br><span class="line">    pause_threshold = 0.02</span><br><span class="line">    schedule_delay = &quot;0s&quot;</span><br><span class="line">    startup_delay = &quot;100ms&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br><span class="line">    device_ownership_from_security_context = false</span><br><span class="line">    disable_apparmor = false</span><br><span class="line">    disable_cgroup = false</span><br><span class="line">    disable_hugetlb_controller = true</span><br><span class="line">    disable_proc_mount = false</span><br><span class="line">    disable_tcp_service = true</span><br><span class="line">    enable_selinux = false</span><br><span class="line">    enable_tls_streaming = false</span><br><span class="line">    enable_unprivileged_icmp = false</span><br><span class="line">    enable_unprivileged_ports = false</span><br><span class="line">    ignore_image_defined_volumes = false</span><br><span class="line">    max_concurrent_downloads = 3</span><br><span class="line">    max_container_log_line_size = 16384</span><br><span class="line">    netns_mounts_under_state_dir = false</span><br><span class="line">    restrict_oom_score_adj = false</span><br><span class="line">    sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.6&quot;</span><br><span class="line">    selinux_category_range = 1024</span><br><span class="line">    stats_collect_period = 10</span><br><span class="line">    stream_idle_timeout = &quot;4h0m0s&quot;</span><br><span class="line">    stream_server_address = &quot;127.0.0.1&quot;</span><br><span class="line">    stream_server_port = &quot;0&quot;</span><br><span class="line">    systemd_cgroup = false</span><br><span class="line">    tolerate_missing_hugetlb_controller = true</span><br><span class="line">    unset_seccomp_profile = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    [plugins.&quot;io.containerd.grpc.v1.cri&quot;.cni]</span><br><span class="line">      bin_dir = &quot;/opt/cni/bin&quot;</span><br><span class="line">      conf_dir = &quot;/etc/cni/net.d&quot;</span><br><span class="line">      conf_template = &quot;&quot;</span><br><span class="line">      ip_pref = &quot;&quot;</span><br><span class="line">      max_conf_num = 1</span><br><span class="line"></span><br><span class="line">    [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span><br><span class="line">      default_runtime_name = &quot;runc&quot;</span><br><span class="line">      disable_snapshot_annotations = true</span><br><span class="line">      discard_unpacked_layers = false</span><br><span class="line">      ignore_rdt_not_enabled_errors = false</span><br><span class="line">      no_pivot = false</span><br><span class="line">      snapshotter = &quot;overlayfs&quot;</span><br><span class="line"></span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.default_runtime]</span><br><span class="line">        base_runtime_spec = &quot;&quot;</span><br><span class="line">        cni_conf_dir = &quot;&quot;</span><br><span class="line">        cni_max_conf_num = 0</span><br><span class="line">        container_annotations = []</span><br><span class="line">        pod_annotations = []</span><br><span class="line">        privileged_without_host_devices = false</span><br><span class="line">        runtime_engine = &quot;&quot;</span><br><span class="line">        runtime_path = &quot;&quot;</span><br><span class="line">        runtime_root = &quot;&quot;</span><br><span class="line">        runtime_type = &quot;&quot;</span><br><span class="line"></span><br><span class="line">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.default_runtime.options]</span><br><span class="line"></span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes]</span><br><span class="line"></span><br><span class="line">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span><br><span class="line">          base_runtime_spec = &quot;&quot;</span><br><span class="line">          cni_conf_dir = &quot;&quot;</span><br><span class="line">          cni_max_conf_num = 0</span><br><span class="line">          container_annotations = []</span><br><span class="line">          pod_annotations = []</span><br><span class="line">          privileged_without_host_devices = false</span><br><span class="line">          runtime_engine = &quot;&quot;</span><br><span class="line">          runtime_path = &quot;&quot;</span><br><span class="line">          runtime_root = &quot;&quot;</span><br><span class="line">          runtime_type = &quot;io.containerd.runc.v2&quot;</span><br><span class="line"></span><br><span class="line">          [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span><br><span class="line">            BinaryName = &quot;&quot;</span><br><span class="line">            CriuImagePath = &quot;&quot;</span><br><span class="line">            CriuPath = &quot;&quot;</span><br><span class="line">            CriuWorkPath = &quot;&quot;</span><br><span class="line">            IoGid = 0</span><br><span class="line">            IoUid = 0</span><br><span class="line">            NoNewKeyring = false</span><br><span class="line">            NoPivotRoot = false</span><br><span class="line">            Root = &quot;&quot;</span><br><span class="line">            ShimCgroup = &quot;&quot;</span><br><span class="line">            SystemdCgroup = false</span><br><span class="line"></span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.untrusted_workload_runtime]</span><br><span class="line">        base_runtime_spec = &quot;&quot;</span><br><span class="line">        cni_conf_dir = &quot;&quot;</span><br><span class="line">        cni_max_conf_num = 0</span><br><span class="line">        container_annotations = []</span><br><span class="line">        pod_annotations = []</span><br><span class="line">        privileged_without_host_devices = false</span><br><span class="line">        runtime_engine = &quot;&quot;</span><br><span class="line">        runtime_path = &quot;&quot;</span><br><span class="line">        runtime_root = &quot;&quot;</span><br><span class="line">        runtime_type = &quot;&quot;</span><br><span class="line"></span><br><span class="line">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.untrusted_workload_runtime.options]</span><br><span class="line"></span><br><span class="line">    [plugins.&quot;io.containerd.grpc.v1.cri&quot;.image_decryption]</span><br><span class="line">      key_model = &quot;node&quot;</span><br><span class="line"></span><br><span class="line">    [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span><br><span class="line">      config_path = &quot;&quot;</span><br><span class="line"></span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span><br><span class="line">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span><br><span class="line">          endpoint = [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;]</span><br><span class="line">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;192.168.31.252:5000&quot;]</span><br><span class="line">          endpoint = [&quot;http://192.168.31.252:5000&quot;]</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.internal.v1.opt&quot;]</span><br><span class="line">    path = &quot;/opt/containerd&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.internal.v1.restart&quot;]</span><br><span class="line">    interval = &quot;10s&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.internal.v1.tracing&quot;]</span><br><span class="line">    sampling_ratio = 1.0</span><br><span class="line">    service_name = &quot;containerd&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.metadata.v1.bolt&quot;]</span><br><span class="line">    content_sharing_policy = &quot;shared&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.monitor.v1.cgroups&quot;]</span><br><span class="line">    no_prometheus = false</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.runtime.v1.linux&quot;]</span><br><span class="line">    no_shim = false</span><br><span class="line">    runtime = &quot;runc&quot;</span><br><span class="line">    runtime_root = &quot;&quot;</span><br><span class="line">    shim = &quot;containerd-shim&quot;</span><br><span class="line">    shim_debug = false</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.runtime.v2.task&quot;]</span><br><span class="line">    platforms = [&quot;linux/amd64&quot;]</span><br><span class="line">    sched_core = false</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.service.v1.diff-service&quot;]</span><br><span class="line">    default = [&quot;walking&quot;]</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.service.v1.tasks-service&quot;]</span><br><span class="line">    rdt_config_file = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.snapshotter.v1.aufs&quot;]</span><br><span class="line">    root_path = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.snapshotter.v1.btrfs&quot;]</span><br><span class="line">    root_path = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.snapshotter.v1.devmapper&quot;]</span><br><span class="line">    async_remove = false</span><br><span class="line">    base_image_size = &quot;&quot;</span><br><span class="line">    discard_blocks = false</span><br><span class="line">    fs_options = &quot;&quot;</span><br><span class="line">    fs_type = &quot;&quot;</span><br><span class="line">    pool_name = &quot;&quot;</span><br><span class="line">    root_path = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.snapshotter.v1.native&quot;]</span><br><span class="line">    root_path = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.snapshotter.v1.overlayfs&quot;]</span><br><span class="line">    mount_options = []</span><br><span class="line">    root_path = &quot;&quot;</span><br><span class="line">    sync_remove = false</span><br><span class="line">    upperdir_label = false</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.snapshotter.v1.zfs&quot;]</span><br><span class="line">    root_path = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  [plugins.&quot;io.containerd.tracing.processor.v1.otlp&quot;]</span><br><span class="line">    endpoint = &quot;192.168.31.252:5000&quot;</span><br><span class="line">    insecure = true</span><br><span class="line">    protocol = &quot;http&quot;</span><br><span class="line"></span><br><span class="line">[proxy_plugins]</span><br><span class="line"></span><br><span class="line">[stream_processors]</span><br><span class="line"></span><br><span class="line">  [stream_processors.&quot;io.containerd.ocicrypt.decoder.v1.tar&quot;]</span><br><span class="line">    accepts = [&quot;application/vnd.oci.image.layer.v1.tar+encrypted&quot;]</span><br><span class="line">    args = [&quot;--decryption-keys-path&quot;, &quot;/etc/containerd/ocicrypt/keys&quot;]</span><br><span class="line">    env = [&quot;OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf&quot;]</span><br><span class="line">    path = &quot;ctd-decoder&quot;</span><br><span class="line">    returns = &quot;application/vnd.oci.image.layer.v1.tar&quot;</span><br><span class="line"></span><br><span class="line">  [stream_processors.&quot;io.containerd.ocicrypt.decoder.v1.tar.gzip&quot;]</span><br><span class="line">    accepts = [&quot;application/vnd.oci.image.layer.v1.tar+gzip+encrypted&quot;]</span><br><span class="line">    args = [&quot;--decryption-keys-path&quot;, &quot;/etc/containerd/ocicrypt/keys&quot;]</span><br><span class="line">    env = [&quot;OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf&quot;]</span><br><span class="line">    path = &quot;ctd-decoder&quot;</span><br><span class="line">    returns = &quot;application/vnd.oci.image.layer.v1.tar+gzip&quot;</span><br><span class="line"></span><br><span class="line">[timeouts]</span><br><span class="line">  &quot;io.containerd.timeout.bolt.open&quot; = &quot;0s&quot;</span><br><span class="line">  &quot;io.containerd.timeout.shim.cleanup&quot; = &quot;5s&quot;</span><br><span class="line">  &quot;io.containerd.timeout.shim.load&quot; = &quot;5s&quot;</span><br><span class="line">  &quot;io.containerd.timeout.shim.shutdown&quot; = &quot;3s&quot;</span><br><span class="line">  &quot;io.containerd.timeout.task.state&quot; = &quot;2s&quot;</span><br><span class="line"></span><br><span class="line">[ttrpc]</span><br><span class="line">  address = &quot;&quot;</span><br><span class="line">  gid = 0</span><br><span class="line">  uid = 0</span><br><span class="line">[root@master-01 ~]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复制配置文件并重启containerd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart containerd</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="K8s" scheme="http://blog.ioimp.top/categories/K8s/"/>
    
    
    <category term="K8s基础学习" scheme="http://blog.ioimp.top/tags/K8s%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="编程知识" scheme="http://blog.ioimp.top/tags/%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>centos7 卸载docker</title>
    <link href="http://blog.ioimp.top/2023/11/23/centos7-%E5%8D%B8%E8%BD%BDdocker/"/>
    <id>http://blog.ioimp.top/2023/11/23/centos7-%E5%8D%B8%E8%BD%BDdocker/</id>
    <published>2023-11-23T02:52:31.000Z</published>
    <updated>2023-11-23T02:55:27.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="centos7-卸载docker"><a href="#centos7-卸载docker" class="headerlink" title="centos7 卸载docker"></a>centos7 卸载docker</h1><h2 id="CentOS-7下如何卸载Docker"><a href="#CentOS-7下如何卸载Docker" class="headerlink" title="CentOS 7下如何卸载Docker"></a>CentOS 7下如何卸载Docker</h2><p>![CentOS 7下如何卸载Docker](</p><blockquote><p>本文介绍了在CentOS 7上如何卸载Docker。我们将使用命令行来完成这个过程。在开始之前，请确保您具有管理员权限。</p></blockquote><h3 id="1-检查Docker安装情况"><a href="#1-检查Docker安装情况" class="headerlink" title="1. 检查Docker安装情况"></a>1. 检查Docker安装情况</h3><p>在卸载Docker之前，首先我们需要检查系统中是否已经安装了Docker。可以使用以下命令来验证：</p><p>登录后复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">1.</span><br></pre></td></tr></table></figure><p>如果您看到有关Docker的版本信息，则表示Docker已经安装在您的系统中。如果没有任何输出，说明您的系统中没有安装Docker。</p><h3 id="2-停止Docker服务"><a href="#2-停止Docker服务" class="headerlink" title="2. 停止Docker服务"></a>2. 停止Docker服务</h3><p>在卸载Docker之前，我们需要停止正在运行的Docker服务。可以使用以下命令来停止Docker服务：</p><p>登录后复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop docker</span><br><span class="line">1.</span><br></pre></td></tr></table></figure><h3 id="3-卸载Docker软件包"><a href="#3-卸载Docker软件包" class="headerlink" title="3. 卸载Docker软件包"></a>3. 卸载Docker软件包</h3><p>现在我们可以开始卸载Docker软件包了。可以使用以下命令来卸载Docker：</p><p>登录后复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker</span><br><span class="line">1.</span><br></pre></td></tr></table></figure><p>执行以上命令后，系统将提示您确认是否要卸载Docker软件包。输入<code>y</code>并按下回车键继续。</p><h3 id="4-删除Docker数据目录"><a href="#4-删除Docker数据目录" class="headerlink" title="4. 删除Docker数据目录"></a>4. 删除Docker数据目录</h3><p>卸载Docker软件包后，还需要手动删除Docker的数据目录。可以使用以下命令来删除Docker数据目录：</p><p>登录后复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">1.</span><br></pre></td></tr></table></figure><h3 id="5-删除Docker镜像和容器"><a href="#5-删除Docker镜像和容器" class="headerlink" title="5. 删除Docker镜像和容器"></a>5. 删除Docker镜像和容器</h3><p>卸载Docker后，您可能还需要删除已经下载的Docker镜像和容器。可以使用以下命令来删除所有Docker镜像和容器：</p><p>登录后复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)</span><br><span class="line">docker rmi -f $(docker images -a -q)</span><br><span class="line">1.2.</span><br></pre></td></tr></table></figure><p>执行以上命令后，系统将删除所有已经停止的容器和所有的镜像。</p><h3 id="6-清理Docker残留配置"><a href="#6-清理Docker残留配置" class="headerlink" title="6. 清理Docker残留配置"></a>6. 清理Docker残留配置</h3><p>有时候，即使卸载了Docker软件包，系统中仍然可能会有一些残留的配置文件。可以使用以下命令来清理Docker的残留配置：</p><p>登录后复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /etc/docker</span><br><span class="line">sudo rm -rf ~/.docker</span><br><span class="line">1.2.</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>在本文中，我们介绍了在CentOS 7上如何卸载Docker。通过使用命令行，您可以轻松地完成这个过程。请记住，在卸载Docker之前，一定要停止正在运行的Docker服务，并且备份您的重要数据。希望本文对您有所帮助！</p><p>卸载Docker的过程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="疑难解答" scheme="http://blog.ioimp.top/categories/%E7%96%91%E9%9A%BE%E8%A7%A3%E7%AD%94/"/>
    
    
    <category term="文章收录" scheme="http://blog.ioimp.top/tags/%E6%96%87%E7%AB%A0%E6%94%B6%E5%BD%95/"/>
    
    <category term="拯救小白系列" scheme="http://blog.ioimp.top/tags/%E6%8B%AF%E6%95%91%E5%B0%8F%E7%99%BD%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>拯救小白焦虑手册</title>
    <link href="http://blog.ioimp.top/2023/11/22/%E6%8B%AF%E6%95%91%E5%B0%8F%E7%99%BD%E7%84%A6%E8%99%91%E6%89%8B%E5%86%8C/"/>
    <id>http://blog.ioimp.top/2023/11/22/%E6%8B%AF%E6%95%91%E5%B0%8F%E7%99%BD%E7%84%A6%E8%99%91%E6%89%8B%E5%86%8C/</id>
    <published>2023-11-22T03:21:16.000Z</published>
    <updated>2023-11-22T03:21:52.873Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="焦虑自救小册"><a href="#焦虑自救小册" class="headerlink" title="焦虑自救小册"></a>焦虑自救小册</h1><hr><p>最近有的读者找我咨询问题，聊下来我发现 IT 从业人员共有的突出问题就是焦虑。现在疫情、政策等大环境原因导致行业不稳定和生活艰难，焦虑是很多人的常态。</p><p>我也曾经焦虑过大概两年，这种状态刚开始自己还没意识到，直到出现了一些身体上很明显的症状才引起重视。后来经过一些自我调整我基本解决了这个问题，我之前写了篇文章分享自己的方法：<a href="https://catcoding.me/p/how-to-beat-anxiety/">35 岁，我用这三种方法克服焦虑</a></p><p>虽然相对前两年，我的焦虑感确实少了很多，但我并不认为已经一劳永逸地解决了这个问题，每个年龄段有不同的焦虑点，这似乎是一个一生需要关注的事情。我的这些方法虽然对自己有用，也不一定适合所有人，而且换城市、换工作的隐形成本是很大的。</p><p>我最近和学心理学的老同学聊了聊，顺便收集了一些工具、方法和书籍，总结出来供大家参考。</p><p>如果大家能一起来完善这个小手册就更好了，这文档共享在 Github：<a href="https://github.com/chenyukang/anxiety-handbook">anxiety-handbook</a></p><h2 id="自我测试"><a href="#自我测试" class="headerlink" title="自我测试"></a>自我测试</h2><p><a href="https://www.qqtest.com/s/20.htm">SAS焦虑自评量表 - 健康心理测试</a></p><p><a href="https://www.idrlabs.com/cn/anxiety-stress-depression/test.php">焦虑、压力、抑郁测试</a></p><p>关于测试：</p><ul><li><strong>正确对待测试，不要对结果恐慌</strong>。测试前做好心理建设，不管结果多遭，不要害怕它，想想自己参与测试的初衷是想让事情朝正确的方向发展。</li><li><strong>将测试当作解决问题的工具</strong>。测试结果可以用来检测自己应对焦虑的情况：当焦虑变严重时，思考自己哪里没有做到位，不断改进克服它的方法；当焦虑减轻时，给自己一些奖励，让自己再放松一些。</li></ul><h2 id="认识焦虑"><a href="#认识焦虑" class="headerlink" title="认识焦虑"></a>认识焦虑</h2><p>焦虑多是由不确定引起的，是<strong>人类进化过程中保留下来的对外界的戒备</strong>。对于大部分人来说，焦虑是无法完全避免的，甚至适度的焦虑是能促使人进步。但是焦虑达到一定程度就会影响健康，特别是影响睡眠的时候情况更为糟糕。</p><blockquote><p>焦虑患者常常对现实生活中的某些事情或将来的某些事情表现的过分担忧，有时患者也可以无明确目标的担忧。这种担心往往是与现实极不相称的，使患者感到非常的痛苦。还伴有自主神经亢进，肌肉紧张或跳动等<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%BE%8B%E7%A5%9E%E7%B6%93%E5%A4%B1%E8%AA%BF" title="自律神经失调">自律神经失调</a> 的症状。部分患者会自觉身体总是不舒服多次去医院看医生，又检查不出症状。但是对于患者来说，总会一直担心。</p><p>– 维基百科</p></blockquote><p>就我个人体会，焦虑的时候会失眠、消化不良、精神紧张、心跳有时候感觉速度快。</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>认识到自己焦虑的原因是缓解焦虑的第一步，IT 从业人员的焦虑是很多是由国内的行业氛围、社会大环境导致的。</p><p>职场的 996 工作节奏、35 岁现象、末尾淘汰、职场 PUA 等等，这些让人没有足够的安全感。</p><p>另一部分原因是自我认知造成的，我们大多数人沿着社会预期的道路而行，并未想过自己想要什么样、适合什么样的生活。</p><p>这与教育和文化背景有关系，我们一直都存在一个较为单一的评价体系，在学校里面我们为了分数而竞争，毕业时我们为了一份的工作而竞争，职场上我们为了更好的绩效、更高的工资而竞争。竞争是我们的生活常态，而既然有竞争就会导致人有压力，日积月累形成焦虑。</p><p>而且，焦虑特别容易出现在对自己有要求的人群中，出现的年龄段也比较集中，焦虑大多出现在 25 ~ 40 左右，因为这个年龄段是职场的关键时期，也逐渐需要承担家庭的责任。</p><p>往往我们过了某些时间关口就会好一些，这个关口可能是认知和价值观上的改变，可能是学会了接纳自己，或者是学会了和焦虑相处。希望这个手册能帮你更快地闯过关口。</p><h2 id="职场焦虑"><a href="#职场焦虑" class="headerlink" title="职场焦虑"></a>职场焦虑</h2><p>摆脱焦虑一个很重要的部分是认识自己所处的环境，识别出周围环境中的有害因素，这包括国内 IT 行业的两个常见问题：</p><h3 id="内卷"><a href="#内卷" class="headerlink" title="内卷"></a>内卷</h3><p>内卷会让人长期处于无意义的竞争状态，非常容易让人滋生焦虑。国内很多 IT 公司存在内卷的情况，这里有一个 IT 从业者维护的 996 公司列表你可以参考。以我的经验来说，对于大型 IT 公司，个人所处于的小组和部门可能更重要，直属 Leader 对你影响很大程度上决定了你在公司的工作感受：</p><p><a href="https://github.com/996icu/996.ICU/tree/master/blacklist">996.ICU&#x2F;blacklist · 996icu&#x2F;996.ICU</a></p><p>如果你想改变内卷的环境，可以通过换组或者是换工作到 955 的公司，换城市、或者甚至去国外：</p><ul><li><a href="https://github.com/formulahendry/955.WLB">955.WLB 955 不加班的公司名单</a></li><li><a href="https://github.com/623637646/996.Leave">996.Leave 逃离996</a></li><li><a href="https://github.com/chenyukang/remote-jobs-cn">remote-jobs-cn 国内远程办公职位</a></li></ul><h3 id="职场-PUA"><a href="#职场-PUA" class="headerlink" title="职场 PUA"></a>职场 PUA</h3><p>PUA 全称 “Pick-up Artist”，起初指的是受过系统化学习实践精神控制者，让异性着迷的男女们，字面上的解释 PUA 指的是搭讪艺术家。</p><p>PUA 是一种诱骗和洗脑的技术，从而神不知鬼不觉的达到自己的目的，而且这是一种很难发现，非常隐晦的一种欺骗方式。</p><p>一些管理者并没有良好的管理能力，倒是学会了一些抓人的手法，所以职场 PUA 是很多 IT 人面临的困境。常见的职场 PUA 手法：</p><ul><li>否定，不断批评和挑刺，有的时候会美其名曰鞭策你进步</li><li>打压，分配过多的任务，但是会告诉你在锻炼你</li><li>对比，拿你和别人对比，让你造成心理落差，或者怀疑自己的能力</li></ul><p><a href="https://www.bilibili.com/video/BV1pr4y1p7pB?spm_id_from=333.999.0.0">怎么看领导是培养还是PUA我？</a></p><p>当然还有很多手法，其实 PUA 的本质是让你觉得一切都是为了你好，从而让你不用怀疑地去执行任务。被 PUA 的人往往自身比较难以认识到，需要跳出来才能发现。</p><p>如果你的 Leader 让你太累，心理压力大，可以往这方面考虑一下自己是否在被 PUA。如果遭遇 PUA 解决办法就是换组或者换公司。</p><h2 id="改变认知"><a href="#改变认知" class="headerlink" title="改变认知"></a>改变认知</h2><p>焦虑部分是因为认知局限所造成的，所谓庸人自扰。提升思维高度可以从根本上解决一些问题。思维和认知的高度往往也涉及到对人生中重要事项的看法和选择，这包括：</p><ul><li>关于钱、工作的看法</li><li>是否待一线城市</li><li>是否结婚和要小孩</li><li>如何衡量成功</li><li>什么是幸福</li><li>对死亡的看法</li></ul><p>个人的经历可能会改变认知，除此之外阅读、观影、思考、交谈也可能会改变认知。下面是我收集的一些相关书籍和纪录片。</p><h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><p>解决焦虑问题类的书籍，往往被当作心灵鸡汤，鸡汤并没有不好，当你过于焦虑的时候，喝碗鸡汤有时候挺有用。另外一些哲学、历史方面的书也有用：</p><p><a href="https://book.douban.com/subject/2277299/">《当下的力量》</a> 生活在过去使人忧愁，生活在未来使人焦虑，最好的状态是活在当下。</p><p>《象与骑象人》如何获取幸福，过有意义的生活</p><p>《人生的智慧》叔本华关于健康、财富、名声、荣誉、养生和待人接物所应遵守的原则等。非常推荐。</p><p>《沉思录》</p><p>《被讨厌的勇气》</p><p>《获得幸福的勇气》</p><p><a href="https://book.douban.com/subject/35539713/">《焦虑的人》</a> 这是一本小说，情节跌宕起伏，故事温暖又治愈。</p><p>《精神焦虑症的自救》分为病例分析卷和访谈卷，包含对焦虑的全面介绍，还有大量摆脱焦虑情绪的技巧。</p><p>《焦虑是头大象，如何一口一口吃掉它》作者主张通过自我书写缓解焦虑，有书写的建议和方法，帮助人们辨别不同的焦虑状况如何用自我书写来缓解。</p><h3 id="纪录片"><a href="#纪录片" class="headerlink" title="纪录片"></a>纪录片</h3><p>好的纪录片能让人了解个人生活之外的广袤世界、历史长河，意识到人类之渺小，从而改变认知：</p><ul><li>蓝色星球</li><li>王朝</li><li>脸庞，村庄</li><li>河西走廊</li><li>人世间</li><li>徒手攀岩</li><li><a href="https://open.163.com/newview/movie/courseintro?newurl=M6HV755O6">哈佛大学公开课：幸福课</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="培养爱好"><a href="#培养爱好" class="headerlink" title="培养爱好"></a>培养爱好</h3><p>培养爱好可以缓解部分焦虑，因为爱好让我们从日常工作生活中脱离出来。很多中年人都是通过爱好来缓解生活中的琐碎感。</p><p>运动、写作、钓鱼、摄影、乐高等，都是非常好的爱好。</p><h3 id="日常技巧"><a href="#日常技巧" class="headerlink" title="日常技巧"></a>日常技巧</h3><p>常对自己说这几个字：</p><p><strong>“无所谓”<br>“没必要”<br>“不至于”</strong></p><p>冯唐分享过一个做法，如果你焦虑或者认为自己碰上了什么迈不过去的坎，找个医院去 ICU 门口待上一段时间。</p><h3 id="心理咨询"><a href="#心理咨询" class="headerlink" title="心理咨询"></a>心理咨询</h3><p>和行业相关的朋友咨询了一下，目前主流的心理治疗价目表:</p><ul><li><p>新手 200-300</p></li><li><p>中级 500-800</p></li><li><p>专家 1000 以上</p></li></ul><h3 id="药物治疗"><a href="#药物治疗" class="headerlink" title="药物治疗"></a>药物治疗</h3><p>常见药和副作用，待补充。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="随笔" scheme="http://blog.ioimp.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="文章收录" scheme="http://blog.ioimp.top/tags/%E6%96%87%E7%AB%A0%E6%94%B6%E5%BD%95/"/>
    
    <category term="拯救小白系列" scheme="http://blog.ioimp.top/tags/%E6%8B%AF%E6%95%91%E5%B0%8F%E7%99%BD%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>记一次jenkins构建失败的踩坑记录</title>
    <link href="http://blog.ioimp.top/2023/11/22/%E8%AE%B0%E4%B8%80%E6%AC%A1jenkins%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.ioimp.top/2023/11/22/%E8%AE%B0%E4%B8%80%E6%AC%A1jenkins%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2023-11-22T01:58:50.000Z</published>
    <updated>2023-11-22T01:59:17.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="记一次jenkins构建失败的踩坑记录"><a href="#记一次jenkins构建失败的踩坑记录" class="headerlink" title="记一次jenkins构建失败的踩坑记录"></a>记一次jenkins构建失败的踩坑记录</h1><p>核心要旨:排错要一步一步排查,一步一步确认,确认问题失败在哪一步,而不是凭空猜测错误.</p><p>异常信息:</p><p>登录后复制</p><p>Started by user admin<br>Running as SYSTEM<br>Building in workspace &#x2F;root&#x2F;.jenkins&#x2F;workspace&#x2F;app-server<br>using credential 2c84e055-ab32-4bcb-9642-e490e1fb4443  </p><blockquote><p>&#x2F;usr&#x2F;bin&#x2F;git rev-parse –is-inside-work-tree # timeout&#x3D;10<br>Fetching changes from the remote Git repository<br>&#x2F;usr&#x2F;bin&#x2F;git config remote.origin.url <a href="https://gitee.com/kinome/aggregationServicePlatform.git">https://gitee.com/kinome/aggregationServicePlatform.git</a> # timeout&#x3D;10<br>Using shallow fetch with depth 1<br>Fetching upstream changes from <a href="https://gitee.com/kinome/aggregationServicePlatform.git">https://gitee.com/kinome/aggregationServicePlatform.git</a><br>&#x2F;usr&#x2F;bin&#x2F;git –version # timeout&#x3D;10<br>using GIT_ASKPASS to set credentials<br>&#x2F;usr&#x2F;bin&#x2F;git fetch –tags –progress –depth&#x3D;1 <a href="https://gitee.com/kinome/aggregationServicePlatform.git">https://gitee.com/kinome/aggregationServicePlatform.git</a> +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;* # timeout&#x3D;60<br>&#x2F;usr&#x2F;bin&#x2F;git rev-parse refs&#x2F;remotes&#x2F;origin&#x2F;master^{commit} # timeout&#x3D;10<br>&#x2F;usr&#x2F;bin&#x2F;git rev-parse refs&#x2F;remotes&#x2F;origin&#x2F;origin&#x2F;master^{commit} # timeout&#x3D;10<br>Checking out Revision 0e92eabfe44ed70dcc240fcd7b714c2de2f0c7c6 (refs&#x2F;remotes&#x2F;origin&#x2F;master)<br>&#x2F;usr&#x2F;bin&#x2F;git config core.sparsecheckout # timeout&#x3D;10<br>&#x2F;usr&#x2F;bin&#x2F;git checkout -f 0e92eabfe44ed70dcc240fcd7b714c2de2f0c7c6 # timeout&#x3D;10<br>Commit message: “commit”<br>&#x2F;usr&#x2F;bin&#x2F;git rev-list –no-walk 0e92eabfe44ed70dcc240fcd7b714c2de2f0c7c6 # timeout&#x3D;10<br>Parsing POMs<br>Established TCP socket on 37780<br>[app-server] $ &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64&#x2F;jre&#x2F;bin&#x2F;java -cp &#x2F;root&#x2F;.jenkins&#x2F;plugins&#x2F;maven-plugin&#x2F;WEB-INF&#x2F;lib&#x2F;maven3-agent-1.13.jar:&#x2F;usr&#x2F;share&#x2F;maven&#x2F;boot&#x2F;plexus-classworlds.jar org.jvnet.hudson.maven3.agent.Maven3Main &#x2F;usr&#x2F;share&#x2F;maven &#x2F;root&#x2F;.jenkins&#x2F;war&#x2F;WEB-INF&#x2F;lib&#x2F;remoting-4.2.jar &#x2F;root&#x2F;.jenkins&#x2F;plugins&#x2F;maven-plugin&#x2F;WEB-INF&#x2F;lib&#x2F;maven3-interceptor-1.13.jar &#x2F;root&#x2F;.jenkins&#x2F;plugins&#x2F;maven-plugin&#x2F;WEB-INF&#x2F;lib&#x2F;maven3-interceptor-commons-1.13.jar 37780<br>ERROR: Failed to parse POMs<br>java.io.IOException: Cannot run program “&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64&#x2F;jre&#x2F;bin&#x2F;java” (in directory “&#x2F;root&#x2F;.jenkins&#x2F;workspace&#x2F;app-server”): error&#x3D;2, 没有那个文件或目录<br>at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)<br>at hudson.Proc$LocalProc.<init>(Proc.java:252)<br>at hudson.Proc$LocalProc.<init>(Proc.java:221)<br>at hudson.Launcher$LocalLauncher.launch(Launcher.java:936)<br>at hudson.Launcher$ProcStarter.start(Launcher.java:454)<br>at hudson.maven.AbstractMavenProcessFactory.newProcess(AbstractMavenProcessFactory.java:280)<br>at hudson.maven.ProcessCache.get(ProcessCache.java:236)<br>at hudson.maven.MavenModuleSetBuild$MavenModuleSetBuildExecution.doRun(MavenModuleSetBuild.java:804)<br>at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:504)<br>at hudson.model.Run.execute(Run.java:1856)<br>at hudson.maven.MavenModuleSetBuild.run(MavenModuleSetBuild.java:543)<br>at hudson.model.ResourceController.execute(ResourceController.java:97)<br>at hudson.model.Executor.run(Executor.java:428)<br>Caused by: java.io.IOException: error&#x3D;2, 没有那个文件或目录<br>at java.lang.UNIXProcess.forkAndExec(Native Method)<br>at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)<br>at java.lang.ProcessImpl.start(ProcessImpl.java:134)<br>at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)<br>… 12 more<br>Finished: FAILURE</p></blockquote><p>本质原因是因为jdk版本升级了,之前的javahome路径失效了导致的.</p><p>但是在java升级的那天,我修改了gitee的密码,然后我从一开始就以为是因为凭证出了问题(因为在第一步就是使用凭证拉取git上的项目),然后我又看到timeout&#x3D;10这种提示,以为是真的超时了(其实只是在提示超时时间值,并没有真的超时),然后又是各种搜,各种尝试跟凭证有关的东西,甚至想用sshkey来弄结果不行.</p><p>但是其实一开始排查就发现用户名和密码正确,也没有报错,但是就是构建失败,其实这个时候我还是以为拉取失败了,这一步我应该在确认了用户名密码没错并且没报错的情况下,先检查有没有真的拉取到,然后再进行判断的,而不是理所当然的猜测.</p><p>然后检查到了其实是拉取到了,跟凭证没关系,往下走发现了java找不到的异常,修改javahome之后就可以了.</p><p>正好修改gitee的密码的那天升级了java,才对认知造成了影响.</p><p>所以以后如果出现bug,应该一步一步按照事实和异常消息来,并且检查相关配置,而不是盲目百度和把猜测作为事实.</p><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 更新 2021-05-19</p><p><img src="https://s2.51cto.com/images/blog/202208/18105254_62fda986e37fe13198.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp/resize,m_fixed,w_1184" alt="记一次jenkins构建失败的踩坑记录_jenkins"></p><p> -U clean install 用于解决 Jenkins构建未拉取最新的包导致自动构建失败 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Jenkins" scheme="http://blog.ioimp.top/categories/Jenkins/"/>
    
    
    <category term="日常小BUG" scheme="http://blog.ioimp.top/tags/%E6%97%A5%E5%B8%B8%E5%B0%8FBUG/"/>
    
    <category term="Jenkins学习" scheme="http://blog.ioimp.top/tags/Jenkins%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 出现GLIBC_2.28 not found的解决方法(亲测有效)</title>
    <link href="http://blog.ioimp.top/2023/11/21/Ubuntu-18-04-%E5%87%BA%E7%8E%B0GLIBC-2-28-not-found%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88/"/>
    <id>http://blog.ioimp.top/2023/11/21/Ubuntu-18-04-%E5%87%BA%E7%8E%B0GLIBC-2-28-not-found%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88/</id>
    <published>2023-11-21T10:34:43.000Z</published>
    <updated>2023-11-21T10:37:29.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Ubuntu-18-04-出现GLIBC-2-28-not-found的解决方法-亲测有效"><a href="#Ubuntu-18-04-出现GLIBC-2-28-not-found的解决方法-亲测有效" class="headerlink" title="Ubuntu 18.04 出现GLIBC_2.28 not found的解决方法(亲测有效)"></a>Ubuntu 18.04 出现GLIBC_2.28 not found的解决方法(亲测有效)</h2><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># uname -a</span><br><span class="line">Linux Ubuntu 5.4.0-144-generic #161~18.04.1-Ubuntu SMP Fri Feb 10 15:55:22 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><h5 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h5><p>glibc是linux底层的API库。通常情况下，有些环境需要glibc更高的版本才支持，比如<code>GLIBC_2.28</code>。</p><p>另外对它操作升级，可能有导致系统崩溃的风险。</p><h5 id="经验与教训"><a href="#经验与教训" class="headerlink" title="经验与教训"></a>经验与教训</h5><p>使用<code>GLIBC_xxx</code>的源码包编译升级的惨案:</p><ul><li><p>提醒：在其他博客教程上，有些网友(我也不另外,后面可拯救回来)就按照教程并使用<code>GLIBC_xxx</code>的源码包并去升级，结果往往是系统崩溃而告终。</p></li><li><p>glibc库对linux系统非常重要，轻易不要更换。如果需要更换，需提前备份好原本的相关库以防万一。</p></li><li><p>若在使用源码包去升级之后出现<code>segmentation fault</code>,命令无法使用的情况。</p></li><li><p>解决方法：<br>若安装失败，可能导致各指令出错，除了cd、pwd基本都不可使用，这时候千万不要关闭窗口(如果关闭将导致将无法打开，只能重装系统)，比如安装libc-2.28.so出错了，需拯救系统。可尝试输入其中一条</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD=/lib64/librt-2.XX.so</span><br><span class="line">export LD_PRELOAD=/lib64/libm-2.XX.so</span><br><span class="line">export LD_PRELOAD=/lib64/libpthread-2.XX.so</span><br><span class="line">export LD_PRELOAD=/lib64/libc-2.XX.so</span><br><span class="line">export LD_PRELOAD=/lib/x86_64-linux-gnu/libc-2.XX.so</span><br></pre></td></tr></table></figure><p>(XX指原本的版本，看文件夹有哪个就试一下)，然后ls这些指令就可以用了，再使用ln -s把以前的库链接回来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /lib/x86_64-linux-gnu</span><br><span class="line">ll     # 文件详细信息</span><br><span class="line"></span><br><span class="line">ln -sf libc-2.27.so libc.so.6   # libc-2.27.so是原有版本</span><br><span class="line">rm  libc-2.28.so     #删除</span><br></pre></td></tr></table></figure><h5 id="软件包升级GLIBC-2-28"><a href="#软件包升级GLIBC-2-28" class="headerlink" title="软件包升级GLIBC_2.28"></a>软件包升级<code>GLIBC_2.28</code></h5><p><code>1</code> 查看服务器当前版本，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /lib/x86_64-linux-gnu/libc.so.6 | grep GLIBC_</span><br></pre></td></tr></table></figure><p>返回的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.2.6</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBC_2.3.3</span><br><span class="line">GLIBC_2.3.4</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.5</span><br><span class="line">GLIBC_2.6</span><br><span class="line">GLIBC_2.7</span><br><span class="line">GLIBC_2.8</span><br><span class="line">GLIBC_2.9</span><br><span class="line">GLIBC_2.10</span><br><span class="line">GLIBC_2.11</span><br><span class="line">GLIBC_2.12</span><br><span class="line">GLIBC_2.13</span><br><span class="line">GLIBC_2.14</span><br><span class="line">GLIBC_2.15</span><br><span class="line">GLIBC_2.16</span><br><span class="line">GLIBC_2.17</span><br><span class="line">GLIBC_2.18</span><br><span class="line">GLIBC_2.22</span><br><span class="line">GLIBC_2.23</span><br><span class="line">GLIBC_2.24</span><br><span class="line">GLIBC_2.25</span><br><span class="line">GLIBC_2.26</span><br><span class="line">GLIBC_2.27</span><br><span class="line">GLIBC_PRIVATE</span><br></pre></td></tr></table></figure><p>说明服务器当前是没有GLIBC_2.28</p><p><code>2</code> 使用软件包升级方式</p><ul><li><p>参考<a href="https://packages.debian.org/buster/">debian网址</a>并搜索想要的软件或者工具等，如<code>libc6</code>,有结果如下：<br><img src="https://img-blog.csdnimg.cn/5ea130bc73c341d183a14190db14e8b4.png" alt="在这里插入图片描述"><br>具体就不介绍了，请浏览官网了解。</p></li><li><p>添加软件源，<code>/etc/apt/sources.list</code>文件中像下面这样添加一行：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://security.debian.org/debian-security buster/updates main </span><br></pre></td></tr></table></figure><ul><li>系统可用的软件包更新，刷新软件包的缓存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update  # 更新软件源</span><br></pre></td></tr></table></figure><ul><li><code>apt-get update</code>之后若出现下面提示：<br><code>由于没有公钥，无法验证下列签名： NO_PUBKEY 112695A0E562B32A NO_PUBKEY 54404762BBB6E853</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 112695A0E562B32A 54404762BBB6E853</span><br></pre></td></tr></table></figure><ul><li><p>其中后面的<code>112695A0E562B32A 54404762BBB6E853</code>就是上面提到的<code>NO_PUBKEY 112695A0E562B32A NO_PUBKEY 54404762BBB6E853</code>中的公钥，替换成对应的即可。然后重新<code>apt-get update</code>即可。</p></li><li><p>查看软件包可更新列表</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt list --upgradable   </span><br></pre></td></tr></table></figure><p>如下图所示：<br><img src="https://img-blog.csdnimg.cn/de34ac38295e4c8e9f5854cbc3a18aa1.png" alt="在这里插入图片描述"></p><ul><li>安装libc6</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libc6-dev  /sudo apt install libc6</span><br></pre></td></tr></table></figure><p><code>3</code> 查看服务器当前版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /lib/x86_64-linux-gnu/libc.so.6 | grep GLIBC_</span><br></pre></td></tr></table></figure><p>返回的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.2.6</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBC_2.3.3</span><br><span class="line">GLIBC_2.3.4</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.5</span><br><span class="line">GLIBC_2.6</span><br><span class="line">GLIBC_2.7</span><br><span class="line">GLIBC_2.8</span><br><span class="line">GLIBC_2.9</span><br><span class="line">GLIBC_2.10</span><br><span class="line">GLIBC_2.11</span><br><span class="line">GLIBC_2.12</span><br><span class="line">GLIBC_2.13</span><br><span class="line">GLIBC_2.14</span><br><span class="line">GLIBC_2.15</span><br><span class="line">GLIBC_2.16</span><br><span class="line">GLIBC_2.17</span><br><span class="line">GLIBC_2.18</span><br><span class="line">GLIBC_2.22</span><br><span class="line">GLIBC_2.23</span><br><span class="line">GLIBC_2.24</span><br><span class="line">GLIBC_2.25</span><br><span class="line">GLIBC_2.26</span><br><span class="line">GLIBC_2.27</span><br><span class="line">GLIBC_2.28     # 多出该版本，说明安装成功，系统也能正常使用。</span><br><span class="line">GLIBC_PRIVATE</span><br></pre></td></tr></table></figure><p>如下图所示：<br><img src="https://img-blog.csdnimg.cn/94237d434d92453481306bf27dba3d1b.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Ubuntu" scheme="http://blog.ioimp.top/categories/Ubuntu/"/>
    
    
    <category term="日常小BUG" scheme="http://blog.ioimp.top/tags/%E6%97%A5%E5%B8%B8%E5%B0%8FBUG/"/>
    
    <category term="Linux学习" scheme="http://blog.ioimp.top/tags/Linux%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>私域文章整理【一】</title>
    <link href="http://blog.ioimp.top/2023/11/17/%E7%A7%81%E5%9F%9F%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86%E3%80%90%E4%B8%80%E3%80%91/"/>
    <id>http://blog.ioimp.top/2023/11/17/%E7%A7%81%E5%9F%9F%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86%E3%80%90%E4%B8%80%E3%80%91/</id>
    <published>2023-11-17T06:08:47.000Z</published>
    <updated>2023-11-17T07:24:00.809Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="私域流量的那些事情？"><a href="#私域流量的那些事情？" class="headerlink" title="私域流量的那些事情？"></a>私域流量的那些事情？</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p data-pid="80eB9gNY"><b>文丨语鹦企服私域管家原创，未经授权不得转载</b></p><p data-pid="RV-jSG9Q">成功的私域IP可以帮助企业建立独特的品牌形象，增强用户粘性，提高品牌认知度，创造更多商业机会。那么<b>私域IP是什么意思？私域IP和私域流量什么区别？</b>今天语鹦企服就带大家来了解一下~</p><h2 id="私域IP是什么意思？"><a href="#私域IP是什么意思？" class="headerlink" title="私域IP是什么意思？"></a><strong>私域IP是什么意思？</strong></h2><p data-pid="ARzPAHV4"><b>私域IP指的是在私域中打造的个人品牌和影响力的创作者。</b></p><p data-pid="L50ob7l1">在私域中，企业或品牌方可以借助IP进行宣传和推广，以增加品牌影响力和用户粘性。私域IP可以是真实的人物形象，也可以是虚拟人物形象，<b>但都必须具有“人”鲜活的性格特点，有生活、有故事、有情感。</b>同时，私域IP也可以被视为私域流量的人格化表现形式，用户可以通过IP与用户建立情感联系，增强用户粘性和忠诚度。</p><figure data-size="normal"><noscript><img class="content_image" data-caption="" data-original-token="v2-62c4e770e82c44c4cb5151284d5a907d" data-size="normal" src="https://pic4.zhimg.com/v2-62c4e770e82c44c4cb5151284d5a907d_b.jpg"/></noscript><img class="content_image lazy" data-actualsrc="https://pic4.zhimg.com/v2-62c4e770e82c44c4cb5151284d5a907d_b.jpg" data-caption="" data-original-token="v2-62c4e770e82c44c4cb5151284d5a907d" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='0' height='0'&gt;&lt;/svg&gt;"/></figure><h2 id="私域IP和私域流量什么区别？"><a href="#私域IP和私域流量什么区别？" class="headerlink" title="私域IP和私域流量什么区别？"></a><strong>私域IP和私域流量什么区别？</strong></h2><p data-pid="mSonTwot"><b>a、私域IP是指企业通过自行拥有的用户数据和关系，包括用户的个人信息、购买记录、行为偏好等，在自行搭建的网络框架下进行IP的打造。</b>私域IP的优势在于可以更好地了解用户需求，提供更加个性化的服务和营销，增强用户粘性和忠诚度。</p><p data-pid="ITYtB42E"><b>b、私域流量则是指企业通过自己的渠道获取的流量。</b>私域流量的特点在于，它是由企业能够直接触达用户的，不需要依赖于第三方平台。通过私域流量，企业可以更好地掌握自己的用户群体，了解他们的需求和行为，以便更好地进行产品开发、营销策略的制定等。</p><p data-pid="OLFteNH7"><b>私域流量的关键在于建立深度互动，包括：</b></p><p data-pid="Is4lO7bF"><b>私域内容：提供有价值的、与目标受众相关的内容，以吸引他们。</b>这可以是定制的文章、视频、独家信息或资源。私域内容要精准、个性化，以满足用户的需求和兴趣。</p><p data-pid="hN7ML1g4">以"有棵树"为例，他们在自家社群中以独特的方式分享宝宝内裤的专业知识，将社群打造成了一个专属的亲子成长学堂。<b>这些信息不仅提供给父母们宝贵的知识，还为他们提供了一个互动的平台，让他们可以分享经验和互相支持。</b>加强了成员之间的联系，提高了社群的粘性。</p><figure data-size="normal"><noscript><img class="content_image" data-caption="" data-original-token="v2-1211775a15b3457c75ca8da38fd3fe89" data-size="normal" src="https://pic2.zhimg.com/v2-1211775a15b3457c75ca8da38fd3fe89_b.jpg"/></noscript><img class="content_image lazy" data-actualsrc="https://pic2.zhimg.com/v2-1211775a15b3457c75ca8da38fd3fe89_b.jpg" data-caption="" data-original-token="v2-1211775a15b3457c75ca8da38fd3fe89" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='0' height='0'&gt;&lt;/svg&gt;"/></figure><p data-pid="rWIRp7t6"><b>私域互动：积极与已有客户互动，回应他们的问题、评论、建议。</b>建立社交媒体群体或讨论区，鼓励用户分享经验、建议和产品使用情况。</p><figure data-size="normal"><noscript><img class="content_image" data-caption="" data-original-token="v2-46c151a83cfc5bc44809e4e74bbc8cda" data-size="normal" src="https://pica.zhimg.com/v2-46c151a83cfc5bc44809e4e74bbc8cda_b.jpg"/></noscript><img class="content_image lazy" data-actualsrc="https://pica.zhimg.com/v2-46c151a83cfc5bc44809e4e74bbc8cda_b.jpg" data-caption="" data-original-token="v2-46c151a83cfc5bc44809e4e74bbc8cda" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='0' height='0'&gt;&lt;/svg&gt;"/></figure><p data-pid="kQ-ZEN8Y">为了实现这一点，<b>建议企业采用语鹦企服的「跨平台话术库」功能。</b>不同于企微的话术库功能，语鹦企服的「跨平台话术库」支持多种不同形式的内容，包括文本、图片、链接、网页和视频等。<b>企业可以将配置好的内容快速同步到企业微信侧边栏，并允许不同部门单独配置各自的话术库。</b>这一操作简化了顾客问题的回应流程，大大降低了出错的概率。这种改进不仅提高了客户满意度，还带来了效率和准确性的提升。</p><figure data-size="normal"><noscript><img class="content_image" data-caption="" data-original-token="v2-ceacf0c1782a6551f9357f6728d76c6f" data-size="normal" src="https://pic2.zhimg.com/v2-ceacf0c1782a6551f9357f6728d76c6f_b.jpg"/></noscript><img class="content_image lazy" data-actualsrc="https://pic2.zhimg.com/v2-ceacf0c1782a6551f9357f6728d76c6f_b.jpg" data-caption="" data-original-token="v2-ceacf0c1782a6551f9357f6728d76c6f" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='0' height='0'&gt;&lt;/svg&gt;"/></figure><p data-pid="oDU-5Kx2"><b>私域转化：将受众从关注者转化为付费客户。</b>通过提供定制化的服务、个性化的优惠和购物建议，鼓励他们购买产品或使用服务。</p><p data-pid="TFmBtPSL"><b>企业可以借助语鹦企服</b>设置相应的标签规则在<b>「九宫格&amp;大转盘抽奖」、「刮刮卡」等</b>活动中轻松创建各类活动标签，方便辨别客户喜好，还可以通过语鹦企服的<b>定制功能打通会员系统数据</b>会根据客户的入群渠道、活动参与情况、购买次数等自动为其添加标签。通过这一过程，企业可以逐渐积累客户画像，深入了解他们的需求和购物习惯，从而更有针对性地为客户推荐适合的产品，大幅提高他们的转化速度。</p><figure data-size="normal"><noscript><img class="content_image" data-caption="" data-original-token="v2-d6b84cabf6215a0becd6cd9d6e21b520" data-size="normal" src="https://pica.zhimg.com/v2-d6b84cabf6215a0becd6cd9d6e21b520_b.jpg"/></noscript><img class="content_image lazy" data-actualsrc="https://pica.zhimg.com/v2-d6b84cabf6215a0becd6cd9d6e21b520_b.jpg" data-caption="" data-original-token="v2-d6b84cabf6215a0becd6cd9d6e21b520" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='0' height='0'&gt;&lt;/svg&gt;"/></figure><p data-pid="_xpxaS2P">以上就是关于<b>《私域IP是什么意思？私域IP和私域流量什么区别？》</b>的解答了，企业可以利用私域流量建立更紧密的客户关系，提供个性化服务，增加销售机会，并在长期内维护可持续的业务增长。想了解更多关于语鹦企服的功能玩法，欢迎关注语鹦企服！</p><p data-pid="Mr6lDunH">语鹦企服私域管家 (<a class="external" href="https://link.zhihu.com/?target=http%3A//crm.bytell.cn" rel="nofollow noreferrer" target="_blank"><span class="invisible">http://</span><span class="visible">crm.bytell.cn</span><span class="invisible"></span></a>): 基于企业微信的新一代SCRM工具。集合员工活码、超级活码、好友裂变、社群裂变、无限群活码、自动拉群、关键词进群、跨平台话术库、历史朋友圈、个性化欢迎语、会话存档、进退群分析等众多工具于一身，欢迎免费体验。</p><h4 id="文章详细url-https-api-zhihu-com-answers-3287550484"><a href="#文章详细url-https-api-zhihu-com-answers-3287550484" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3287550484"></a>文章详细url:<a href="https://api.zhihu.com/answers/3287550484">https://api.zhihu.com/answers/3287550484</a></h4><h2 id="私域流量是什么？普通人该怎么做？"><a href="#私域流量是什么？普通人该怎么做？" class="headerlink" title="私域流量是什么？普通人该怎么做？"></a>私域流量是什么？普通人该怎么做？</h2><h3 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h3><p data-pid="cEfxytK7">什么是私域流量，可以看下我这篇回答。</p><p><a class="internal" data-draft-node="block" data-draft-type="link-card" data-image="https://pic3.zhimg.com/v2-fc2da0f364f7a5a9e649ffc099bfeca2_ipico.jpg" data-image-height="726" data-image-width="780" href="https://www.zhihu.com/answer/3210412888">天天说私域流量，那你知道最底层的操作是什么嘛？</a></p><p data-pid="NhQ5W8CX">看完就应该明白什么叫私域了</p><h4 id="文章详细url-https-api-zhihu-com-answers-3221766776"><a href="#文章详细url-https-api-zhihu-com-answers-3221766776" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3221766776"></a>文章详细url:<a href="https://api.zhihu.com/answers/3221766776">https://api.zhihu.com/answers/3221766776</a></h4><h2 id="什么是私域？"><a href="#什么是私域？" class="headerlink" title="什么是私域？"></a>什么是私域？</h2><h3 id="内容-2"><a href="#内容-2" class="headerlink" title="内容"></a>内容</h3><p data-pid="02ovwKID">在最近的新消费浪潮中，越来越高的获客成本使得“私域”和“会员制”成为众多品牌俘获用户的关键战术。有一段时间，似乎各个品牌都开始在私域和会员上发力了。很多人其实不知道私有域和会员的区别，甚至有人认为两者是同一个体系。即使是那些建立了会员制的企业，仍然有许多问题。比如我的会员平台搭建好了，为什么对用户没有吸引力？我的会员有那么多积分，为什么会员不愿意兑换？</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic1.zhimg.com/v2-c002f7ce9373744860f906f5b5aeb94a_r.jpg" data-original-token="v2-279a971ec8159023a04378acafbdb244" data-rawheight="366" data-rawwidth="640" data-size="normal" src="https://pic1.zhimg.com/v2-c002f7ce9373744860f906f5b5aeb94a_b.jpg" width="640"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic1.zhimg.com/v2-c002f7ce9373744860f906f5b5aeb94a_b.jpg" data-caption="" data-original="https://pic1.zhimg.com/v2-c002f7ce9373744860f906f5b5aeb94a_r.jpg" data-original-token="v2-279a971ec8159023a04378acafbdb244" data-rawheight="366" data-rawwidth="640" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='640' height='366'&gt;&lt;/svg&gt;" width="640"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="tHojEw6P"><b>1.私有域和会员有什么区别？</b></p><p data-pid="h8LnWkDP">针对不同的业务场景，私域和会员各有优势。私域是一个很好的帮助运营成长的工具，但是私域系统不是所有场景都能用的。在不同的企业规模和销售模式下，两者的优先级体系是不同的。</p><p data-pid="_BJWpA1S">第一，大企业+直营，优先考虑私域。低消费高客单价的直营，意味着用户需要大量的服务。成为会员很难对用户的心智产生很大的影响，所以更适合私域。</p><p data-pid="rh7APfjK">第二，大企业+经销商，会员优先。经销商最大的价值是触达更多用户，会员体系可以穿透经销商触达用户，获取数据。相反，将用户入驻私有域池是非常困难的，经销商会有不安全感。一个设计良好的会员体系，既可以作为经销商帮助其服务用户的弹药，又不会损害经销商的权益。</p><p data-pid="8S36wDO3">第三，小企业可以把私域和会员当一回事，把会员的权益放在你的私域体系里就好了。</p><p data-pid="inT0cZQ9">在不同的场景下，私域和会员制各有优势，在具体业务落地时，需要根据公司情况具体分析。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="MOnVx1QM"><b>会员制度在我们的日常生活中无处不在。无论是坐飞机的会员卡，还是每天去超市买咖啡的积分卡，都是品牌基于会员体系连接消费者。有以下五种常见形式:</b></p><p data-pid="Eid0zgcf"><b>1.整体系统</b></p><p data-pid="Uy1WKsLP">以星巴克为例。一杯咖啡可以累积0.3颗星，消费者可以用30杯咖啡换取一杯免费咖啡。很多商场也是如此。你花100块钱存一分，100分就值一块钱。如果是零售业态，你不需要太在意它是否服务于用户整个生命周期的不同产品和服务。你可以用一个简单的积分系统。</p><p data-pid="urHxh_UG"><b>2.跨行业合作系统</b></p><p data-pid="1q1-HgqD">以日本的咲夜书店为例。它80%的收入来自会员卡，日本1.2亿人口中有7000万是它的会员。与多家连锁洗头店、美容院、餐厅等合作。在这些店铺消费时，可以积累积分，积分可以在所有店铺兑换成现金。在这个会员制中，严武书店相当于一个“银行”的角色。它设计了一个类似于“汇率”的概念，用来指定用户在不同商店的消费转换成现金的比例。其他店只需要决定多少参与这个系统。</p><p data-pid="vw6roaqL">这种方法适合服务于一些圈子用户的公司，比如核心用户是一些高净值客户，或者是亲子领域的早教机构、拍摄机构。</p><p data-pid="taWtYtTl"><b>3.行为货币化系统</b></p><p data-pid="nE19CZjF">在这种模式下，用户积分的来源不仅与消费挂钩，还与用户的一些其他行为相关。现在一些互联网公司就是这样建立会员体系的。根据平台积分的多少，对应不同的会员等级。这种方法适合纯线上公司，可以统计用户的很多行为。</p><p data-pid="fqVtqERD"><b>4.用户合作创新系统</b></p><p data-pid="Y0OYfGgR">花溪子就是这种制度的典型。当你成为花溪子的联合创始人，加入会员制，每推出一款新品，你都可以申请产品试用，成为体验官。那些申请试用的用户可能会发朋友圈推广产品，这就完成了用户的共创。如果产品服务于有共同喜好的人群，或者一些小众群体，更适合用户打造的这套会员体系。</p><p data-pid="B_DoqxKd"><b>5.付酬制度</b></p><p data-pid="85gu37yL">最后一种是常见且经典的方式——支付系统。我需要支付一笔钱购买会员资格，从而获得额外的利益。那么付费会员卡是如何吸引消费者付费的呢？</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://picx.zhimg.com/v2-f4e43f6c52a7eff2587ca3a2b7af6da9_r.jpg" data-original-token="v2-2409588873f21b2151f42e7565b8f35e" data-rawheight="314" data-rawwidth="640" data-size="normal" src="https://picx.zhimg.com/v2-f4e43f6c52a7eff2587ca3a2b7af6da9_b.jpg" width="640"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://picx.zhimg.com/v2-f4e43f6c52a7eff2587ca3a2b7af6da9_b.jpg" data-caption="" data-original="https://picx.zhimg.com/v2-f4e43f6c52a7eff2587ca3a2b7af6da9_r.jpg" data-original-token="v2-2409588873f21b2151f42e7565b8f35e" data-rawheight="314" data-rawwidth="640" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='640' height='314'&gt;&lt;/svg&gt;" width="640"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="llbMz76T"><b>一般所有公司付费会员卡的开卡逻辑都是“花、赚、存、享”四步开卡逻辑。</b></p><p data-pid="a09A3yed">第一步，花钱，交会员费。</p><p data-pid="8SKBbPz_">第二步是，缴纳会员费后，一般可以获得一些礼包。在产品设计上，一般100元会员费对应的开卡礼包价值150-250块，包括低价产品、感知价值高的产品、刚需高频的服务等。例如，山姆俱乐部将提供牙齿清洁服务，以及免费现金折扣。</p><p data-pid="_q6PCvy-">第三步，省钱。具体形式是购物反馈。会员在购物时会积累积分，可以给他们更多的折扣。</p><p data-pid="CrI-RQre">第四步是享受，一般是指享受一些特权。比如携程钻石卡会有龙腾旅行休息室、快速安全通道、KTV免费一小时的特权。</p><p data-pid="K_mRxIUG"><b>三、会员制建设四部曲:</b></p><p data-pid="HuaNAqxs">分级、评分、降级和管理</p><p data-pid="bdMrPt_z">接下来我们就来说说构建会员体系的关键步骤，主要分为四个部分:用户分级、设计积分获取规则、用户升级和降级规则、构建会员管理体系。</p><p data-pid="6aBzob_4"><b>第一步，给用户打分。</b></p><p data-pid="1TMPVdNS">品牌可以从消费水平和用户年龄段对用户群体进行分类。在每个群体中，又可以从消费价格、消费频率、消费排名三个角度进一步区分。其他维度，如地域、价格敏感或服务敏感，也可以作为参考。所以在思考如何对会员进行分类分级的时候，可以选择分析用户行为的深度。你选择什么样的设计方法，取决于你想在这个会员体系中激励用户采取什么样的行为。在用户群体分层中，有一群人需要特别关注——那些即将升级的会员，他们需要专注于营销。当我们看到某个用户即将进行数据层面的升级时，要通过各种手段提醒他——弹窗曝光、发短信、EDM等。，并提醒客户完成几个动作，实现会员升级，享受更多权益。</p><p data-pid="9LgJqiws"><b>第二步是设计积分获取规则。</b></p><p data-pid="Kh-jH5ea">获得的积分分为来自用户的动作、来自用户的交易和来自用户的交流。如何得到这些点，是品牌要设计和定义的规则。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic2.zhimg.com/v2-694d0fae34eb3b69447f8566c15d42d5_r.jpg" data-original-token="v2-52034541acffb2074e72eaff86720a73" data-rawheight="332" data-rawwidth="640" data-size="normal" src="https://pic2.zhimg.com/v2-694d0fae34eb3b69447f8566c15d42d5_b.jpg" width="640"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-694d0fae34eb3b69447f8566c15d42d5_b.jpg" data-caption="" data-original="https://pic2.zhimg.com/v2-694d0fae34eb3b69447f8566c15d42d5_r.jpg" data-original-token="v2-52034541acffb2074e72eaff86720a73" data-rawheight="332" data-rawwidth="640" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='640' height='332'&gt;&lt;/svg&gt;" width="640"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="GrE4Hefc"><b>通常是以下三种。</b></p><p data-pid="e6OYLE5I">第一种是通过用户消费获得的。花费的金额越高，获得的积分就越多。</p><p data-pid="s3lMCVGq">二是通过用户在产品端做一些操作来获得积分。比如登录、打卡或者使用新功能等日常操作，或者用户参加一个大活动就可以获得双倍积分。</p><p data-pid="ocw2k53u">三是通过用户的传播来积累积分。比如转发帮助品牌增加读者数量，促进交易数量，用户本身获得积分。</p><p data-pid="-V8gnIxb">以支付宝为例。支付宝积分的获取方式有很多种。可以通过消费购物、生活缴费、理财等交易获得积分。还可以在支付宝里做一些用户行为，比如做任务积累积分。</p><p data-pid="qPJpr85F"><b>第三步:用户升级降级规则。</b></p><p data-pid="kySHKo7o">设计好用户获取积分的规则后，接下来就要考虑如何让用户主动想要获取积分。换句话说，如何制定会员升级和降级的规则，涉及到如何通过消费刺激即将升级的会员立即升级，以及如何将即将离世的会员留在队伍中。这样做的本质是利用了用户的厌恶损失心理和即时心理。如果会员来的时间不长，提醒他还有200分快到期了。你想把它们换成礼物吗？在这里你可以思考，用户真的不愿意存分吗？</p><p data-pid="osgyiPhp">不是，只是用户觉得你的积分没用。好的积分兑换系统可以帮助用户在积分权益类产品的激励下选择和使用更多的产品。</p><p data-pid="wFs7Z3Ga"><b>第四步，搭建会员管理系统。</b></p><p data-pid="-H5cTf4s">要长期留住用户，涉及到会员的管理体系，分为四个部分。</p><p data-pid="Qlj_MUPk"><b>1、产生荣誉感和认同感。</b></p><p data-pid="dT1viLav">品牌要想好怎么做，能让用户觉得荣幸成为你的会员，使用你的会员权益。比如当用户普遍成为航空公司金卡或者银行的私人客户，就会有这样的荣誉感。</p><p data-pid="jiN7h1QZ">这里有三种传统的运作方式，可以让成员有一种认同感:</p><p data-pid="9aWbzgEj">首先是会员日活动的策划。之前我们和客户云南白药一起策划了云南白药的会员日——选择闭店一天，只邀请VIP会员到店，五折购买，利用会员日活动回馈会员。</p><p data-pid="Ua2-BxYC">二是体验官的活动策划。比如让花溪子和成员共同创作，然后挑选有能力输出内容、感受细腻细节的人，让他们成为体验官，免费使用产品出谋划策，帮助传播。</p><p data-pid="veP3bt8-">三是会员线下见面日。我们在服务银行客户的时候，会做这样的活动，比如一些沙龙活动或者亲子活动，让用户之间有更强的联系。</p><p data-pid="Vj-0Qafj"><b>2.设计权和激励制度。</b></p><p data-pid="gaG7bgPi">这一点也很重要。一般来说，可以从“付费产品变免费”、“稀缺产品变免费”、“不断更新权利和激励”、“通过跨行业合作和跨界合作获取更多资源”四个角度来做。</p><p data-pid="aOzAtA1M"><b>3.注意风险点。</b></p><p data-pid="pw_p3YOA">会员管理中也会出现几个与积分相关的典型风险点，需要特别注意。首先，会员积分是一种市场成本，因为会员必须兑换。因此，公司需要每年计算会员未消费的积分。</p><p data-pid="HUgNTOWu">第二点就是要点要注意限定和上限。比如会员积分数不超过50万，或者会员积分数累计不能超过3年，否则会被清零。如果你的会员系统中有大量未消费的积分，你将进入一个通货膨胀的积分系统，这将影响整个财务状况。</p><p data-pid="OmPqd6JS"><b>4.构建分阶段会员体系。</b></p><p data-pid="c-B8UHkx">会员制是一个系统工程，有很多细节。对于我们来说，建立一个分阶段的会员制度会更成功。先构建会员制的基本框架，再构建激励推广的框架，最后构建持续运营的框架。这是会员制取得全面成功的三个关键步骤。对于每一个企业来说，都需要不断思考如何构建反向触达用户的体系，从而实现与用户的有效沟通。会员制正在帮助企业构建这个过程。好的会员体系会让用户重复“主动来企业”的动作，进而加深与企业产品或服务的联系。</p><p data-pid="ch5Uay77">根据不同的格式，相应匹配私有域或会员的形式；然后，根据企业业务场景，匹配最适合的会员形式，进而构建基于四部曲的会员体系。这样，在一个好的会员体系中，用户才会愿意和企业保持粘性，才能真正帮助企业的业务越做越好。</p><h4 id="文章详细url-https-api-zhihu-com-answers-2913050839"><a href="#文章详细url-https-api-zhihu-com-answers-2913050839" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/2913050839"></a>文章详细url:<a href="https://api.zhihu.com/answers/2913050839">https://api.zhihu.com/answers/2913050839</a></h4><h2 id="私域运营是什么？如何通过私域裂变获客？"><a href="#私域运营是什么？如何通过私域裂变获客？" class="headerlink" title="私域运营是什么？如何通过私域裂变获客？"></a>私域运营是什么？如何通过私域裂变获客？</h2><h3 id="内容-3"><a href="#内容-3" class="headerlink" title="内容"></a>内容</h3><p data-pid="H1TGKw1D">运营私域流量前，先要弄懂什么是私域流量？</p><h2 id="一、什么是私域流量？"><a href="#一、什么是私域流量？" class="headerlink" title="一、什么是私域流量？"></a>一、什么是私域流量？</h2><p data-pid="OziU3vtV">所谓的私域流量，其实就是品牌或个人所拥有的、可以自由控制、多次利用的、免费且能够直接触达用户的流量。</p><p data-pid="dqMX58uK">私域流量对比<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3182107833%7D">公域流量</a>的优势，也是清晰可见的。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic3.zhimg.com/v2-983b6ec0a454ac03baa44803a5882400_r.jpg" data-original-token="v2-983b6ec0a454ac03baa44803a5882400" data-rawheight="882" data-rawwidth="1264" data-size="normal" src="https://pic3.zhimg.com/v2-983b6ec0a454ac03baa44803a5882400_b.jpg" width="1264"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-983b6ec0a454ac03baa44803a5882400_b.jpg" data-caption="" data-original="https://pic3.zhimg.com/v2-983b6ec0a454ac03baa44803a5882400_r.jpg" data-original-token="v2-983b6ec0a454ac03baa44803a5882400" data-rawheight="882" data-rawwidth="1264" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1264' height='882'&gt;&lt;/svg&gt;" width="1264"/></figure><h3 id="1、什么是好的私域流量载体？"><a href="#1、什么是好的私域流量载体？" class="headerlink" title="1、什么是好的私域流量载体？"></a>1、什么是好的私域流量载体？</h3><p data-pid="evByongp">微信是离用户最近的群体，最有价值的私域流量就是让客户添加个人微信号，或者添加企业微信个人号。</p><p data-pid="7o4wXm1w"><b>主要基于以下4点考虑：</b></p><p data-pid="cf2gUNoq">①微信是当前社交平台用户最多的平台，用户高达11亿，覆盖的人群广，使用频率高，并且能不用花钱就快速触达用户，是企业私域流量池搭建的首选。</p><p data-pid="k5zS-oWS">②有朋友圈这个场景，更有利于长期经营用户</p><p data-pid="O4_iQN4P">③腾讯生态完备，社交做得最好，还有微信支付</p><p data-pid="cGSqAt0B">④个人微信是相对封闭的社交环境，封闭环境使流量可以以流量池的形式存在</p><h3 id="2、私域流量的本质"><a href="#2、私域流量的本质" class="headerlink" title="2、私域流量的本质"></a>2、私域流量的本质</h3><p data-pid="2GN4Mk74">在搭建私域流量前，先了解私域流量的本质是什么？私域流量的本质主要有这4点考虑：</p><p data-pid="221SwmT8">①流量的所有权和使用权的归属问题</p><p data-pid="CTqN_Gs1">②从流量思维转变为经营用户思维</p><p data-pid="shGlUpsI">③核心是经营用户以及经营和用户的关系</p><p data-pid="CnevO9La">④不是纯粹的销售导向，不是视用户为韭菜，不是收割的逻辑</p><p data-pid="UPp9unIM">基于以上考虑，私域流量不是把用户引流到微信就完事了，而要为用户持续性输出内容，通过内容营销触达用户，最终完成购买等转化。</p><p><a class="wrap external" data-draft-node="block" data-draft-type="link-card" href="https://link.zhihu.com/?target=https%3A//topic.eqxiu.com/editor/topic.html%3Fcode%3D5X5NW035jW" rel="nofollow noreferrer" target="_blank">易企秀营销内容中台，助力企业内容驱动增长的数字新基建</a></p><h2 id="二、什么是内容营销？"><a href="#二、什么是内容营销？" class="headerlink" title="二、什么是内容营销？"></a>二、什么是内容营销？</h2><p data-pid="4Cb3geg8">百度定义：内容营销，指的是以图片、文字、动画等等介质传达有关企业的相关内容来给客户信息，促进销售，就是通过合理的内容创建、发布及传播，向用户传递有价值的信息，从而实现网络销售的自的。他们所依附的载体，可以是企业的LOGOCV画册、网站、广告，甚至是T恤、纸杯、手提袋等，根据不同的载体，传递的介质各有不同，但内容的核心必须是一致的。</p><p data-pid="AamBxNnS">所以我认为内容营销是在各大主流社交媒体上，向自已的潜在用户，输出他们所关心的、不同形式的内容，并进行良好的互动，然后连接用户，筛选用户，从而获得源源不断有效销售线索的营销行为。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic2.zhimg.com/v2-338f6b015b2d5fd639bdce50d735e1f5_r.jpg" data-original-token="v2-338f6b015b2d5fd639bdce50d735e1f5" data-rawheight="776" data-rawwidth="1166" data-size="normal" src="https://pic2.zhimg.com/v2-338f6b015b2d5fd639bdce50d735e1f5_b.jpg" width="1166"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-338f6b015b2d5fd639bdce50d735e1f5_b.jpg" data-caption="" data-original="https://pic2.zhimg.com/v2-338f6b015b2d5fd639bdce50d735e1f5_r.jpg" data-original-token="v2-338f6b015b2d5fd639bdce50d735e1f5" data-rawheight="776" data-rawwidth="1166" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1166' height='776'&gt;&lt;/svg&gt;" width="1166"/></figure><p data-pid="-6Ehqbda">①内容营销是连接用户，筛选用户，不是主动去找用户，而是让用户主动找你；</p><p data-pid="JSa63VGB">②“高压线”不要碰！内容要符合社会主义核心价值观 ；</p><p data-pid="-bwoijqI">③内容营销不仅仅是为了获取阅读量、粉丝量、点赞量、播放量 ；</p><p data-pid="kk83ZTvG">④各大主流社交媒体平台的红线不要碰！要遵守TA们的算法和游戏规则 ；</p><p data-pid="uBXv9yX_">⑤一旦一个公司做内容营销，町着阅读量、粉丝量、点赞量、播放量，就一定不会成功；</p><p data-pid="NZsnCLYi">⑥内容营销不是什么文章火，就发什么文章 ！</p><p data-pid="Z4IKRAGk">搭建<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3182107833%7D">私域流量池</a>，一定是从用户思维的角度出发，而不是为了流量而搭建私域流量池。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic1.zhimg.com/v2-932b3e9baf5e9e7d9c0a882abe648e04_r.jpg" data-original-token="v2-932b3e9baf5e9e7d9c0a882abe648e04" data-rawheight="798" data-rawwidth="1966" data-size="normal" src="https://pic1.zhimg.com/v2-932b3e9baf5e9e7d9c0a882abe648e04_b.jpg" width="1966"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic1.zhimg.com/v2-932b3e9baf5e9e7d9c0a882abe648e04_b.jpg" data-caption="" data-original="https://pic1.zhimg.com/v2-932b3e9baf5e9e7d9c0a882abe648e04_r.jpg" data-original-token="v2-932b3e9baf5e9e7d9c0a882abe648e04" data-rawheight="798" data-rawwidth="1966" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1966' height='798'&gt;&lt;/svg&gt;" width="1966"/></figure><p class="ztext-empty-paragraph"><br/></p><p><a class="wrap external" data-draft-node="block" data-draft-type="link-card" href="https://link.zhihu.com/?target=https%3A//topic.eqxiu.com/editor/topic.html%3Fcode%3D5X5NW035jW" rel="nofollow noreferrer" target="_blank">易企秀营销内容中台，助力企业内容驱动增长的数字新基建</a></p><p class="ztext-empty-paragraph"><br/></p><h2 id="三、通过内容营销搭建私域流量"><a href="#三、通过内容营销搭建私域流量" class="headerlink" title="三、通过内容营销搭建私域流量"></a>三、通过内容营销搭建私域流量</h2><h3 id="1、企业内容营销的内容从哪里来？"><a href="#1、企业内容营销的内容从哪里来？" class="headerlink" title="1、企业内容营销的内容从哪里来？"></a><strong>1、企业内容营销的内容从哪里来？</strong></h3><p data-pid="8gmoyZ0f"><b>产品维度</b>一一讲好产品的价值、特点、用户体验和与众不同之处</p><p data-pid="LYs-yE3v"><b>公司维度</b>一一公司为做好这个产品所发生的一系列的故事。这里面包括公司的价值观文化理念、创始人的情怀、公司的动态、获得的荣誉。</p><p data-pid="J8aclyEb"><b>行业维度</b>一一这个行业整体是什么情况？有哪些变化？公司改变行为所付出的努力。</p><p data-pid="koNNFHK3"><b>用户维度</b>一一站在用户角度看问题，看这个行业、这个产品。用户有哪些诉求抱怨我们如何去解决用户的问题。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic3.zhimg.com/v2-4a305f95d22953263b649eb4dd974228_r.jpg" data-original-token="v2-4a305f95d22953263b649eb4dd974228" data-rawheight="538" data-rawwidth="802" data-size="normal" src="https://pic3.zhimg.com/v2-4a305f95d22953263b649eb4dd974228_b.jpg" width="802"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-4a305f95d22953263b649eb4dd974228_b.jpg" data-caption="" data-original="https://pic3.zhimg.com/v2-4a305f95d22953263b649eb4dd974228_r.jpg" data-original-token="v2-4a305f95d22953263b649eb4dd974228" data-rawheight="538" data-rawwidth="802" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='802' height='538'&gt;&lt;/svg&gt;" width="802"/></figure><p data-pid="W0fnuunS">做内容营销其实就是做信任，通过内容获得用户的信任。</p><p data-pid="SiWMTOEu">因此需要告知用户，你是谁？你是做什么的？为什么相信你？</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://picx.zhimg.com/v2-94d6769d916d3699d3a4a9cc6094301f_r.jpg" data-original-token="v2-94d6769d916d3699d3a4a9cc6094301f" data-rawheight="430" data-rawwidth="812" data-size="normal" src="https://picx.zhimg.com/v2-94d6769d916d3699d3a4a9cc6094301f_b.jpg" width="812"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://picx.zhimg.com/v2-94d6769d916d3699d3a4a9cc6094301f_b.jpg" data-caption="" data-original="https://picx.zhimg.com/v2-94d6769d916d3699d3a4a9cc6094301f_r.jpg" data-original-token="v2-94d6769d916d3699d3a4a9cc6094301f" data-rawheight="430" data-rawwidth="812" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='812' height='430'&gt;&lt;/svg&gt;" width="812"/></figure><p data-pid="kU-ZOLOC">网络虚拟世界的信任主要有六大来源：</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pica.zhimg.com/v2-4df3854c2626766980481dd1ee39bb48_r.jpg" data-original-token="v2-4df3854c2626766980481dd1ee39bb48" data-rawheight="670" data-rawwidth="874" data-size="normal" src="https://pica.zhimg.com/v2-4df3854c2626766980481dd1ee39bb48_b.jpg" width="874"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pica.zhimg.com/v2-4df3854c2626766980481dd1ee39bb48_b.jpg" data-caption="" data-original="https://pica.zhimg.com/v2-4df3854c2626766980481dd1ee39bb48_r.jpg" data-original-token="v2-4df3854c2626766980481dd1ee39bb48" data-rawheight="670" data-rawwidth="874" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='874' height='670'&gt;&lt;/svg&gt;" width="874"/></figure><p data-pid="uZOotf6s">如何增加个人信任度和专家感？</p><p data-pid="2sjxQUqX">1、熟悉产生信任</p><p data-pid="4USrdFrQ">2、信任产生于“专家感”</p><p data-pid="kZiA3A-V">信息内容的识别：内容要聚焦于某个细分行业，杂乱无章则不会产生信任。</p><p data-pid="JwKSL0VP">企业可以通过360度全方位立体式输出内容。</p><p data-pid="XDwezwVP">纯粹接触效应：人们看到的某样东西的次数越多，对其喜爱的程度就越高。因为熟悉所以喜</p><p data-pid="_Y2fAEry">欢，信任便产生于此。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://picx.zhimg.com/v2-e9ca4848b011f83c3457df10af850393_r.jpg" data-original-token="v2-e9ca4848b011f83c3457df10af850393" data-rawheight="1040" data-rawwidth="910" data-size="normal" src="https://picx.zhimg.com/v2-e9ca4848b011f83c3457df10af850393_b.jpg" width="910"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://picx.zhimg.com/v2-e9ca4848b011f83c3457df10af850393_b.jpg" data-caption="" data-original="https://picx.zhimg.com/v2-e9ca4848b011f83c3457df10af850393_r.jpg" data-original-token="v2-e9ca4848b011f83c3457df10af850393" data-rawheight="1040" data-rawwidth="910" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='910' height='1040'&gt;&lt;/svg&gt;" width="910"/></figure><h3 id="2、公域内容营销平台的选择"><a href="#2、公域内容营销平台的选择" class="headerlink" title="2、公域内容营销平台的选择"></a>2、公域内容营销平台的选择</h3><p data-pid="ShFgQP8x">内容营销的平台有很多，企业可以结合自己本身的业务，和平台的调性，选择适合企业的内容营销平台。</p><p data-pid="T6_gb2yn">例如：抖音、快手、微信、微博、以及各种自媒体号。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic4.zhimg.com/v2-b73c5af3a05da9024dd79a655740f993_r.jpg" data-original-token="v2-b73c5af3a05da9024dd79a655740f993" data-rawheight="934" data-rawwidth="958" data-size="normal" src="https://pic4.zhimg.com/v2-b73c5af3a05da9024dd79a655740f993_b.jpg" width="958"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-b73c5af3a05da9024dd79a655740f993_b.jpg" data-caption="" data-original="https://pic4.zhimg.com/v2-b73c5af3a05da9024dd79a655740f993_r.jpg" data-original-token="v2-b73c5af3a05da9024dd79a655740f993" data-rawheight="934" data-rawwidth="958" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='958' height='934'&gt;&lt;/svg&gt;" width="958"/></figure><p data-pid="SjkHH8Os">在公域流量池，通过内容营销链接和筛选用户，将用户引流至私域流量。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic1.zhimg.com/v2-f94fd047e08eeb57b81e373d7a635c64_r.jpg" data-original-token="v2-f94fd047e08eeb57b81e373d7a635c64" data-rawheight="1066" data-rawwidth="1894" data-size="normal" src="https://pic1.zhimg.com/v2-f94fd047e08eeb57b81e373d7a635c64_b.jpg" width="1894"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic1.zhimg.com/v2-f94fd047e08eeb57b81e373d7a635c64_b.jpg" data-caption="" data-original="https://pic1.zhimg.com/v2-f94fd047e08eeb57b81e373d7a635c64_r.jpg" data-original-token="v2-f94fd047e08eeb57b81e373d7a635c64" data-rawheight="1066" data-rawwidth="1894" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1894' height='1066'&gt;&lt;/svg&gt;" width="1894"/></figure><p class="ztext-empty-paragraph"><br/></p><p><a class="wrap external" data-draft-node="block" data-draft-type="link-card" href="https://link.zhihu.com/?target=https%3A//topic.eqxiu.com/editor/topic.html%3Fcode%3D5X5NW035jW" rel="nofollow noreferrer" target="_blank">易企秀营销内容中台，助力企业内容驱动增长的数字新基建</a></p><p class="ztext-empty-paragraph"><br/></p><h2 id="四、私域流量要怎么运营？"><a href="#四、私域流量要怎么运营？" class="headerlink" title="四、私域流量要怎么运营？"></a>四、私域流量要怎么运营？</h2><p data-pid="x1e9ntBL">企业建立私域流量后，接下来最重要的就是私域用户的运营。</p><p data-pid="K-IrWh-A"><b>以瑞幸的私域举例，看看瑞幸是怎么做私域运营的？</b></p><p data-pid="Cn1WxGin"><b>一、品牌数字化布局</b></p><p data-pid="jNIACmpb"><b>1、小程序+APP数据打通</b></p><p data-pid="gTLCfTK_">微信小程序，与APP的数据打通，只要输入手机号，多个渠道数据互通（无论小程序、瑞幸APP 、公众号领券，使用手机号登录就可识别。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic3.zhimg.com/v2-665c993a9c9c2ecbd47fac0de5b99026_r.jpg" data-original-token="v2-665c993a9c9c2ecbd47fac0de5b99026" data-rawheight="1544" data-rawwidth="824" data-size="normal" src="https://pic3.zhimg.com/v2-665c993a9c9c2ecbd47fac0de5b99026_b.jpg" width="824"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-665c993a9c9c2ecbd47fac0de5b99026_b.jpg" data-caption="" data-original="https://pic3.zhimg.com/v2-665c993a9c9c2ecbd47fac0de5b99026_r.jpg" data-original-token="v2-665c993a9c9c2ecbd47fac0de5b99026" data-rawheight="1544" data-rawwidth="824" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='824' height='1544'&gt;&lt;/svg&gt;" width="824"/></figure><p data-pid="B-IcktaP">小程序购买下单，可以领取积分，在APP下单可以领取双倍的积分，有刻意引导用户下载APP，这样增加了触达用户的渠道。</p><p data-pid="4cPWdJtI"><b>2、基于门店&amp;企微双向导流</b></p><p data-pid="9xEzW8nc"><a class="internal" href="https://www.zhihu.com/search?q=%E7%91%9E%E5%B9%B8%E5%92%96%E5%95%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3182107833%7D">瑞幸咖啡</a>设置了多渠道，以4.8折优惠券、100元新人券等为利益点，将用户引流至企业微信，采用LBS的方式引流到附近门店员工企微号。</p><p data-pid="pPzcIv6C">再通过设置优惠券等自动回复信息，<b>引导粉丝扫码加入企业微信群，利用社群做精细化运营，高效转化变现。</b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://picx.zhimg.com/v2-ccef2b2c99654de4824a732147e63b57_r.jpg" data-original-token="v2-ccef2b2c99654de4824a732147e63b57" data-rawheight="429" data-rawwidth="1080" data-size="normal" src="https://picx.zhimg.com/v2-ccef2b2c99654de4824a732147e63b57_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://picx.zhimg.com/v2-ccef2b2c99654de4824a732147e63b57_b.jpg" data-caption="" data-original="https://picx.zhimg.com/v2-ccef2b2c99654de4824a732147e63b57_r.jpg" data-original-token="v2-ccef2b2c99654de4824a732147e63b57" data-rawheight="429" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='429'&gt;&lt;/svg&gt;" width="1080"/></figure><p data-pid="HSkpijjw">从小程序引流到最近门店，可以提醒用户瑞幸线下门店的存在，增加了门店的潜在客户。</p><p data-pid="bT_WE6eo"><b>二、品牌渠道流量分配</b></p><p data-pid="-Zbd1rjw"><b>1、线上私域引流</b></p><p data-pid="SO00UL5z">瑞幸通过微信公众号、微信视频号、视频号直播等各个公域渠道，采用4.8折券吸引用户，引导用户添加企微再领券。小程序主页空间也尽可能多的放进更多内容，充分利用首页承接“用户第一眼”的优势。</p><p data-pid="Xd5ApD1S"><b>2、线下门店引流</b></p><p data-pid="VwL8ZnOS">在门店的取餐处，又放了引导加线下门店群的二维码，这样<b>通过门店门店或者外卖消费，没有进群的顾客，又形成私域回流，促进顾客复购。</b></p><p data-pid="9eklA_bV">通过大量的快销店，瑞幸就能够将自己的庞大的线下用户群，转移到自己的私域流量池</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic1.zhimg.com/v2-499e9d0a9aa890aa574780e293f70578_r.jpg" data-original-token="v2-499e9d0a9aa890aa574780e293f70578" data-qrcode-action="none" data-rawheight="810" data-rawwidth="1080" data-size="normal" src="https://pic1.zhimg.com/v2-499e9d0a9aa890aa574780e293f70578_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic1.zhimg.com/v2-499e9d0a9aa890aa574780e293f70578_b.jpg" data-caption="" data-original="https://pic1.zhimg.com/v2-499e9d0a9aa890aa574780e293f70578_r.jpg" data-original-token="v2-499e9d0a9aa890aa574780e293f70578" data-qrcode-action="none" data-rawheight="810" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='810'&gt;&lt;/svg&gt;" width="1080"/></figure><p data-pid="EuQXifxm"><b>三、私域运营的定位和价值</b></p><p data-pid="9WYWMiEy"><b>1、企微运营</b></p><p data-pid="zwS69V8-">瑞幸的企微账号名称以首席福利官lucky为主，主要就是发福利，与人设比较吻合，采用卡通形象增加亲切感。每周都会有发券提醒，刺激老用户复购。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic2.zhimg.com/v2-0df5fb342c72e9efc5968a476998cbb7_r.jpg" data-original-token="v2-0df5fb342c72e9efc5968a476998cbb7" data-rawheight="882" data-rawwidth="1080" data-size="normal" src="https://pic2.zhimg.com/v2-0df5fb342c72e9efc5968a476998cbb7_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-0df5fb342c72e9efc5968a476998cbb7_b.jpg" data-caption="" data-original="https://pic2.zhimg.com/v2-0df5fb342c72e9efc5968a476998cbb7_r.jpg" data-original-token="v2-0df5fb342c72e9efc5968a476998cbb7" data-rawheight="882" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='882'&gt;&lt;/svg&gt;" width="1080"/></figure><p data-pid="tU2KHbtv">添加好友后，会有对应的欢迎语领券引导，针对新用户和老用户会有不同的折扣，进入门店社群，还会继续分时段推送不同的领券提醒。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic2.zhimg.com/v2-ae03cda2209a11e89ccfc1ad97841dfd_r.jpg" data-original-token="v2-ae03cda2209a11e89ccfc1ad97841dfd" data-rawheight="941" data-rawwidth="1080" data-size="normal" src="https://pic2.zhimg.com/v2-ae03cda2209a11e89ccfc1ad97841dfd_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-ae03cda2209a11e89ccfc1ad97841dfd_b.jpg" data-caption="" data-original="https://pic2.zhimg.com/v2-ae03cda2209a11e89ccfc1ad97841dfd_r.jpg" data-original-token="v2-ae03cda2209a11e89ccfc1ad97841dfd" data-rawheight="941" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='941'&gt;&lt;/svg&gt;" width="1080"/></figure><p data-pid="D7y1Gdll">同时，平均每天还会发1至2条朋友圈，推荐门店出的新品，引导领券，引导直播间参与抽咖啡互动，关注公众号抽券等。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pica.zhimg.com/v2-16953acbed0c02de71b4a6d42001de54_r.jpg" data-original-token="v2-16953acbed0c02de71b4a6d42001de54" data-rawheight="286" data-rawwidth="666" data-size="normal" src="https://pica.zhimg.com/v2-16953acbed0c02de71b4a6d42001de54_b.jpg" width="666"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pica.zhimg.com/v2-16953acbed0c02de71b4a6d42001de54_b.jpg" data-caption="" data-original="https://pica.zhimg.com/v2-16953acbed0c02de71b4a6d42001de54_r.jpg" data-original-token="v2-16953acbed0c02de71b4a6d42001de54" data-rawheight="286" data-rawwidth="666" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='666' height='286'&gt;&lt;/svg&gt;" width="666"/></figure><p data-pid="ELis1gmm"><b>2、品牌联名活动</b></p><p data-pid="mZkDpwNO">瑞幸通过和椰树等知名品牌，实现跨界联名活动，不仅能得到很高的关注度，还可以在短时间内提升销售额。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pica.zhimg.com/v2-ad3608d09a5249a001719415301f4846_r.jpg" data-original-token="v2-ad3608d09a5249a001719415301f4846" data-qrcode-action="none" data-rawheight="510" data-rawwidth="602" data-size="normal" src="https://pica.zhimg.com/v2-ad3608d09a5249a001719415301f4846_b.jpg" width="602"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pica.zhimg.com/v2-ad3608d09a5249a001719415301f4846_b.jpg" data-caption="" data-original="https://pica.zhimg.com/v2-ad3608d09a5249a001719415301f4846_r.jpg" data-original-token="v2-ad3608d09a5249a001719415301f4846" data-qrcode-action="none" data-rawheight="510" data-rawwidth="602" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='602' height='510'&gt;&lt;/svg&gt;" width="602"/></figure><h3 id="3、冲榜福利"><a href="#3、冲榜福利" class="headerlink" title="3、冲榜福利"></a><strong>3、冲榜福利</strong></h3><h3 id="冲榜福利，刺激用户短期内复购，同时满足有爱好收集任务的勋章墙人群，以此刺激回购。"><a href="#冲榜福利，刺激用户短期内复购，同时满足有爱好收集任务的勋章墙人群，以此刺激回购。" class="headerlink" title="冲榜福利，刺激用户短期内复购，同时满足有爱好收集任务的勋章墙人群，以此刺激回购。"></a>冲榜福利，刺激用户短期内复购，同时满足有爱好收集任务的勋章墙人群，以此刺激回购。</h3><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic3.zhimg.com/v2-4893b9986d83f63ea7fea6315aaf7058_r.jpg" data-original-token="v2-4893b9986d83f63ea7fea6315aaf7058" data-rawheight="888" data-rawwidth="438" data-size="normal" src="https://pic3.zhimg.com/v2-4893b9986d83f63ea7fea6315aaf7058_b.jpg" width="438"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-4893b9986d83f63ea7fea6315aaf7058_b.jpg" data-caption="" data-original="https://pic3.zhimg.com/v2-4893b9986d83f63ea7fea6315aaf7058_r.jpg" data-original-token="v2-4893b9986d83f63ea7fea6315aaf7058" data-rawheight="888" data-rawwidth="438" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='438' height='888'&gt;&lt;/svg&gt;" width="438"/></figure><p data-pid="k8-Nif_G">瑞幸的引流策略，瑞幸在做活动这个方面是毫不吝啬的，非常聪明的采用了线下和线上相结合，线下门店与线上渠道相辅相成的方式持续引流。</p><p data-pid="UqNbVnXD">通俗的说前期依靠公号、视频号、线下门店<a class="internal" href="https://www.zhihu.com/search?q=%E6%98%93%E6%8B%89%E5%AE%9D&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3182107833%7D">易拉宝</a>、活动等进行引流，中期依靠企业微信个号、社群来承接流量，最后依靠小程序不断的增长转化。</p><p data-pid="ab6OQciF"><b>这套私域运营模式，不仅成为瑞幸能打败<a class="internal" href="https://www.zhihu.com/search?q=%E5%BA%93%E8%BF%AA&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3182107833%7D">库迪</a>的底气，还给瑞幸带来了稳定的客源复购，实现了赚钱。</b></p><p data-pid="EPveJEDk">搭建门店、APP/小程序、社群的零售快消数字运营体系，再接入创意内容中台，源源不断地及时产出创意内容，抓住营销节点，激活用户参与活动，领取优惠券，不断盘活私域流量，从线上引流到门店进行消费转化。这套成熟的门店引流打法中，内容是一个撬动点。</p><p data-pid="lTjydkD5"><b>好的营销模式都是可以借鉴的，如果您也对零售快消行业的社群小程序门店联合运营感兴趣，建议你及时了解私域运营的最新玩法，</b>接入<a class="internal" href="https://www.zhihu.com/search?q=%E6%98%93%E4%BC%81%E7%A7%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3182107833%7D">易企秀</a>内容中台，还可以打通自有奖品积分库，快速高效发放福利优惠券，引流用户到门店形成转化。</p><p class="ztext-empty-paragraph"><br/></p><p><a class="wrap external" data-draft-node="block" data-draft-type="link-card" href="https://link.zhihu.com/?target=https%3A//topic.eqxiu.com/editor/topic.html%3Fcode%3D5X5NW035jW" rel="nofollow noreferrer" target="_blank">易企秀营销内容中台，助力企业内容驱动增长的数字新基建</a></p><h4 id="文章详细url-https-api-zhihu-com-answers-3201175580"><a href="#文章详细url-https-api-zhihu-com-answers-3201175580" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3201175580"></a>文章详细url:<a href="https://api.zhihu.com/answers/3201175580">https://api.zhihu.com/answers/3201175580</a></h4><h2 id="公域转私域如何能快速加粉到私域？"><a href="#公域转私域如何能快速加粉到私域？" class="headerlink" title="公域转私域如何能快速加粉到私域？"></a>公域转私域如何能快速加粉到私域？</h2><h3 id="内容-4"><a href="#内容-4" class="headerlink" title="内容"></a>内容</h3><p data-pid="RWJi4k_Z">私域似乎都已经被说倦了，2023年，私域营销还重要吗？</p><p data-pid="ny7TCoV9">很多运营同行反馈，听了很多道理，依旧做不好私域。很大的原因就是没有“对症下药”。</p><p data-pid="iid_K4RZ">面对不同的业务，如何做私域？为此，36氪企服点评有幸邀请到<b>见实创始人徐志斌</b>，分享了<b>《从走量到走心，2023会是私域大涨年吗》</b>直播。徐志斌从理论和案例出发，解答了私域的本质，如何做私域，私域营销工具（SCRM）如何选择等问题。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic2.zhimg.com/v2-fee60654b48736f26406895dd6d41575_r.jpg" data-original-token="v2-feab112ae0996bf3e7dd73bbc41c6afb" data-rawheight="1076" data-rawwidth="1920" data-size="normal" src="https://pic2.zhimg.com/v2-fee60654b48736f26406895dd6d41575_b.jpg" width="1920"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-fee60654b48736f26406895dd6d41575_b.jpg" data-caption="" data-original="https://pic2.zhimg.com/v2-fee60654b48736f26406895dd6d41575_r.jpg" data-original-token="v2-feab112ae0996bf3e7dd73bbc41c6afb" data-rawheight="1076" data-rawwidth="1920" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1920' height='1076'&gt;&lt;/svg&gt;" width="1920"/></figure><p data-pid="FgTc4DQw">我们从用户处收集了100+的私域问题，以下为精选的8个问答，希望能对您有帮助。</p><h2 id="1-私域营销在2023年重要吗？"><a href="#1-私域营销在2023年重要吗？" class="headerlink" title="1.私域营销在2023年重要吗？"></a><strong>1.私域营销在2023年重要吗？</strong></h2><p data-pid="m9k-clf4">今年开年第一个月，在各类新闻中大洋彼岸硅谷裁员至少10万起。国内很多公司也在推进降本增效。但是通过看前程无忧2022年的招聘数据，我们发现：<b>私域这个岗位不降反增，是很罕见的还在快速增长的部门</b>。因为没有新的增量，企业会加大对新老客户的<b>扩展销售，做复购和ARPU的提升</b>。</p><p data-pid="XFCMmbN0">一个小例子是：今天直播前我还在和一家品牌沟通，他们自有品牌1个月私域流水是100万，但是一个月私域中销售其他关联商品竟有400万销售额。这是私域能带来的增量。</p><p data-pid="PCk6bwH5">因此，私域在2023年依旧重要，对于GMV和复购,ARPU的提升作用，答案都是确定的。</p><h2 id="2-2023，私域还是拉群发券吗？"><a href="#2-2023，私域还是拉群发券吗？" class="headerlink" title="2.2023，私域还是拉群发券吗？"></a><strong>2.2023，私域还是拉群发券吗？</strong></h2><p data-pid="IZBwWgBr">第一，<b>社群运营，某种程度上等同于私域运营。</b></p><p data-pid="WR-UT99g">因为社群有生命周期，社群的活跃率，转化率，响应率，复购率都在逐年下降，这是没有办法的事情。但是用户维系、转化产品，都需要在群里，所以社群还是很关键。</p><p data-pid="VI5vcxTG">第二，<b>会员运营，某种程度上等同于私域运营。</b></p><p data-pid="CKENYUrK">会员的运营体系非常重要，这决定了GMV的增长空间。</p><p data-pid="JVphiG5g">第三，<b>面向用户的精细化运营，会是今年很重要的一个点。</b></p><p data-pid="BBvqG698">第四，<b>全域运营成为大部分“牛”品牌的选择。</b></p><p data-pid="CPIQ58ou">绝大部分牛的团队，都开始做全域的组合和运营。运营不再是拉群和发券，会有更多新的组合和玩法。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic2.zhimg.com/v2-ccf81b26616203cfa8d221802d7bb88b_r.jpg" data-original-token="v2-9dc61c36bf91e870ef6fe30d24d168e5" data-rawheight="465" data-rawwidth="900" data-size="normal" src="https://pic2.zhimg.com/v2-ccf81b26616203cfa8d221802d7bb88b_b.jpg" width="900"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-ccf81b26616203cfa8d221802d7bb88b_b.jpg" data-caption="" data-original="https://pic2.zhimg.com/v2-ccf81b26616203cfa8d221802d7bb88b_r.jpg" data-original-token="v2-9dc61c36bf91e870ef6fe30d24d168e5" data-rawheight="465" data-rawwidth="900" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='900' height='465'&gt;&lt;/svg&gt;" width="900"/></figure><h2 id="3-全域营销如何做？"><a href="#3-全域营销如何做？" class="headerlink" title="3.全域营销如何做？"></a><strong>3.全域营销如何做？</strong></h2><p data-pid="O_6i7KBG">全域营销现在浮现了一些效果很好的运营组合。如：</p><p data-pid="n5018bSk">去年年底，很多连锁的线下品牌开始在各大公域平台投放同城广告，如我们刷不同城市会看到一些餐饮连锁有9.9元、19.9元的网红款，吸引精准用户到线下核销。到了门店，店员引导客户注册会员，加入私域池。</p><p data-pid="EFIXKsPG"><b>以广告的方式，结合地理位置和精准人群画像，引导线下消费，继而引导到私域，这是新的双轮驱动方式。</b></p><p data-pid="pzpBFKOY">还有很多品牌在小红书投放种草，在私域拔草，这个效果也很好。</p><p data-pid="Qgbwv55h">接下来会有更多组合出现，很多建立在全域上的货、渠道等理念和思路都会有新变化。也会特别依赖数据系统的打通和运用。</p><h2 id="4-私域运营如何选择SCRM厂商？"><a href="#4-私域运营如何选择SCRM厂商？" class="headerlink" title="4.私域运营如何选择SCRM厂商？"></a><strong>4.私域运营如何选择SCRM厂商？</strong></h2><p data-pid="cblb1_pu">首先，选择SCRM的前提是业务已经跑通。对绝大公司来说，刚开始做私域运营时，可以先用工具解决业务需求，当用户量和收入的问题解决了，再考虑选用什么SCRM系统。因为你已经知道问题和需求在哪里，根据服务商的回复，就能很容易知道对方是否适合。另外，各家SCRM服务商都是根据企业微信的API、SDK去开发的，所以功能和权限都大同小异。几个方面会帮助选择：</p><p data-pid="DwVnCdRF"><b>（1）服务能力</b></p><p data-pid="3aGskWHV">服务商的服务能力和响应速度至关重要。当商家就运营提出使用困惑时，对方的回复是事无巨细，还是言简意赅，区分会很大。</p><p data-pid="NvV7Qrqw"><b>（2）需求产品化的能力</b></p><p data-pid="G9g_D1RY">运营提交了一个新的需求，服务商是否能快速完成迭代更新？</p><p data-pid="ZOsY0LpA"><b>（3）成熟方法论</b></p><p data-pid="-1qXyVHX">做私域时，工具重要，方法论更重要。不同行业的玩法是不同的，<b>某家SCRM厂商是否在对应行业中有客户优势、具有相应行业成熟的方法论，能否指导企业做增长、留存、转化，至关重要</b>。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic1.zhimg.com/v2-b908cc697f43c18d3b605e6d72eaa4a8_r.jpg" data-original-token="v2-580a84b8abe6b29017fb7483b3c4ad12" data-rawheight="465" data-rawwidth="900" data-size="normal" src="https://pic1.zhimg.com/v2-b908cc697f43c18d3b605e6d72eaa4a8_b.jpg" width="900"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic1.zhimg.com/v2-b908cc697f43c18d3b605e6d72eaa4a8_b.jpg" data-caption="" data-original="https://pic1.zhimg.com/v2-b908cc697f43c18d3b605e6d72eaa4a8_r.jpg" data-original-token="v2-580a84b8abe6b29017fb7483b3c4ad12" data-rawheight="465" data-rawwidth="900" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='900' height='465'&gt;&lt;/svg&gt;" width="900"/></figure><h2 id="5-低频高客单价如何做私域？"><a href="#5-低频高客单价如何做私域？" class="headerlink" title="5.低频高客单价如何做私域？"></a><strong>5.低频高客单价如何做私域？</strong></h2><p data-pid="jCyg7bVU"><b>低频高价的企业做私域的第一核心和关键点是提升频次，提升品牌与用户接触交流的频次。</b>卖房子，卖汽车，家居，装修，在线教育等，这都属于高单价，低频次的产品。</p><p data-pid="7hTOqIdG">以装修为例，这个行业是长期低频，短期高频，用户在短期内会进行大量的搜索，看样品，装修城看建材，是否环保，装修风格，询价等等，运营方就可以对应铺专业文章、直播、短视频等，引流到私域，如果专业度强，可以引入付费环节，因为购买是一切关系的基础，如设置9.9元的顾问服务、咨询、课程等，用户可以随时咨询专业问题，同步发起进群讨论、逛建材城、集体砍价，团购等等。</p><p data-pid="KRLGETKA">这样，用户的行为习惯会全部变成触点，我们和用户接触的频次会大幅度提升，成交也是顺其自然的事情。</p><h2 id="6-有没有什么和用户建立长期关系的好方法？"><a href="#6-有没有什么和用户建立长期关系的好方法？" class="headerlink" title="6.有没有什么和用户建立长期关系的好方法？"></a><strong>6.有没有什么和用户建立长期关系的好方法？</strong></h2><p data-pid="c7JtPPYy"><b>购买是一切关系的基础。</b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic2.zhimg.com/v2-c895c496eca02732c9f9a45beb302749_r.jpg" data-original-token="v2-f47a97e41a1238ff8ed2240b9ee88173" data-rawheight="465" data-rawwidth="900" data-size="normal" src="https://pic2.zhimg.com/v2-c895c496eca02732c9f9a45beb302749_b.jpg" width="900"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-c895c496eca02732c9f9a45beb302749_b.jpg" data-caption="" data-original="https://pic2.zhimg.com/v2-c895c496eca02732c9f9a45beb302749_r.jpg" data-original-token="v2-f47a97e41a1238ff8ed2240b9ee88173" data-rawheight="465" data-rawwidth="900" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='900' height='465'&gt;&lt;/svg&gt;" width="900"/></figure><p data-pid="Ri0z4lxW">和上面提到的低频行业提升频次的出发点一致，如在线教育中，家长花9.9元购买小课包+学习礼盒；蔚来汽车当用户交了小额定金后，就会组建专门的服务小群。通过付费，顾客与品牌建立了长期的服务关系，销售人员可以通过售后服务来提升转化。</p><p data-pid="xa31GRxa">另外，低频的产品客单价一般比较高，购买人群都是高净值人群。这时候，转介绍就显得格外重要。豪车可以说是低频高价的私域样板，为车主提供超预期的服务，当车主发朋友圈炫耀的时候，转介绍其实也就完成了。同时，当客户将这些靠谱的产品和服务介绍给朋友时，对他来说是社交加分项。</p><h2 id="7-ToB行业如何做私域？"><a href="#7-ToB行业如何做私域？" class="headerlink" title="7.ToB行业如何做私域？"></a><strong>7.ToB行业如何做私域？</strong></h2><p data-pid="2dmnKGSP">TO B行业最大的困惑就是如何获得精准线索，我们主张是“让用户主动来找你”？最靠谱的方式就是深度专业有体系的内容。比如：精准案例、白皮书、深度文章等，对用户来说特别有用。这些也是目前TO B行业中传播的基础用法。</p><h2 id="8-搭建团队布局私域的时候，有什么需要注意的？"><a href="#8-搭建团队布局私域的时候，有什么需要注意的？" class="headerlink" title="8.搭建团队布局私域的时候，有什么需要注意的？"></a><strong>8.搭建团队布局私域的时候，有什么需要注意的？</strong></h2><p data-pid="sWIwe02E"><b>（1）组织架构</b></p><p data-pid="qq1dht-t">做私域，首先要碰到组织架构变革，优化升级调整。比如全员营销，分销制度，KOL改造等等。</p><p data-pid="F4wByHxd"><b>（2）团队协调</b></p><p data-pid="9quO5IJw">整个团队需要目标一致，协调统一，权责明确。当一把手带领团队把事情一次又一次做成，获得一次又一次的胜利时，私域营销就可以积小胜为大胜。 </p><p data-pid="t4wthOsu"><b>（3）部门分配</b></p><p data-pid="wuRQXLQp">37.38%的公司开始成立专门的私域一级部门来做，如果没有私域部门，那么市场，用户增长，运营部，电商零售大会员等部门可以领导私域，因为他们和私域是强相关的。</p><hr><p data-pid="ITaJt6v3">在分享的最后，徐志斌老师说：</p><p data-pid="ziLGUSvH">太阳底下无新鲜事，我们现在所说的<b>社群、私域，其实归根到底，是如何通过运营获取特定的人群，将陌生、潜在的新用户逐级变成超级用户，将陌生人凝结成更强的关系网</b>。</p><p data-pid="xLcnH-F3">私域不是一件特别需要焦虑的事情，相反，他很简单。只是运营起来需要反复操心，也需要思考一个问题：自己业务的长板是什么？如何借助私域提升效率。大部分公司私域的起步都是和自己运营长板相结合。想通之后，再考虑用什么工具（SCRM），策略和方式。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://picx.zhimg.com/v2-a3f357a74a85ac916958fd1d71823b01_r.jpg" data-original-token="v2-829bb7ae0ab85e8e9ded0178ca80ca23" data-rawheight="465" data-rawwidth="900" data-size="normal" src="https://picx.zhimg.com/v2-a3f357a74a85ac916958fd1d71823b01_b.jpg" width="900"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://picx.zhimg.com/v2-a3f357a74a85ac916958fd1d71823b01_b.jpg" data-caption="" data-original="https://picx.zhimg.com/v2-a3f357a74a85ac916958fd1d71823b01_r.jpg" data-original-token="v2-829bb7ae0ab85e8e9ded0178ca80ca23" data-rawheight="465" data-rawwidth="900" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='900' height='465'&gt;&lt;/svg&gt;" width="900"/></figure><p data-pid="5l-JEorp">找好用的私域运营（SCRM）工具，就来36氪企服点评：</p><p data-pid="ZpSnfzhr">支持<b>产品功能、客户规模、用户评分、满意度、排行榜</b>等分类筛选查看相关软件，另外还有<b>软件对比</b>等更多功能，点下方链接即可查找适合自己的SCRM产品。</p><p><a class="wrap external" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-015aed6119bc1660485a1bdc1a2181a4_ipico.jpg" data-image-height="192" data-image-width="192" href="https://link.zhihu.com/?target=https%3A//www.36dianping.com/brand/1224%3Fmp%3Dzhihuwenzhang%26lzchannel%3Dzhihu" rel="nofollow noreferrer" target="_blank">企业客户关系管理（SCRM）系统_私域流量运营_SCRM软件公司_-36氪企服点评</a></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic3.zhimg.com/v2-850ee3db53c311e83716aaf6d11ce852_r.jpg" data-original-token="v2-90cc8e8d2827d3b88f45494056792716" data-rawheight="726" data-rawwidth="1080" data-size="normal" src="https://pic3.zhimg.com/v2-850ee3db53c311e83716aaf6d11ce852_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-850ee3db53c311e83716aaf6d11ce852_b.jpg" data-caption="" data-original="https://pic3.zhimg.com/v2-850ee3db53c311e83716aaf6d11ce852_r.jpg" data-original-token="v2-90cc8e8d2827d3b88f45494056792716" data-rawheight="726" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='726'&gt;&lt;/svg&gt;" width="1080"/></figure><h4 id="文章详细url-https-api-zhihu-com-answers-2903587226"><a href="#文章详细url-https-api-zhihu-com-answers-2903587226" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/2903587226"></a>文章详细url:<a href="https://api.zhihu.com/answers/2903587226">https://api.zhihu.com/answers/2903587226</a></h4><h2 id="做“私域运营”就一定要用“微信”吗？"><a href="#做“私域运营”就一定要用“微信”吗？" class="headerlink" title="做“私域运营”就一定要用“微信”吗？"></a>做“私域运营”就一定要用“微信”吗？</h2><h3 id="内容-5"><a href="#内容-5" class="headerlink" title="内容"></a>内容</h3><p data-pid="MLO__1pC"><b>不一定，但最好用微信或者企业微信；</b></p><p data-pid="aTT3zyAH">私域化是一种能够低成本触达，提高用户生命周期价值的行为；</p><p data-pid="-S5_6Txn"><b>私域化需要的平台要具备一下属性：</b></p><p data-pid="YmXxFjaM">1.用户本身在该平台的停留时间足够长，用户使用频次足够高；</p><p data-pid="M2tirf2R">大概率不能自己研发一个app吧？停留和活跃现在又有谁能超过微信？</p><p data-pid="U2irwvWp">2.积累的私域用户，需要概率最小的的平台竞品曝光，才有优势；</p><p data-pid="WgvfVjfU">有些公域有了活跃和停留，客户信息也透明了，今天看到你的产品，下一秒就“猜你喜欢”推荐类似产品，如某音。</p><p data-pid="X2YlbH_j">3.你需要的私域品平台精细化分层管理客户，标签，备注，仅对谁可见，接入SCRM等；</p><p data-pid="wWtl7awP">4.触达不要钱，且触达的平台会强提醒被触达方。（反正我是任何软件通知都会关，支付宝和微信的消息通知我不会设置免打扰。）</p><p data-pid="poQM66F5">5.客户会大量主动在平台分享个人生活信息，且主动打开你发广告的触点渠道去浏览，因为他的朋友圈不止有你。</p><p data-pid="sbKinzvn">符合这些点，不是说非得微信，但目前有谁能强过微信呢？</p><p data-pid="C-0j4c7X"><b>感觉有问题，评论一起聊聊；</b></p><p data-pid="38hnt5E8"><b>觉得没问题，点个赞呗～</b></p><h4 id="文章详细url-https-api-zhihu-com-answers-3006592994"><a href="#文章详细url-https-api-zhihu-com-answers-3006592994" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3006592994"></a>文章详细url:<a href="https://api.zhihu.com/answers/3006592994">https://api.zhihu.com/answers/3006592994</a></h4><h2 id="私域运营模式有哪些？"><a href="#私域运营模式有哪些？" class="headerlink" title="私域运营模式有哪些？"></a>私域运营模式有哪些？</h2><h3 id="内容-6"><a href="#内容-6" class="headerlink" title="内容"></a>内容</h3><p data-pid="0mwYYS4R">我们先明确下私域的定义，每个人对私域流量池的看法不同。有的人把它理解成一种新的流量方式，有的人把它理解成一个用户池。</p><p data-pid="8oKKkDFd">其实，如果真要给“私域流量池”做一个界定，那它的本质并不是流量，而是<b>用户的精细化运营</b>。私域流量池里的用户都是<b>自己可以反复利用，可以免费触达的</b>，这些用户沉淀在微信公众号、微信群、微信个人号、企微号等平台，我们称之为私域流量池。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://picx.zhimg.com/v2-f77a7fb3a9e00a8c8f50a3ddb464e725_r.jpg" data-original-token="v2-40e749ade17f6a8ab375b82d6c690b0f" data-rawheight="638" data-rawwidth="1088" data-size="normal" src="https://picx.zhimg.com/v2-f77a7fb3a9e00a8c8f50a3ddb464e725_b.jpg" width="1088"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://picx.zhimg.com/v2-f77a7fb3a9e00a8c8f50a3ddb464e725_b.jpg" data-caption="" data-original="https://picx.zhimg.com/v2-f77a7fb3a9e00a8c8f50a3ddb464e725_r.jpg" data-original-token="v2-40e749ade17f6a8ab375b82d6c690b0f" data-rawheight="638" data-rawwidth="1088" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1088' height='638'&gt;&lt;/svg&gt;" width="1088"/></figure><p class="ztext-empty-paragraph"><br/></p><h2 id="企业私域运营基础搭建"><a href="#企业私域运营基础搭建" class="headerlink" title="企业私域运营基础搭建"></a>企业私域运营基础搭建</h2><p data-pid="0g2B3hs_"><b>按照一般私域运营模式，主要分为三个部分：</b></p><p data-pid="sQ6lTpyl">①销售/服务前台：属于企业各部门中最贴近用户、最了解业务的一部分，要有承接规模化私域客户的能力、深度服务私域客户的专业度；</p><p data-pid="Hzvj7r0C">②市场/运营中台：主要职能应是提供前台的私域运营策略，解决前台提出的运营技能型问题。需要能熟练策划获客活动、输出内容SOP、客户群促活SOP等，对市面上的社群工具、裂变工具、SCRM工具要有充分的了解，持续为前台部门提供获客、留存、转化的方法论；</p><p data-pid="3kQ2JI-_">③技术/支持后台：能够快速响应中台部门的需求，将个性化的私域运营策略通过技术手段更高效的落地，实现营销自动化和数据化。一切的增长运营和私域运营，都是建立在数据分析的基础上。</p><h2 id="1、私域运营的全员策略"><a href="#1、私域运营的全员策略" class="headerlink" title="1、私域运营的全员策略"></a>1、私域运营的全员策略</h2><p data-pid="iq3RBsjM">做私域运营，最常用的方式，是进行用户的企业微信及社群沉淀。涉及到员工头像、昵称、企微朋友圈、绑定视频号、用户标签、用户路径追踪、用户跟进、话术库搭建、商品图册搭建等。</p><p data-pid="M9uCklVq">比如IP昵称的设定，要易记、业务相关、便于搜索、定位明确等；而企微头像要尽量避免LOGO化，可采用真实员工生活照或企业统一风格形象照；添加后的欢迎语要能清楚的传递企微号的定位和价值，以及如何破冰等等。</p><h2 id="2、私域运营的IP定位"><a href="#2、私域运营的IP定位" class="headerlink" title="2、私域运营的IP定位"></a>2、私域运营的IP定位</h2><p data-pid="tY2iIbG1"><b>一般企业的全员私域运营，可分为三种角色：</b></p><p data-pid="MFmyl072">①企业的首席用户福利官：主要以活动发布、福利推送的标准化服务为主，通过小程序、公众号、社群等一对一、一对多推送。</p><p data-pid="7sbbNVrE">②KOC型的种草型分享达人：丰富品牌触达场景，增强产品的社交讨论属性。</p><p data-pid="kwLy8x3E">③深耕本领域的行业专家：分享专业、权威的接地气干货内容做好全方位服务。</p><p data-pid="s6urle-o">以上三点其实包含了4个环节：<b>引流钩——引流中——引流转化——转化后服务</b>，都是以本行业为蓝本，可能不具有普适性。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pica.zhimg.com/v2-9438aff4fcb8da669f0044b4b408992c_r.jpg" data-original-token="v2-e512ce83ef669e858831b13a9e9b58a4" data-rawheight="544" data-rawwidth="879" data-size="normal" src="https://pica.zhimg.com/v2-9438aff4fcb8da669f0044b4b408992c_b.jpg" width="879"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pica.zhimg.com/v2-9438aff4fcb8da669f0044b4b408992c_b.jpg" data-caption="" data-original="https://pica.zhimg.com/v2-9438aff4fcb8da669f0044b4b408992c_r.jpg" data-original-token="v2-e512ce83ef669e858831b13a9e9b58a4" data-rawheight="544" data-rawwidth="879" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='879' height='544'&gt;&lt;/svg&gt;" width="879"/></figure><p class="ztext-empty-paragraph"><br/></p><h2 id="二、私域运营转化"><a href="#二、私域运营转化" class="headerlink" title="二、私域运营转化"></a>二、私域运营转化</h2><p data-pid="sEEpBBWY">大部分用户没有在私域内消费的习惯。当下用户购买的行为主路径依次是：<b>接受产品信息——产生购买需求——做出购买决策——下单付款</b>。而在私域流量中，就是如何做一个重度客户的运营，挖掘单客价值，建立客户信任的线上成交模式。这个过程中怎么突破信任感建立起关系对每一个做私域的项目操盘者来说是需要突破的。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic1.zhimg.com/v2-3e1b7a8a12f4872ba1f9ea5cb3308c16_r.jpg" data-original-token="v2-7a2285fb63b16dbca114915b0c5728ea" data-rawheight="608" data-rawwidth="1080" data-size="normal" src="https://pic1.zhimg.com/v2-3e1b7a8a12f4872ba1f9ea5cb3308c16_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic1.zhimg.com/v2-3e1b7a8a12f4872ba1f9ea5cb3308c16_b.jpg" data-caption="" data-original="https://pic1.zhimg.com/v2-3e1b7a8a12f4872ba1f9ea5cb3308c16_r.jpg" data-original-token="v2-7a2285fb63b16dbca114915b0c5728ea" data-rawheight="608" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='608'&gt;&lt;/svg&gt;" width="1080"/></figure><p class="ztext-empty-paragraph"><br/></p><h2 id="1-套用平台的优惠活动，促进新用户完成首单体验"><a href="#1-套用平台的优惠活动，促进新用户完成首单体验" class="headerlink" title="1. 套用平台的优惠活动，促进新用户完成首单体验"></a>1. 套用平台的优惠活动，促进新用户完成首单体验</h2><p data-pid="mf8XzOpr">我们可以让用户完整的体验到我们私域的购买路径，让用户体验到产品购买的Aha时刻。而我们要如何撬动用户完成私域的第一单，主要还是基于私域的人设去打造。从添加用户那刻起，一定要让用户知道我们是真实存在的人，需要让用户知道我们是干什么的，能给他带来什么样的价值，解决什么问题，这一点也是私域操盘手必须要去解决的问题。怎么样能够让用户在最短的时间内和我们建立关系达成信任。</p><p data-pid="BCB5csuk">接下来套用做平台的方式，比如9.9元包邮、1元购、限时秒杀、发新人券、三人拼团、买一赠一等通过补贴的方式，只针对新用户去让他们完成首单体验，尽量在三天之内完成，或者更短的周期内完成。</p><h2 id="2-做闪群、做直播、做朋友圈活动"><a href="#2-做闪群、做直播、做朋友圈活动" class="headerlink" title="2. 做闪群、做直播、做朋友圈活动"></a>2. 做闪群、做直播、做朋友圈活动</h2><p data-pid="AE4FrTLn">也可以通过做闪群、做直播，做朋友圈活动来去把首单尽快完成掉，这里需要操盘手能够有一套完整的新人转化策略。成交场景尽可能使用小程序商城或者H5商城去做首单转化，现在微信也有自己的商城让用户能够完成微信购物的首次体验。需要注意的一点是 私域的首单一定要有特权感和差异化，简单的说就是让用户要买到我在平台店铺里买不到的商品或者是权益。这样用户加到我们的私域当中才有意义和价值，在完成首单转化之后你也会拿到这个用户的基本信息数据，就可以在接下来做一些定制化的服务和推送了。</p><p data-pid="YCqn0nkm">操盘手需要看你设定的新人首单的活动机制和玩法是否能够真正的吸引用户完成首单了， 我们需要检测新用户下单率和补贴成本核算，要做的就是要把控新人首单转化的活动效果，来不断的做优化和调整。在私域这个场景里面，有哪些可以持久转化的策略和手段。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pica.zhimg.com/v2-4b2261bfd369e299cef02ec8440b361a_r.jpg" data-original-token="v2-840ab4f27c75ca7d34043660621e425c" data-rawheight="576" data-rawwidth="1080" data-size="normal" src="https://pica.zhimg.com/v2-4b2261bfd369e299cef02ec8440b361a_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pica.zhimg.com/v2-4b2261bfd369e299cef02ec8440b361a_b.jpg" data-caption="" data-original="https://pica.zhimg.com/v2-4b2261bfd369e299cef02ec8440b361a_r.jpg" data-original-token="v2-840ab4f27c75ca7d34043660621e425c" data-rawheight="576" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='576'&gt;&lt;/svg&gt;" width="1080"/></figure><p class="ztext-empty-paragraph"><br/></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p data-pid="D6HQ3OpN">其实对大部分企业来说，做私域运营挺难的，难的不是团队的搭建、不是引流策略的实施，而是整个企业从上至下需要意识到它很重要，并付诸强大的执行力去落实。</p><h4 id="文章详细url-https-api-zhihu-com-answers-3212177845"><a href="#文章详细url-https-api-zhihu-com-answers-3212177845" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3212177845"></a>文章详细url:<a href="https://api.zhihu.com/answers/3212177845">https://api.zhihu.com/answers/3212177845</a></h4><h2 id="企业为什么要深耕私域流量池？"><a href="#企业为什么要深耕私域流量池？" class="headerlink" title="企业为什么要深耕私域流量池？"></a>企业为什么要深耕私域流量池？</h2><h3 id="内容-7"><a href="#内容-7" class="headerlink" title="内容"></a>内容</h3><p data-pid="30EJix01">原因主要有以下几点：</p><p data-pid="bNeNCuUL"><b>1.增强品牌影响力：</b>通过在私域流量池中与用户建立紧密联系，企业可以更好地传递品牌价值，增强用户对品牌的认知和信任。同时，私域流量池可以为企业提供更直接的市场反馈，帮助企业更好地了解用户需求和反馈，进而优化产品和服务。</p><p data-pid="OrFJFEjY"><b>2.降低获客成本：</b>私域流量池中的用户是企业通过各种渠道获取并经过筛选的潜在客户，这些用户对企业产品或服务有较高的兴趣和需求。与在公域流量中通过广告投放等方式获取新客户相比，深耕私域流量池可以降低获客成本，提高营销效率。</p><p data-pid="eiFRl0OF"><b>3.提高用户粘性和复购率：</b>通过在私域流量池中与用户建立长期、稳定的关系，企业可以更好地了解用户需求和偏好，为用户提供更个性化的服务和体验。这有助于提高用户粘性和复购率，同时也有助于提升用户满意度和口碑。</p><p data-pid="KVKX8rlm"><b>4.优化用户全生命周期管理：</b>私域流量池可以帮助企业优化用户全生命周期管理，包括用户的引入、培育、转化、复购等环节。通过在私域流量池中与用户进行互动和沟通，企业可以更好地了解用户需求和反馈，进而优化产品和服务，提高用户满意度和忠诚度。</p><p data-pid="SBWCz9uY"><b>5.提升企业运营效率：</b>通过深耕私域流量池，企业可以更好地了解用户需求和反馈，优化产品和服务，提高运营效率。同时，私域流量池可以帮助企业更好地掌握市场趋势和变化，及时调整经营策略和产品定位，提高企业的竞争力和适应性。</p><p data-pid="wFvUmBSC">私域流量是近几年非常火的概念，简单来讲就是直接接触客户，运营客户，积累客户群，也就是私域流量，常见的有社群运营、会员运营等。</p><p data-pid="6-0l0AYC">而私域流量的作用，或者说私域流量多的优势，其实都是相对<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">公域流量</a>来说的。近几年的公域流量成本越来越高，转化率欠佳等原因，让品牌方开始聚焦私域流量。</p><p data-pid="nY0MGAYR">简单来讲，私域流量不仅影响成本更低，还可以直接触达消费者，有助于企业分析消费者的相关数据，再反哺企业的产品开发、优化和公司的各种决策，是一个一举多得的事情。</p><p data-pid="bsTXimoW">这篇回答和大家详细讨论一下：</p><ol><li data-pid="PwuyV8bh"><b>私域流量是什么？</b></li><li data-pid="7X47GcLk"><b>私域流量有什么优势？</b></li><li data-pid="lYeXp8xz"><b>私域流量怎么运营？</b></li><li data-pid="MmHLVu1W"><b>私域流量相关案例</b></li></ol><h2 id="1-私域流量是什么？"><a href="#1-私域流量是什么？" class="headerlink" title="1.私域流量是什么？"></a><strong>1.私域流量是什么？</strong></h2><p data-pid="4N1nQjcV">私域流量可被定义为沉淀在品牌或个人渠道的，可随时及反复触达的，能实现一对一精准运营的用户流量。私域流量营销指通过引流用户到私域、满足用户需求、运营用户关系以实现产品或服务交付与品牌收益增厚的组织功能或手段。</p><p data-pid="SA7ZL35W"><b>私域流量一般是指品牌、商家或者个人所拥有，客户可以持续多次被使用的流量。与之对立的，是公域流量，公域流量一般是指在类似于<a class="internal" href="https://www.zhihu.com/search?q=%E7%99%BE%E5%BA%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">百度</a>、天猫、头条等流量聚合平台下，平台通过算法，以及你通过购买，或者是 SEO 优化等运营手段而获得平台分配给你的访问流量。</b></p><p data-pid="PhZnion4"><b>私域流量一般来说是有载体的，</b>我们常见的个人的微信号，QQ 群，微信群、企业的微信公众号、服务号，抖音，微博号，都是私域流量的载体。</p><p data-pid="Ehe8cr_7">当用户加了你的好友，进入到你的社群内，关注了你的公众号，服务号，抖音微博，相当于进入到了你的载体内，当用户达到一定的基数，产生了流量，有了变现的可能，这种流量就叫做私域流量。</p><h2 id="2-私域流量有什么优势？"><a href="#2-私域流量有什么优势？" class="headerlink" title="2.私域流量有什么优势？"></a><strong>2.私域流量有什么优势？</strong></h2><ul><li data-pid="vuUHpEhO"><b>性价比高：</b>向这些用户展示，推荐信息，是不需要额外付费的。</li><li data-pid="x9M-axQH"><b>持续性强：</b>只要用户不离开，你可以持续的向用户来推荐，展示信息。</li><li data-pid="y4aqjISl"><b><a class="internal" href="https://www.zhihu.com/search?q=%E5%8F%8C%E5%90%91%E4%BA%A4%E6%B5%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">双向交流</a>：</b>这种流量是可以互动沟通的，你与用户之间的关系，是<a class="internal" href="https://www.zhihu.com/search?q=%E5%B9%B3%E6%9D%83%E5%85%B3%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">平权关系</a>。</li><li data-pid="TL_LYpJe"><b>稳定性强：</b>用户用完不走，仍然还会在你的平台内。</li></ul><h2 id="3-私域流量怎么运营？"><a href="#3-私域流量怎么运营？" class="headerlink" title="3.私域流量怎么运营？"></a><strong>3.私域流量怎么运营？</strong></h2><p data-pid="5VMRk0eR"><b>大家可以看看这篇文章：<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/digital-growth/growth-strategy/53932.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">私域流量运营的几种方式</a></b></p><p data-pid="fr8aEFIy"><b>这里简单提一下私域流量运营的打法，感兴趣的朋友可以点击链接阅读原文。</b></p><h3 id="（1）第一招：直播-社群-小程序-私域流量"><a href="#（1）第一招：直播-社群-小程序-私域流量" class="headerlink" title="（1）第一招：直播+社群+小程序+私域流量"></a><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/social-commerce/53828.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">（1）第一招：直播+社群+小程序+私域流量</a></h3><p data-pid="80P0kBx0">从疫情爆发到现在，很多<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/digital-growth/growth-strategy/58591.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">零售实体商家加速入局线上私域电商</a>，通过线上的<a class="internal" href="https://www.zhihu.com/search?q=%E7%9B%B4%E6%92%AD%E7%94%B5%E5%95%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">直播电商</a>和社群营销带动线下门店，提升门店客流和销售，几乎成为了实体企业谋求增长的刚需。</p><p data-pid="etE8EUfa">“直播+小程序+社群+私域门店”组合成为当下运用最多的打法，这几乎成为零售行业的标配。</p><h3 id="（2）第二招：直播-社群-微商城-小程序打法"><a href="#（2）第二招：直播-社群-微商城-小程序打法" class="headerlink" title="（2）第二招：直播+社群&#x2F;微商城&#x2F;小程序打法"></a><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/social-commerce/53828.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">（2）第二招：直播+社群&#x2F;微商城&#x2F;小程序打法</a></h3><p data-pid="3tzciT1c">将直播变成获取流量、促进购买转化的重要工具，直播间的观众、产生购买的顾客则沉淀到社群/微商城/小程序中去，将这些玩法变成私域流量运营的重要动作，这些动作将直接影响到下一次直播的效果。</p><p data-pid="DJCUM7cz">如企业可通过门店推广、导购员推广等方式为直播间引流，在直播间可以推送给顾客微信群二维码，吸引直播间粉丝关注，沉淀出私域流量，平时通过拼团、秒杀等社群活动促进活跃和购买转化。</p><h3 id="（3）第三招：三大主流“直播”模式打法"><a href="#（3）第三招：三大主流“直播”模式打法" class="headerlink" title="（3）第三招：三大主流“直播”模式打法"></a><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/social-commerce/53828.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">（3）第三招：三大主流“直播”模式打法</a></h3><h3 id="模式一：通过直播门户平台"><a href="#模式一：通过直播门户平台" class="headerlink" title="模式一：通过直播门户平台"></a><strong>模式一：通过直播门户平台</strong></h3><p data-pid="1RJ8rkJN">载体如快手、抖音、西瓜、火山等，短视频主流直播平台。</p><p data-pid="qSQ6gIug"><b>利用KOL/KOC网红在主流直播平台的自带流量，以直播形式引导消费者到京东、天猫、苏宁等电商渠道完成购买</b>，需要品牌方同时在电商渠道配合做效果类促销，物流配送也走电商渠道平台通道。</p><p data-pid="0tJhhZaR">或者由主播团队在直播界面上架商品，并引导消费者至平台内嵌电商页面（类似淘宝店商家购买界面）完成购买，但需由商家自己或代运营服务商完成物流配送，更类似淘宝商家售货模式。</p><h3 id="模式二：通过电商平台的直播板块"><a href="#模式二：通过电商平台的直播板块" class="headerlink" title="模式二：通过电商平台的直播板块"></a><strong>模式二：通过电商平台的直播板块</strong></h3><p data-pid="eIV8-ACa">载体如京东、天猫、苏宁等电商平台的内建直播板块。</p><p data-pid="_aXPASE9">邀请KOL/KOC网红，或由品牌负责直播营销的同事，进驻品牌在电商平台上开设的旗舰店、线上商铺的直播间，以导购直播的形式引导消费者完成购买，品牌方同时在直播间内配合上架效果类促销活动，最终通过电商平台完成后续物流配送。</p><h3 id="模式三：通过微信小程序直播功能"><a href="#模式三：通过微信小程序直播功能" class="headerlink" title="模式三：通过微信小程序直播功能"></a><strong>模式三：通过微信小程序直播功能</strong></h3><p data-pid="wCfTLpOc">载体如自建微信小程序。</p><p data-pid="mEG6u_Y8">依托微信生态，结合公众号推文、微信群、朋友圈、朋友圈广告等导入品牌自建微信小程序，邀请KOL/KOC网红，或由品牌负责直播营销的同事，<b>利用<a class="internal" href="https://www.zhihu.com/search?q=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B4%E6%92%AD&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">小程序直播</a>功能，以导购直播的形式引导消费者购买，品牌方往往在小程序直播间配合上架效果类促销活动，</b>消费者通过小程序构建的微商页面完成交易，最终由品牌商家自己或代运营服务商完成物流配送。</p><p data-pid="4FZSvdpI">由于疫情令品牌的营销工作由线下转为线上，可以预期2020年下半年，大量品牌商家在增长压力下，营销预算不可避免将在线上通路扎堆儿释放，也势必导致公域流量获客愈加昂贵，基于品牌自身私域流量池资源就势在必行。</p><h3 id="（4）第四招：企业微信-小程序-直播-社群"><a href="#（4）第四招：企业微信-小程序-直播-社群" class="headerlink" title="（4）第四招：企业微信+小程序+直播+社群"></a><strong>（4）第四招：企业微信+小程序+直播+社群</strong></h3><h3 id="（5）第五招：企业微信-不同人设组合"><a href="#（5）第五招：企业微信-不同人设组合" class="headerlink" title="（5）第五招：企业微信+不同人设组合"></a><strong>（5）第五招：企业微信+不同人设组合</strong></h3><h3 id="（6）第六招：微信广告引流直接添加企业微信导购"><a href="#（6）第六招：微信广告引流直接添加企业微信导购" class="headerlink" title="（6）第六招：微信广告引流直接添加企业微信导购"></a><strong>（6）第六招：微信广告引流直接添加企业微信导购</strong></h3><h3 id="（7）第七招：社群运营-私域流量新打法"><a href="#（7）第七招：社群运营-私域流量新打法" class="headerlink" title="（7）第七招：社群运营+私域流量新打法"></a><strong>（7）第七招：社群运营+私域流量新打法</strong></h3><p data-pid="sorITuPu"><b>因篇幅过长，感兴趣的朋友可以点击链接阅读原文：</b></p><p data-pid="cu6N3RhD"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/social-commerce/53828.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">创新实践 | 我们梳理出最新的7种私域流量打法</a></b></p><h2 id="4-私域流量相关案例"><a href="#4-私域流量相关案例" class="headerlink" title="4.私域流量相关案例"></a><strong>4.私域流量相关案例</strong></h2><h3 id="（1）案例一：喜茶会员DTC如何积累3500万私域流量实现弯道超车？"><a href="#（1）案例一：喜茶会员DTC如何积累3500万私域流量实现弯道超车？" class="headerlink" title="（1）案例一：喜茶会员DTC如何积累3500万私域流量实现弯道超车？"></a><strong>（1）案例一：<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/corporate-innovation/innovation/55706.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">喜茶会员DTC如何积累3500万私域流量实现弯道超车？</a></strong></h3><p data-pid="Ou6COmaO">传统的商业思维似乎无法解释喜茶的胜利。在一众各有千秋的同行者之中，喜茶凭什么更受资本关注？其一是喜茶会员DTC的数字化营销已成为茶饮行业的兵家必争之地。其二则是产品的竞争，已渐渐趋于<a class="internal" href="https://www.zhihu.com/search?q=%E4%BE%9B%E5%BA%94%E9%93%BE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">供应链</a>数字化程度的竞争。另一方面，流量越来越贵已是必然的趋势，自建私域流量池是喜茶会员DTC必然的未来。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic4.zhimg.com/v2-191ef6a214f83c4a397f0ead7c362b29_r.jpg" data-original-token="v2-191ef6a214f83c4a397f0ead7c362b29" data-rawheight="444" data-rawwidth="800" data-size="normal" src="https://pic4.zhimg.com/v2-191ef6a214f83c4a397f0ead7c362b29_b.jpg" width="800"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-191ef6a214f83c4a397f0ead7c362b29_b.jpg" data-caption="" data-original="https://pic4.zhimg.com/v2-191ef6a214f83c4a397f0ead7c362b29_r.jpg" data-original-token="v2-191ef6a214f83c4a397f0ead7c362b29" data-rawheight="444" data-rawwidth="800" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='800' height='444'&gt;&lt;/svg&gt;" width="800"/></figure><h3 id="（2）案例二：私域流量运营-积累4200万私域会员，“孩子王”们的「运营打法」值得借鉴"><a href="#（2）案例二：私域流量运营-积累4200万私域会员，“孩子王”们的「运营打法」值得借鉴" class="headerlink" title="（2）案例二：私域流量运营 | 积累4200万私域会员，“孩子王”们的「运营打法」值得借鉴"></a><strong>（2）案例二：<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/122458.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">私域流量运营 | 积累4200万私域会员，“孩子王”们的「运营打法」值得借鉴</a></strong></h3><p data-pid="0IzWMSWx">进入“<a class="internal" href="https://www.zhihu.com/search?q=%E7%95%99%E9%87%8F%E6%97%B6%E4%BB%A3&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">留量时代</a>”以后，企业增长越来越难，拉新成本也越来越高。 “现在的<a class="internal" href="https://www.zhihu.com/search?q=%E6%8B%89%E6%96%B0%E6%88%90%E6%9C%AC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">拉新成本</a>，已经达到 20 年的 3 倍以上。” 如何做好私域流量运营“，挖掘“留量用户剩余价值”，成为每一个企业都在思考的问题。 那些「 <a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E4%BC%9A%E5%91%98%E8%BF%90%E8%90%A5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">私域会员运营</a> 」做得好的品牌，大多在「留量时代」过得风生水起，甚至成为行业头部……今天这篇文章就来谈谈，在「留量时代」，企业如何做「私域会员运营」？</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic3.zhimg.com/v2-a85870f4f9272502d6fc7895f8595f1e_r.jpg" data-original-token="v2-a85870f4f9272502d6fc7895f8595f1e" data-rawheight="510" data-rawwidth="1024" data-size="normal" src="https://pic3.zhimg.com/v2-a85870f4f9272502d6fc7895f8595f1e_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-a85870f4f9272502d6fc7895f8595f1e_b.jpg" data-caption="" data-original="https://pic3.zhimg.com/v2-a85870f4f9272502d6fc7895f8595f1e_r.jpg" data-original-token="v2-a85870f4f9272502d6fc7895f8595f1e" data-rawheight="510" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='510'&gt;&lt;/svg&gt;" width="1024"/></figure><h3 id="（3）案例三：创新案例｜从社媒引流到私域复购的完美日记增长8个月实现50倍"><a href="#（3）案例三：创新案例｜从社媒引流到私域复购的完美日记增长8个月实现50倍" class="headerlink" title="（3）案例三：创新案例｜从社媒引流到私域复购的完美日记增长8个月实现50倍"></a><strong>（3）案例三：<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/industries/consumer/50080.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">创新案例｜从社媒引流到私域复购的完美日记增长8个月实现50倍</a></strong></h3><p data-pid="6KSpYg-c">完美日记增长有多疯狂？8个月实现50倍销量增长，超过兰蔻、YSL等国际大牌。本文高度提炼完美日记增长 的关键两点：垂直社群KOL投放+私域流量精细化运营提升<a class="internal" href="https://www.zhihu.com/search?q=%E5%A4%8D%E8%B4%AD%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2896766147%7D">复购率</a>。这一切都是完美日记对DTC（direct-to-consumer）的运用……</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic4.zhimg.com/v2-23b5f2f8bf09f32a4b8266f1c5ddec57_r.jpg" data-original-token="v2-23b5f2f8bf09f32a4b8266f1c5ddec57" data-rawheight="512" data-rawwidth="1024" data-size="normal" src="https://pic4.zhimg.com/v2-23b5f2f8bf09f32a4b8266f1c5ddec57_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-23b5f2f8bf09f32a4b8266f1c5ddec57_b.jpg" data-caption="" data-original="https://pic4.zhimg.com/v2-23b5f2f8bf09f32a4b8266f1c5ddec57_r.jpg" data-original-token="v2-23b5f2f8bf09f32a4b8266f1c5ddec57" data-rawheight="512" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='512'&gt;&lt;/svg&gt;" width="1024"/></figure><h3 id="（4）案例四：创新案例｜中国DTC品牌瑞幸咖啡绝境重生逆势增长的三大运营策略"><a href="#（4）案例四：创新案例｜中国DTC品牌瑞幸咖啡绝境重生逆势增长的三大运营策略" class="headerlink" title="（4）案例四：创新案例｜中国DTC品牌瑞幸咖啡绝境重生逆势增长的三大运营策略"></a>（4）案例四：<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/171139.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">创新案例｜中国DTC品牌瑞幸咖啡绝境重生逆势增长的三大运营策略</a></h3><p data-pid="GkF89K2V">瑞幸咖啡仅用短短18个月时间从品牌创立到纳斯达克上市，刷新全球最快上市记录。2020年因交易造假事件被勒令退市股价暴跌80%，有人说这个创造了赴美IPO奇迹的“巨婴”将是下一个倒下的ofo。2022年瑞幸咖啡以逆势超速增长领跑咖啡赛道有力回应了市场的质疑，其浴火重生经历堪称中国商业史又一个奇迹，那么究竟发生了什么让瑞幸绝境重生？</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic2.zhimg.com/v2-c74b31f9334b350609b8bc58e8ff329b_r.jpg" data-original-token="v2-c74b31f9334b350609b8bc58e8ff329b" data-rawheight="599" data-rawwidth="1024" data-size="normal" src="https://pic2.zhimg.com/v2-c74b31f9334b350609b8bc58e8ff329b_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-c74b31f9334b350609b8bc58e8ff329b_b.jpg" data-caption="" data-original="https://pic2.zhimg.com/v2-c74b31f9334b350609b8bc58e8ff329b_r.jpg" data-original-token="v2-c74b31f9334b350609b8bc58e8ff329b" data-rawheight="599" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='599'&gt;&lt;/svg&gt;" width="1024"/></figure><h3 id="（5）案例五：创新案例-｜拆解估值1000亿元气森林DTC的3大创新营销策略"><a href="#（5）案例五：创新案例-｜拆解估值1000亿元气森林DTC的3大创新营销策略" class="headerlink" title="（5）案例五：创新案例 ｜拆解估值1000亿元气森林DTC的3大创新营销策略"></a>（5）案例五：<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/omnichannel/95013.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">创新案例 ｜拆解估值1000亿元气森林DTC的3大创新营销策略</a></h3><p data-pid="7uYNMpt3">元气森林渠道创新，以明星单品+线上营销实现快速突破，产品验证后，通过品类扩充和线下渠道推广，网格化实现规模化增长。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic4.zhimg.com/v2-5980a53a79c0271af8e91f8ef6236201_r.jpg" data-original-token="v2-5980a53a79c0271af8e91f8ef6236201" data-rawheight="756" data-rawwidth="1000" data-size="normal" src="https://pic4.zhimg.com/v2-5980a53a79c0271af8e91f8ef6236201_b.jpg" width="1000"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-5980a53a79c0271af8e91f8ef6236201_b.jpg" data-caption="" data-original="https://pic4.zhimg.com/v2-5980a53a79c0271af8e91f8ef6236201_r.jpg" data-original-token="v2-5980a53a79c0271af8e91f8ef6236201" data-rawheight="756" data-rawwidth="1000" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1000' height='756'&gt;&lt;/svg&gt;" width="1000"/></figure><h2 id="5-扩展阅读"><a href="#5-扩展阅读" class="headerlink" title="5.扩展阅读"></a>5.扩展阅读</h2><p data-pid="aPpJh_PC"><b>（1）<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/growth-marketing/103047.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">创新研报 | 从“试水”变为“必要”选择——后疫情时代的私域流量营销</a></b></p><p data-pid="XCV0h4gc">在疫情时代，线下流量锐减，企业数字化转型的意愿进一步加强，并且数字化工具也不断升级迭代。 私域流量营销 作为红利趋缓、预算优化及精细运营下的营销选择，成为市场营销新风口。波士顿咨询的研究显示,2020年微信小程序日活用户突破4亿,小程序商品交易成交金额(GMV)同比增长达115%。各项数据显示,经营者利用私域流量进行品牌营销已具备现实基础，而私域流量确实已成为当下<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/growth-hacking%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">最受追捧的营销</a>模式之一。</p><p data-pid="ghfJ_rt-">这份《2021年中国私域流量营销洞察研究报告》由艾瑞咨询出品，从发展背景，品牌主洞察，产业链分析，趋势展望四个方面分析中国私域流量营销，以期对市场认知提供一定参考，对有需求进行私域流量布局的企业提供指导。</p><p data-pid="5FzVuUbL"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/growth-marketing/103047.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">点击阅读全文</a></b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-b409ece1029c6979058ceb7d50a7b18c_b.jpg" data-original="https://pic4.zhimg.com/v2-e737753b85908ba207c9887695c3ef37_r.jpg" data-original-token="v2-dfd754bf1651577d79cb0c236ce0dbde" data-rawheight="512" data-rawwidth="1024" data-size="normal" src="https://pic4.zhimg.com/v2-e737753b85908ba207c9887695c3ef37_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-e737753b85908ba207c9887695c3ef37_b.jpg" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-b409ece1029c6979058ceb7d50a7b18c_b.jpg" data-original="https://pic4.zhimg.com/v2-e737753b85908ba207c9887695c3ef37_r.jpg" data-original-token="v2-dfd754bf1651577d79cb0c236ce0dbde" data-rawheight="512" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='512'&gt;&lt;/svg&gt;" width="1024"/></figure><p data-pid="iVwVocfI"><b>（2）<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/97490.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">中国私域流量营销洞察研究</a></b></p><p data-pid="D45uxdzc">DTC模式的兴起和新冠疫情对数字化转型的推动了 私域流量 营销发展，私域数据融合打通后将成为企业数字化建设的重要资产。</p><p data-pid="0Qn4vxjg">未来私域流量将会有渠道一体化，营销场景化和运营智能化的趋势。流量红利增长趋缓，公域平台用户维护及获取成本升高，dtc 模式兴起，营销媒介与销售渠道走向统一。</p><p data-pid="XFh6xEC5"><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/97490.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">私域营销</a>基于强信任感与强链接性，内容将成为增长新引擎。 私域流量 营销的核心角色是技术服务商，其涉猎服务场景丰富，覆盖功能广泛。私域建站服务商收入规模稳增，私域渠道变现潜力可观。</p><p data-pid="wiyuSVvD"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/97490.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">点击阅读全文</a></b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://picx.zhimg.com/v2-c25738e22a5851c3a2c4632f77eda573_b.jpg" data-original="https://pic4.zhimg.com/v2-d723ad2f56cd5f8547ebb0102878143b_r.jpg" data-original-token="v2-ab2690e607dadcd25dc64623d2f4675f" data-rawheight="512" data-rawwidth="1024" data-size="normal" src="https://pic4.zhimg.com/v2-d723ad2f56cd5f8547ebb0102878143b_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-d723ad2f56cd5f8547ebb0102878143b_b.jpg" data-caption="" data-default-watermark-src="https://picx.zhimg.com/v2-c25738e22a5851c3a2c4632f77eda573_b.jpg" data-original="https://pic4.zhimg.com/v2-d723ad2f56cd5f8547ebb0102878143b_r.jpg" data-original-token="v2-ab2690e607dadcd25dc64623d2f4675f" data-rawheight="512" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='512'&gt;&lt;/svg&gt;" width="1024"/></figure><p data-pid="b1zliDSn"><b>（3）<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/digital-growth/growth-strategy/44130.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">深度干货丨私域流量是什么？ 私域流量打造的四大底层方法</a></b></p><p data-pid="I3sJsxyb">近些年私域流量这个话题突然火爆起来。很多企业言必提私域流量，分析原因，主要是因为公域流量的成本越来越高。易观数据显示，从2014 年之前，阿里获客成本不超过 30 元/人，到2018年，阿里京东的获客成本迅速攀升至超过300元/人。</p><p data-pid="tm6D_0Uu">在外部流量成本不断升高，运营难度不断加大的情况下，不论是电商平台，还是企业都开始关注起私域流量这个话题，今天笔者就和大家讨论一下，关于私域流量的一些问题，和底层的运营逻辑。</p><p data-pid="NodJUNJg"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/digital-growth/growth-strategy/44130.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">点击阅读全文</a></b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic4.zhimg.com/v2-587fa8a2c2e71c4998b2cccea2d2ce23_b.jpg" data-original="https://pica.zhimg.com/v2-e2af9efcf093838364ebe260160c8bcc_r.jpg" data-original-token="v2-ba67c95ae6e75a247a7bbe4ba0792bdc" data-rawheight="676" data-rawwidth="1024" data-size="normal" src="https://pica.zhimg.com/v2-e2af9efcf093838364ebe260160c8bcc_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pica.zhimg.com/v2-e2af9efcf093838364ebe260160c8bcc_b.jpg" data-caption="" data-default-watermark-src="https://pic4.zhimg.com/v2-587fa8a2c2e71c4998b2cccea2d2ce23_b.jpg" data-original="https://pica.zhimg.com/v2-e2af9efcf093838364ebe260160c8bcc_r.jpg" data-original-token="v2-ba67c95ae6e75a247a7bbe4ba0792bdc" data-rawheight="676" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='676'&gt;&lt;/svg&gt;" width="1024"/></figure><p data-pid="8SC5-_p_"><b>（4）<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/175160.html%3Fsource%3Dzh2023" rel="nofollow noreferrer" target="_blank">创新趋势｜2023中国消费品行业渠道数字化转型洞察</a></b></p><p data-pid="Iklf2ull">不论是“百年变局”、“新零售DTC”，还是“最理性‘双十一’”，近年来有关消费品行业的各色叙述都在传递一个信息——中国消费品行业正经历新一轮市场考验与行业变革。在此背景下，消费品行业的渠道数字化转型成为突围关键。</p><p data-pid="zpMxrjH2">消费品行业的渠道数字化转型，背后是渠道模式的演进。品牌方角力重心从过去增量市场下的商品与供应链能力比拼，转向存量市场下如何更精准理解和把握市场需求。 因此，品牌方、经销商与消费者之间的价值链条发生重构，呈现出渠道数字化转型的三条变化主线：渠道模式之变，触点打法之变，渠道运营之变。</p><p data-pid="AQttcPXI"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/175160.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">点击阅读全文</a></b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-abd6f22d0005a6ac9ef2eb786fcfd0e0_b.jpg" data-original="https://pic1.zhimg.com/v2-4ce9d11e66670f86f7fac49b393cf7a4_r.jpg" data-original-token="v2-fbfd9ccd6e9937675aa0f05e217093f1" data-rawheight="567" data-rawwidth="1024" data-size="normal" src="https://pic1.zhimg.com/v2-4ce9d11e66670f86f7fac49b393cf7a4_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic1.zhimg.com/v2-4ce9d11e66670f86f7fac49b393cf7a4_b.jpg" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-abd6f22d0005a6ac9ef2eb786fcfd0e0_b.jpg" data-original="https://pic1.zhimg.com/v2-4ce9d11e66670f86f7fac49b393cf7a4_r.jpg" data-original-token="v2-fbfd9ccd6e9937675aa0f05e217093f1" data-rawheight="567" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='567'&gt;&lt;/svg&gt;" width="1024"/></figure><p data-pid="mkieqnMl"><b>（5）<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/135518.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">私域增长 | 私域会员：9大连锁行业15个案例集锦</a></b></p><p data-pid="FMHZPMeB">在见实刚刚发布的“会员×私域”主题白皮书中收录了<b>9</b>大连锁行业<b>26</b>个<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/corporate-innovation/93518.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">私域会员</a>案例。这些案例涉及的9大行业分别为：餐饮、美妆、珠宝、鞋服、商超百货、零售、母婴、酒店、茶饮。笔者在白皮书撰写过程中对这些案例进行了一一梳理，也是基于再消化的过程，才有了后来白皮书的定调——<b>“会员运营某种程度等同于<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/corporate-innovation/innovation/55706.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">私域运营</a>”。</b></p><p data-pid="Wjy3opaQ"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/135518.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">点击阅读全文</a></b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic4.zhimg.com/v2-ce48bff59fc94bc77382bb1c143c8db1_b.jpg" data-original="https://pic4.zhimg.com/v2-0c5f2ea8e5673fa5b67367ee332aa2b9_r.jpg" data-original-token="v2-ed062d0a4cda7ef6c644d6b66d0536de" data-rawheight="511" data-rawwidth="1024" data-size="normal" src="https://pic4.zhimg.com/v2-0c5f2ea8e5673fa5b67367ee332aa2b9_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-0c5f2ea8e5673fa5b67367ee332aa2b9_b.jpg" data-caption="" data-default-watermark-src="https://pic4.zhimg.com/v2-ce48bff59fc94bc77382bb1c143c8db1_b.jpg" data-original="https://pic4.zhimg.com/v2-0c5f2ea8e5673fa5b67367ee332aa2b9_r.jpg" data-original-token="v2-ed062d0a4cda7ef6c644d6b66d0536de" data-rawheight="511" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='511'&gt;&lt;/svg&gt;" width="1024"/></figure><p data-pid="WJfOH6if"><b>（6）<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/digital-growth/129631.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">私域裂变｜让人又爱又恨的用户增长法</a></b></p><p data-pid="YAvpuiha">私域流量的用户规模是各品牌企业投入私域运营时最关注的目标之一，除了上次文章分享的私域引流之外，另一种提升私域用户规模的方式便是私域裂变。但是，私域裂变也是让人又爱又恨！</p><p data-pid="sfTimq0Q">一方面，私域裂变活动能够充分利用私域存量用户的分享价值，利用用户的社交关系链获取新用户，高效提升私域用户规模，是必要的私域运营模块。 </p><p data-pid="RwGGe6kE">另一方面，私域裂变活动是对用户信任关系和社交关系的消耗，拉新增长效果具有限制，ROI逐渐降低，并且易导致负面的用户体验。 正视私域裂变是做好裂变的前提，不盲目推崇，也不无视放弃，用好私域裂变对私域运营仍大有裨益。本文是私域流量系列文章第3篇，和你分享私域裂变的运营心法。</p><p data-pid="35RalFa_"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/digital-growth/129631.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">点击阅读全文</a></b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-6c22402bc4f3bc8cc0cf33363a0cbe68_b.jpg" data-original="https://pic3.zhimg.com/v2-bfa04389bb9f5303aef617b7af90797c_r.jpg" data-original-token="v2-d7fe2440b7b29e07ea65ef66059a8f58" data-rawheight="510" data-rawwidth="1024" data-size="normal" src="https://pic3.zhimg.com/v2-bfa04389bb9f5303aef617b7af90797c_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-bfa04389bb9f5303aef617b7af90797c_b.jpg" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-6c22402bc4f3bc8cc0cf33363a0cbe68_b.jpg" data-original="https://pic3.zhimg.com/v2-bfa04389bb9f5303aef617b7af90797c_r.jpg" data-original-token="v2-d7fe2440b7b29e07ea65ef66059a8f58" data-rawheight="510" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='510'&gt;&lt;/svg&gt;" width="1024"/></figure><p data-pid="tXUZBnCv"><b>（7）<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/growth-marketing/131093.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">趋势策略｜2022私域拉新增长的5大SEO优化策略</a></b></p><p data-pid="Mu7Dc0xA">2022私域拉新获客成本持续攀升，最经典的有机获客增长打法SEO优化被重新获得空前的重视和更高的优先级，无论是B2B自建网站还是DTC自营电商，越来越需要精准持续的引流获客。搜索引擎优化SEO趋势每年都在变化，私域增长运营必须自我更新才能不断跟上。</p><p data-pid="BhJsDJbO">本文就是您在寻找2023年要遵循的正确搜索引擎优化趋势策略！</p><p data-pid="UAjz5tBx"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/dtc/growth-marketing/131093.html%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">点击阅读全文</a></b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pica.zhimg.com/v2-d4c75753c731e548f9b89b0e79f502ea_b.jpg" data-original="https://pic4.zhimg.com/v2-838d86fff91275e846adb2d828db9cb5_r.jpg" data-original-token="v2-ca28cdcad69869478aa5a3bcff76ff2e" data-rawheight="585" data-rawwidth="1024" data-size="normal" src="https://pic4.zhimg.com/v2-838d86fff91275e846adb2d828db9cb5_b.jpg" width="1024"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-838d86fff91275e846adb2d828db9cb5_b.jpg" data-caption="" data-default-watermark-src="https://pica.zhimg.com/v2-d4c75753c731e548f9b89b0e79f502ea_b.jpg" data-original="https://pic4.zhimg.com/v2-838d86fff91275e846adb2d828db9cb5_r.jpg" data-original-token="v2-ca28cdcad69869478aa5a3bcff76ff2e" data-rawheight="585" data-rawwidth="1024" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1024' height='585'&gt;&lt;/svg&gt;" width="1024"/></figure><p data-pid="dF7fVUPb"><b>查看 1000+热门创新案例 请进入<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//runwise.co/%3Fsource%3Dzh" rel="nofollow noreferrer" target="_blank">创新社区</a></b></p><h4 id="文章详细url-https-api-zhihu-com-answers-3290994084"><a href="#文章详细url-https-api-zhihu-com-answers-3290994084" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3290994084"></a>文章详细url:<a href="https://api.zhihu.com/answers/3290994084">https://api.zhihu.com/answers/3290994084</a></h4><h2 id="私域流量已经成为趋势了吗？"><a href="#私域流量已经成为趋势了吗？" class="headerlink" title="私域流量已经成为趋势了吗？"></a>私域流量已经成为趋势了吗？</h2><h3 id="内容-8"><a href="#内容-8" class="headerlink" title="内容"></a>内容</h3><p data-pid="bVZvxzU_">私域流量已经成为趋势了吗？自信点，把吗字去掉，私域流量已经成为趋势了。</p><p data-pid="qUSGVJ6E">为什么呢，因为随着互联网的发展，越来越多的线下门店转移到线上，即使线下门店营业，也是线上线下同步运营。</p><p data-pid="7sC3B7Wu">而且线上的很多玩法是线下不具备的，因为线下经营会受到成本的制约，而线上运营不仅大大减少了运营成本，包括门店租金、员工薪资、水电费等，更重要的是，线上运营极大的扩展了触达潜在用户范围的能力。</p><p data-pid="6ESRFfkZ">所以线上运营的力量不可忽视。</p><p data-pid="8l8WpsBa">那么回到题主问题，私域流量，就是要把公域流量用户转化为忠诚度极高的私域流量用户，等于是把随便逛街的顾客转化成出来逛街只去你一家店，那潜在盈利是巨大的。</p><p data-pid="GRWZcZu4">所以一定要建设维护好私域流量，包括社群运营、活动运营，用户运营等等。</p><figure data-size="small"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic3.zhimg.com/v2-a495ee171832708421b2dee95924d582_b.jpg" data-original="https://pic4.zhimg.com/v2-2eea9fee72c61dfdd6342eb9efc93fab_r.jpg" data-original-token="v2-66963124059a522ddd1357bda3fec46e" data-rawheight="627" data-rawwidth="800" data-size="small" src="https://pic4.zhimg.com/v2-2eea9fee72c61dfdd6342eb9efc93fab_b.jpg" width="800"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-2eea9fee72c61dfdd6342eb9efc93fab_b.jpg" data-caption="" data-default-watermark-src="https://pic3.zhimg.com/v2-a495ee171832708421b2dee95924d582_b.jpg" data-original="https://pic4.zhimg.com/v2-2eea9fee72c61dfdd6342eb9efc93fab_r.jpg" data-original-token="v2-66963124059a522ddd1357bda3fec46e" data-rawheight="627" data-rawwidth="800" data-size="small" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='800' height='627'&gt;&lt;/svg&gt;" width="800"/></figure><figure data-size="small"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic4.zhimg.com/v2-d03845e5cee436a80096320f729dbde3_b.jpg" data-original="https://pic2.zhimg.com/v2-cbec8cfc8823373e9005e8f5eb32d14b_r.jpg" data-original-token="v2-b46607ff2663f1edff23cf6a85e26b3d" data-rawheight="720" data-rawwidth="1080" data-size="small" src="https://pic2.zhimg.com/v2-cbec8cfc8823373e9005e8f5eb32d14b_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic2.zhimg.com/v2-cbec8cfc8823373e9005e8f5eb32d14b_b.jpg" data-caption="" data-default-watermark-src="https://pic4.zhimg.com/v2-d03845e5cee436a80096320f729dbde3_b.jpg" data-original="https://pic2.zhimg.com/v2-cbec8cfc8823373e9005e8f5eb32d14b_r.jpg" data-original-token="v2-b46607ff2663f1edff23cf6a85e26b3d" data-rawheight="720" data-rawwidth="1080" data-size="small" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='720'&gt;&lt;/svg&gt;" width="1080"/></figure><figure data-size="small"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-45a4aa221d666af75b33967bafa7b5d0_b.jpg" data-original="https://pic3.zhimg.com/v2-006a022c16e35cdbb095b42fcbcbb67c_r.jpg" data-original-token="v2-b548bc64180cb4af7b1bdac95b8d7095" data-rawheight="1333" data-rawwidth="750" data-size="small" src="https://pic3.zhimg.com/v2-006a022c16e35cdbb095b42fcbcbb67c_b.jpg" width="750"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-006a022c16e35cdbb095b42fcbcbb67c_b.jpg" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-45a4aa221d666af75b33967bafa7b5d0_b.jpg" data-original="https://pic3.zhimg.com/v2-006a022c16e35cdbb095b42fcbcbb67c_r.jpg" data-original-token="v2-b548bc64180cb4af7b1bdac95b8d7095" data-rawheight="1333" data-rawwidth="750" data-size="small" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='750' height='1333'&gt;&lt;/svg&gt;" width="750"/></figure><h4 id="文章详细url-https-api-zhihu-com-answers-3098782792"><a href="#文章详细url-https-api-zhihu-com-answers-3098782792" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3098782792"></a>文章详细url:<a href="https://api.zhihu.com/answers/3098782792">https://api.zhihu.com/answers/3098782792</a></h4><h2 id="私域运营有哪些雷区？"><a href="#私域运营有哪些雷区？" class="headerlink" title="私域运营有哪些雷区？"></a>私域运营有哪些雷区？</h2><h3 id="内容-9"><a href="#内容-9" class="headerlink" title="内容"></a>内容</h3><p data-pid="qBo8lFHo">谢邀。私域运营雷区个人认为有三点:</p><p data-pid="6sXf6PuL">1.）认为给礼品，用户参与了就是成功。其实，非常错误。如果发的礼品与你的正价品不匹配、对用户来讲，就是反宣传、也不利于将吸引上来的人进行后续的转化。比如:你是卖面包的、但是赠的礼品却是写作课程。这在用户心理就会产生认知混乱，搞不清你是做什么的。</p><p data-pid="IdqcNLJI">2.）回复要及时。要知道用户来找你，也就是看了宣传内容之后突然的想法、需求刚被刺激出来的时候，所以一定在用户需求特别急迫或者刚刚产生的时候，进行回复。来咨询的用户千万别晾着，凉了以后付费意愿会更低、更无法转化。</p><p data-pid="wMDJJ2oI">3.）私域运营就是聊微信、拉群做活动。其实，留手机号的客户、进门店的客户、线下、自己app上的客户……凡是你随时能随时触达且其他企业触达不到的客户，都算是你的私域资产，都要好好维护。</p><p data-pid="kyK5C4a6">4.）一味送礼。要算清Roi。有成本把控意识。</p><h4 id="文章详细url-https-api-zhihu-com-answers-2777312246"><a href="#文章详细url-https-api-zhihu-com-answers-2777312246" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/2777312246"></a>文章详细url:<a href="https://api.zhihu.com/answers/2777312246">https://api.zhihu.com/answers/2777312246</a></h4><h2 id="到底什么叫作私域？如何开始去做私域？"><a href="#到底什么叫作私域？如何开始去做私域？" class="headerlink" title="到底什么叫作私域？如何开始去做私域？"></a>到底什么叫作<em>私域</em>？如何开始去做<em>私域</em>？</h2><h3 id="内容-10"><a href="#内容-10" class="headerlink" title="内容"></a>内容</h3><p data-pid="AmEH19Z9">一、到低什么叫私域</p><p data-pid="M65jzDPG">首先私域是什么？在了解私域之前我们先捋清楚公域流量是什么？公域流量也叫平台流量，主要的公域流量平台有抖音、腾讯、快手、百度等社交媒体平台。而私域简单来说就是自己所掌握的流量，主要包括粉丝人群和社交人群等，指从公域、其他域（比如平台、媒体渠道、合作伙伴等），引流到自己的私域，以及私域流量产生的裂变（激励分享）。私域流量是你可以直接拥有的、可裂变、低成本甚至可以免费触达的流量，比如微信公众号粉丝、微信好友和微信群、视频号粉丝、抖音和快手粉丝等。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic1.zhimg.com/v2-99a2762374732a8b43a7de769f7218a0_r.jpg" data-original-token="v2-f1092c14a74cf8d3be3ff8117568f3db" data-rawheight="383" data-rawwidth="900" data-size="normal" src="https://pic1.zhimg.com/v2-99a2762374732a8b43a7de769f7218a0_b.jpg" width="900"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="yaIV6zWT">二、为什么做私域</p><p data-pid="p63Ht__n">现在很多人都说做私域其主要原因就在于流量获取成本越来越高，而且各个公域流量平台的竞争程度越来越高无疑也加剧了这种流量获取难度和成本，从而倒逼很多客户开始做私域，把从公域引进来的流量留存到自己的私域。而且在私域流量达到了一定的规模就可以逐步摆脱公域流量的限制，利用自身私域流量的裂变达到更低成本的流量获取。</p><p data-pid="gc5bJ8Ee">私域流量的人群一般都是对于本产品有兴趣的人群，所以都是比较精准的人群，相比于公域的泛人群来说转化率会高很多，所以利用私域流量推广产品的成本很低，很适合用来测品。如果自身私域流量都对本产品（和私域人群画像相符的产品）不感兴趣，那在公域流量也很难产生较高的转化。</p><p data-pid="GkEGkg_x">私域运营是一种新型的流量运营模式，更加强调流量的留存率和互动分享，同时也需要公域和私域的协同发展，公域引流私域运营，严格来说私域运营也是一种客户管理。我们通过社交媒体平台（如抖音、快手和微信视频号等），通过在这些平台投放广告产生较大的订单信息，然后再通过添加下单客户的微信，通过微信的社交能力进行客户运营（通过售后服务和优惠券促销活动），引导他们进入自己的小程序商城购买或者关注自己的自己的视频号等，这样就就把公域流量一步一步的去转化成了私域流量。</p><p data-pid="_J7-Dh3W">三、如何开始去做私域</p><p data-pid="oGmC4Xae">那么在我们了解了私域和公域的区别以及私域到底是什么之后呢，我们就回想，那怎么开始做私域呢？下面也总结了如何打造私域流量的五个步骤，还有老板最关心的私域流量到底是怎么去运营的问题，都会呈现出来哟。</p><p data-pid="UtE9lcdr">我们在打造个人私域流量时最关键的【五个步骤】‍</p><p data-pid="ByYf1Qvv">第一步:</p><p data-pid="got4rH-a">建立私域流量池(去公域流量持续输出优质内容，引到我们的私域流量池。微信好友)</p><p data-pid="OWjpcLBZ">第二步:</p><p data-pid="L_Ds256f">裂变。两个方法、一个是私域流量里的人带流量进来;二个是破圈，花钱去跟人接触，交换价值。学会演讲，扩大自己的影响力。可以连麦直播，去破圈。然后要做留存。</p><p data-pid="2JGZpg0G">第三步:</p><p data-pid="e2vSoPHu">留存。怎么去留住别人呢?1、细分化人群管理。做标签，标签化管理。什么时候认识的，喜欢什么，有什么特点。</p><p data-pid="aFxrETid">2、注意自己的选择，选择大过努力。慎重选择自己的渠道和产品。第四步:转化。私聊转化，朋友圈转化，社群转化。第五步:当你的个人IP还没有什么知名度时，你要做的是"持续主动积极地发声"。 你不一定得主动做新增动作，但你可以输出有价值的内容，吸引别人来加你。 靠微信生态赚钱的人，如果你只是个不说话的小透明，那没有半点机会可言。 最后，私域流量的运营始终围绕着信任展开，信任的建立靠 2 方面：1.人设打造，让用户认可你；2.精细化运营，让用户觉得你“懂”他。‍</p><p data-pid="6dSPKfeH">在我们了解了私域，了解了如何打造私域之后，接下来就应该了解如何运营私域。</p><p data-pid="K2Sv6pNz">私域流量运营过程中，如何转化的关键因素：</p><p data-pid="ledfWu6Y">第一定律就是私域流量不是做一锤子买卖，一定要牢记。1、了解客户心理：不管客户是从什么途径添加企业微信（公众号等），一般都会存在观望的心态。这时候，要主动接触客户，告诉客户你是做什么的，能给他带来什么价值。2、谈需求，谈感情：客户对企业和产品有一个初步了解后，会产生购买、继续观望以及不感兴趣三种态度。对于前者，要持续跟进，挖掘其他需求点；对于后者，则要拉近距离，打感情牌（比如朋友圈点赞评论）。3、做限时促销活动，制造紧迫感，提升转化率：促销活动针对的是已购买用户、加购但未付款客户以及持续观望客户，可以促成交量。 不过，100%的转化率是最理想的状态，微信中难免躺着一些不管怎么努力触达，都从不回复的客户，这类大概率是对企业/产品不感兴趣的用户，可以统一分组，隔段时间提醒发放消息，期待客户唤醒。‍</p><p data-pid="eW717dVq"><b>这就是今天关于私域流量非常全面的一个介绍了，想必各位老板绝对仔细看了下来，无论是不懂私域想了解私域的，还是不知道怎么打造私域的，又或者是不清晰私域流量运营的关键是哪些的，都可以在这篇私域流量的基本介绍里找到答案。</b></p><p data-pid="dUt2Qvj8"><b>后续我们还会在公众号，持续去发一些关于私域流量尤其是运营方面的干货！！！关注公众号，不怕迷路哟~‍</b></p><h4 id="文章详细url-https-api-zhihu-com-articles-648490221"><a href="#文章详细url-https-api-zhihu-com-articles-648490221" class="headerlink" title="文章详细url:https://api.zhihu.com/articles/648490221"></a>文章详细url:<a href="https://api.zhihu.com/articles/648490221">https://api.zhihu.com/articles/648490221</a></h4><h2 id="品牌要不要进行私域营销？"><a href="#品牌要不要进行私域营销？" class="headerlink" title="品牌要不要进行私域营销？"></a>品牌要不要进行<em>私域</em>营销？</h2><h3 id="内容-11"><a href="#内容-11" class="headerlink" title="内容"></a>内容</h3><p data-pid="H6ilEKND">将这个问题转化为品牌要不要做私域营销。</p><p data-pid="iUiNgxAn"><b>答案是：要。</b></p><p data-pid="CE42g-7s"><b>但不一定要成为可变现的私域流量。</b></p><figure data-size="normal"><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic3.zhimg.com/v2-d4340e81f6a92d518153dc25060b686e_r.jpg" data-original-token="v2-34ca731b57043e77cf050ecaa8312850" data-rawheight="1130" data-rawwidth="1999" data-size="normal" src="https://pic3.zhimg.com/v2-d4340e81f6a92d518153dc25060b686e_b.jpg" width="1999"/></figure><h2 id="什么是私域？-1"><a href="#什么是私域？-1" class="headerlink" title="什么是私域？"></a><strong>什么是私域？</strong></h2><p data-pid="aeYObFEf">在PC时代，商家无法直接触达自己的消费者，因为用户都是属于平台的。商家只是平台的<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25B9%25BF%25E5%2591%258A%25E4%25B8%25BB/237778%3FfromModule%3Dlemma_inlink" rel="nofollow noreferrer" target="_blank">广告主</a>和商品搬运工，每付一次广告费才能产生一笔订单，就像每月付租的房客。</p><p data-pid="TLl0wlXf">但在移动互联时代，商家可以通过微信、<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25BE%25AE%25E5%258D%259A/79614%3FfromModule%3Dlemma_inlink" rel="nofollow noreferrer" target="_blank">微博</a>、快手、抖音等工具直接触达到消费者，这就形成了“<span class="nolink">私域</span>”，代表着商家不再只是某平台的租客，而拥有了自己房子，有了产权。</p><p class="ztext-empty-paragraph"><br/></p><h2 id="为什么品牌要做私域呢？"><a href="#为什么品牌要做私域呢？" class="headerlink" title="为什么品牌要做私域呢？"></a><strong>为什么品牌要做私域呢？</strong></h2><p data-pid="G6onS6tY"><b>因为，私域为品牌提供了可重复、低成本甚至免费触达用户的场域，这让高频地与目标受众接触和互动和快速而又直接地<a class="internal" href="https://www.zhihu.com/search?q=%E5%B1%95%E7%A4%BA%E5%95%86%E5%93%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">展示商品</a>、营销活动和<a class="internal" href="https://www.zhihu.com/search?q=%E5%93%81%E7%89%8C%E6%96%87%E5%8C%96&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">品牌文化</a>成为了可能，更便于品牌拉近与目标受众的距离。</b></p><p data-pid="M4l6X7Y-"><b>对品牌来说，这能带来以下益处：</b></p><p data-pid="0425jpPC"><b>1、直接售卖，<a class="internal" href="https://www.zhihu.com/search?q=%E6%8F%90%E5%8D%87%E9%94%80%E5%94%AE%E4%B8%9A%E7%BB%A9&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">提升销售业绩</a>：</b></p><p data-pid="UDvIHTsf">品牌可以直面消费者，用无中间商赚差价省下来的成本可用于发起促销活动，提供更优惠的<a class="internal" href="https://www.zhihu.com/search?q=%E4%BB%B7%E6%A0%BC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">价格</a>来劝说消费者购买，有助于增加商品服务的销售，从而提升销售业绩；</p><p data-pid="Nnxy84vJ"><b>2、增强用户粘性，培养品牌忠诚：</b></p><p data-pid="j6MA8QCz">通过叫<a class="internal" href="https://www.zhihu.com/search?q=%E9%AB%98%E9%A2%91%E8%AF%8D&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">高频词</a>的适度的与用户的直接互动沟通，可以增强品牌的存在感，强化用户对品牌的了解，让用户更真切地感受到商品和服务的品质、有吸引的品牌文化、对用户的用心关怀，拉近彼此间的距离从而增进用户粘性，更加认可品牌从而建立忠诚；</p><p data-pid="lsKzFsDs"><b>3、积累用户数据，开展更科学更精准的市场营销：</b></p><p data-pid="rp2DLFnX">结合门店销售终端、社群、企业微信、线下POS、APP等的私域数据与公域数据汇总起来，可以建立企业专属的大数据CDP，制定更丰富立体的企业目标客户和在用客户的画像系统，并可以利<a class="internal" href="https://www.zhihu.com/search?q=%E6%99%BA%E8%83%BD%E5%88%86%E6%9E%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">智能分析</a>工具辅助科学决策，实现从产品设计研发、生产制造、物流、<a class="internal" href="https://www.zhihu.com/search?q=%E7%BB%88%E7%AB%AF%E9%94%80%E5%94%AE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">终端销售</a>和促销推广的精准化、精细化，提升<a class="internal" href="https://www.zhihu.com/search?q=%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E5%B7%A5%E4%BD%9C&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">市场营销工作</a>的效率。</p><p data-pid="VYNSsNni"><b>因此，<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E8%90%A5%E9%94%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">私域营销</a>做得好让品牌能够有机会，以更低的成本精准触达目标用户，在转化变现增加销售、提升利润的同时增进用户对品牌的了解和认可，提升品牌形象、深化品牌忠诚，推动品牌营销体系整体效能的提升。</b></p><p class="ztext-empty-paragraph"><br/></p><h2 id="不过，私域营销这么重要，但不是所有品牌都需要大力投入去转化私域流量变现。"><a href="#不过，私域营销这么重要，但不是所有品牌都需要大力投入去转化私域流量变现。" class="headerlink" title="不过，私域营销这么重要，但不是所有品牌都需要大力投入去转化私域流量变现。"></a><strong>不过，私域营销这么重要，但不是所有品牌都需要大力投入去转化私域流量变现。</strong></h2><p data-pid="W4UK2xYi"><b>因为，</b>私域营销需要针对用户开展个性化的营销活动、重策划、重内容、重执行把控，<b>即使有了数字化工具的辅助，也需要较高的人力成本投入才能保证较好的效果。</b></p><p data-pid="pjJ23tNz"><b>品牌需要平衡好通过私欲营销所需人力成本和所换回来的销售变现。这是因为商品服务的品类、用户的需求和<a class="internal" href="https://www.zhihu.com/search?q=%E6%B6%88%E8%B4%B9%E5%86%B3%E7%AD%96&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">消费决策</a>方式的差异性决定了，通过私域开展销售的投入产出比的差异。</b></p><p data-pid="cl37-iXN">如果经过评估，所投入在流量变现上的人力成本远大于销售变现，则应该量力而行不必盲目投入，但做好基本的私域营销工作，如<a class="internal" href="https://www.zhihu.com/search?q=%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">微信公众号</a>运营、客户群服务等，这本就是日常传播、客户服务等工作的一部分，在不增加额外支出的情况下需要结合私域针对用户的个性化需求提升工作水平。</p><p data-pid="YKhiK6ab">如果经过评估，销售变现能够大于所投入在流量变现上的人力成本，则应该加大私域营销的投入，特别是要侧重流量变现，在强化<a class="internal" href="https://www.zhihu.com/search?q=%E8%90%A5%E9%94%80%E4%BC%A0%E6%92%AD&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">营销传播</a>、用户互动带来的<a class="internal" href="https://www.zhihu.com/search?q=%E5%93%81%E7%89%8C%E4%BB%B7%E5%80%BC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">品牌价值</a>增益的同时，寻求更高的销售转化。</p><p data-pid="EJjg30zY">那么哪些品牌适合开展<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E9%94%80%E5%94%AE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">私域销售</a>（私域流量变现）呢？</p><p data-pid="uY8IDMCD"><b>一般来说，获客成本高、客单价较高、复购频率高的品牌更适合。</b></p><p data-pid="uouGy4B-">首先，<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">公域</a>的传播推广面临渠道资源稀缺、反复触达不易、影响深度不足的特点，如果要单纯通过公域促成购买，就需要想办法增加曝光量和反复触达来完成，这带来了更高的获客成本，而且有些品类的成本尤其较高，如汽车、<a class="internal" href="https://www.zhihu.com/search?q=%E6%95%B0%E7%A0%81%E4%BA%A7%E5%93%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">数码产品</a>、美妆等，其通过<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E8%BD%AC%E5%8C%96&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">私域转化</a>的成本会更低。</p><p data-pid="VMJJ9F7C">其次，高客单价可以更好地覆盖私域营销的人力成本投入，无论是首次销售转化还是促进复购，其投入产出比更高；同时，<a class="internal" href="https://www.zhihu.com/search?q=%E5%A4%8D%E8%B4%AD%E9%A2%91%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">复购频率</a>越高决定了前期私域运营的投入在较长的<a class="internal" href="https://www.zhihu.com/search?q=%E5%AE%A2%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">客户生命周期</a>里能带来更大的整体回报，而且对于用户粘性和品牌忠诚的贡献更大。</p><p data-pid="XEL-Qb2v">按照一般的经验来说，按产品服务的品类来说来说，服饰、母婴、美妆、保健、餐饮、3C数据、家居、生鲜、办公、汽车、教育、家装建材都比较适合开展私域销售（私域流量变现）。</p><p class="ztext-empty-paragraph"><br/></p><h2 id="要做好私域营销，必须要有完整严密的营销体系的支撑，为此需要："><a href="#要做好私域营销，必须要有完整严密的营销体系的支撑，为此需要：" class="headerlink" title="要做好私域营销，必须要有完整严密的营销体系的支撑，为此需要："></a><strong>要做好私域营销，必须要有完整严密的<a class="internal" href="https://www.zhihu.com/search?q=%E8%90%A5%E9%94%80%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">营销体系</a>的支撑，为此需要：</strong></h2><p data-pid="Y_KjAbzP"><b>首先，搭建私域营销平台将公域流量导入并沉淀下来。</b>这些平台一般包括官网、微博、微信公众号、小程序、<a class="internal" href="https://www.zhihu.com/search?q=%E5%BE%AE%E4%BF%A1%E7%BE%A4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">微信群</a>等，要能留的下用户形成待开发的<a class="internal" href="https://www.zhihu.com/search?q=%E6%B5%81%E9%87%8F%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">流量池</a>，并通过一套合适的数字化<a class="internal" href="https://www.zhihu.com/search?q=%E8%90%A5%E9%94%80%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">营销系统</a>来统筹管理这些平台并实现高效的协同。</p><p data-pid="gmJEeG5k"><br/><b>其次，收集用户数据并绘制用户画像，为后期的科学决策和精细化营销提供支撑。</b>其次，品牌需要通过门店终端、在线互动、公域数据库等渠道收集用户的基本特征（年轻、性别、地区、职业和收入、学历等）兴趣爱好、购买行为特征等，再根据自身的营销任务需求，绘制完善的用户画像并分析，包括<span class="nolink">用户行为分析</span>、<a class="internal" href="https://www.zhihu.com/search?q=%E7%94%A8%E6%88%B7%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">用户需求分析</a>、产品分析等，为产品设计研发和<a class="internal" href="https://www.zhihu.com/search?q=%E8%90%A5%E9%94%80%E6%8E%A8%E5%B9%BF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">营销推广</a>提供支撑，这需要使用CDP、CRM、PLM、SCM等数字化的管理工具。</p><p data-pid="IBiJG071"><b>再次，要制定科学的营销策略，以提供优质的产品服务、生产有吸引力的营销内容、加强用户互动和优化用户体验。</b>营销策略包括产品研发、<a class="internal" href="https://www.zhihu.com/search?q=%E5%93%81%E7%89%8C%E6%8E%A8%E5%B9%BF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">品牌推广</a>、<a class="internal" href="https://www.zhihu.com/search?q=%E5%86%85%E5%AE%B9%E8%90%A5%E9%94%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3225601030%7D">内容营销</a>、社交媒体营销等多个维度，需要围绕客户需求来制定针对性策略，让产品服务更好地满足需求并保证质量，提供合适的图文、视频、互动互动来吸引用户的参与，并嘉庆客服咨询、社群互动、线下活动等的水平来强化用户互动 ，深化用户的参与度、保障良好的用户体验、提升用户的满意度，以促进销售转化，并提升品牌形象和强化用户粘性。<br/></p><p data-pid="OPOeOIRs">品牌要不要做私域营销呢？要！但不同品牌要根据自身特点制定合理的私域营销目标，并开展高效的营销活动来尽量实现“品效合一”的营销效果。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="jzd2ypBe"><i>都看到这里了，收藏前就点个赞吧～</i><br/><br/></p><hr><p data-pid="z6WnKNQs">作者于《<span class="nolink">国际公关</span>》杂志、<span class="nolink">市场部</span>网、广告门、<span class="nolink">数英网</span>、首席营销官等营销行业<span class="nolink">垂直媒体</span>开有专栏<br/>个人<span class="nolink">微信公众号</span>：<span class="nolink">品牌市场</span><span class="nolink">相对论</span> id：Brand-Marketing<br/>期待与从事<span class="nolink">品牌营销</span>的朋友交流，欢迎关注。</p><h4 id="文章详细url-https-api-zhihu-com-articles-662683500"><a href="#文章详细url-https-api-zhihu-com-articles-662683500" class="headerlink" title="文章详细url:https://api.zhihu.com/articles/662683500"></a>文章详细url:<a href="https://api.zhihu.com/articles/662683500">https://api.zhihu.com/articles/662683500</a></h4><h2 id="私域的未来，该何去何从？"><a href="#私域的未来，该何去何从？" class="headerlink" title="私域的未来，该何去何从？"></a><em>私域</em>的未来，该何去何从？</h2><h3 id="内容-12"><a href="#内容-12" class="headerlink" title="内容"></a>内容</h3><p data-pid="ewFglKl0"><b>企业未来要想做好私域，服务是关键所在，得服务者得私域。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="xFPagZ2w">《孙子兵法》九地第十一有云：<b>九地之变,屈伸之力,人情之理,不可不察也。</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="NbHdMEH-">作为统帅，要以形势使屈伸之力，还要懂得观察人心。<br/></p><figure data-size="normal"><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic3.zhimg.com/v2-8814d6b876c45d1f4f9111eb7c03a34e_r.jpg" data-original-token="v2-dc0c2a83162cd16dd842d48befe51151" data-rawheight="305" data-rawwidth="731" data-size="normal" src="https://pic3.zhimg.com/v2-8814d6b876c45d1f4f9111eb7c03a34e_b.jpg" width="731"/></figure><p data-pid="JdXPlm_c"><b>做私域服务，亦是如此。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="KqoZWvyr">其一、要懂得审时度势，随机应变，沉着冷静，有应对之策，能屈能伸，谨小慎微，切不可自乱阵脚。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Aykma4rK">其二、要懂得观察人性，抚慰人心，无论是自己的员工还是服务的客户，懂人性方可有应变之策。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="EHbEqxA2">能够做到以上两点，私域服务何愁做不好？</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Y8JXHH-u">可能有人会有疑惑了，私域服务真的有那么重要吗？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="gNXzwQnU">很重要，而且是势在必行。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="vufIqnB_">当我们从流量思维转变到用户思维之后，私域的服务就显得尤其重要。之前我们已经说过，在流量过剩的时代，流量不是用户，不是活生生的人，而是一串串冰冷的数字，是故无需做服务，来了便转化即可。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="FmO7-eyr"><b>而如今做私域切不可再把流量当数字来看待，而是一个个活生生的人，人之常情也，必要以诚相待，感动之，何愁不转化，何愁产品卖不出去？</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="g6LpJZs2">但是在我服务过的很多企业里，其实很多老板还是没有从流量思维转化到用户思维，在他们眼里，流量只不过就是数字罢了，今天涨了100个粉丝，明天涨了200个粉丝，用户走了其实就是数字的变化，不足为惧，不必挽留。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="OnYRRjDU"><b>倘若一直都是这种心态做私域，私域又怎能做好？</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="atn_BJyk"><b>古有云，有道无术,术尚可求也,有术无道,止于术。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="X83l9-cM"><b>道即根本，道即战略，道出了问题，再好的战术，也是无济于事。</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="N3xND-EC">所以做私域的老板们，现在一定要转变心态，把流量当人来看，把用户当人来看，用心服务好每一个客户，此乃大道也，私域自会出奇效，望公周知。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="2jiwdfz0">既然私域的服务如此重要，那么应如何才能把服务做好？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="hKhPjbU2"><b>心系用户，心里时刻装着用户，急用户之所急，想用户之所想，不仅要做到锦上添花，更要做到雪中送炭，这正是做好私域服务的根本所在。</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="B-uWE6MO">那么在私域里，如何才能真正做到心系用户？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="QL6LAByX">首当其冲的就是产品，一个好的产品就是最好的服务。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="fKyn54qq">我们之前不止一次说过，产品之于私域的重要性，因为私域做的是复购的生意，倘若产品不好，又怎么能让用户心甘情愿下单并且复购呢？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="PtjodaW3">用户购买产品是为了解决自身的需求，如果连需求都满足不了，又何谈接下来的服务？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="eIMnmzB5">所以，企业要想做好私域的服务，得先解决产品的品质问题，因为产品是解决用户需求的根本所在。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="km76b7xi">除了产品之外，我们在做私域的时候还会碰到以下服务的问题：</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="iK6Pvabx"><b>第一、私域服务之响应速度</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="HZBtyQ7U">响应速度是私域里面很小的一件事情，但是却显得尤其重要，而且在我服务过的企业里，真正重视响应速度并且把它做好的寥寥无几。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="-82PzEV7">何谓响应速度？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="rNjklcfc">就是当客户发信息的时候，客服回复客户的时长。好的私域服务可以做到响应时长平均2分钟内，而做的不好的可以达到平均30分钟以上。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="KAqykrCz">这就意味着什么，当你给别人发信息的时候，过了30分钟才回复你，你要是不着急还可以忍，倘若你很着急，别说30分钟了，5分钟你都恼了。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="ft0_kDcK">如果你对这个服务都不满意了，试想你还愿意再购买此品牌的产品吗？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="lMv9U9cH">好的响应速度是对别人的尊重，对别人时间的尊重，客户只有得到尊重了，客户才会尊重你的产品，尊重你的品牌，己所不欲勿施于人，既然你都不愿意等，别人又岂会愿意？</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="q0kpssN6"><b>第二、私域服务之专业度</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="08YDTTwl">这个也是在私域服务里经常会出现的问题，就是客服在回答客户问题的时候不够专业，这个太致命了。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="yl64v5Vb">这种不专业给客户带来的负面情绪会延申到企业的产品，企业的管理层，企业的文化。客户有理由怀疑，你的客服这么不专业，想必是管理层教导无方，没有把客服培训好，鉴于这么无能的管理层，又怎么能够做出好的产品，好的企业文化来呢？</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="8EvXjXIM">此等分析，言之有物，言之有理。正所谓，上梁不正下梁歪，客服是服务客户的一线执行者，是私域服务的基本盘，如果连客服都不专业，又怎么能获得客户的满意呢？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="QJ9EmQ7e"><b>所以，我们作为私域的负责人，一定要做好客服专业知识的培训，不仅要培训，还要进行演练以及知识答辩考试等。</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="kLM1YueI">现在的chatgpt很火，能够快速的回答客户的问题，但是机器毕竟是机器，谁又愿意和一个机器对话，所以与其训练chatgpt，还不如好好的培训自己的客服人员。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="lH1YwLkj"><b>与人交谈，才能获得真正的情绪价值。</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="4ZfG0N4F"><b>第三、私域服务之满意度</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="IThdVVPV">做服务一定避不开一个词，那就是客户的满意度。除了要站在管理者的角度去思考服务之外，我们还要懂得站在客户的角度去思考问题。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="eUWAzEHG">只有当用户真正的满意，那么服务才能取得好的结果。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="bcg7f-zf">所以做满意度调查表对于私域服务来说是很有必要的，自己人说自己人好不算好，要客户亲自说好才算是真的好。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="8E45P_bH">做一份满意度问卷调查需要注意以下几个问题：<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="yjbkjN8J">1.选择制作满意度调查问卷的软件，最好选择正规的大平台，而且不能有广告，这样未免让用户产生厌烦。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="N7AZ01B1">2.满意度调查的问题最好都是选择题，最后一题可以为填空题：您的意见和建议是什么？而且题目不能太长，不能太多，最好在10道题以内。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="p38ZmyxV">3.客户填好满意度调查表之后，为了表示感谢，最好可以赠送一个小的礼品，别人帮了你有一个回赠，才会显得你比较懂得感恩、大气。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Ncmzcz61"><b>满意度调查是为了收集服务中产生的问题，进而不断的优化服务意识以及服务态度，有则改之，无则加勉。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="LcGPNs_r"><b>第四、私域服务之细节处理</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="k0k9kMnS">私域服务在我看来都是一件件小的事情，小的不能再小，就因为事小，所以很多人都会不自觉的忽略或者是不用心，总觉得就这么点小事，客户应该不会在意吧？<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="6_oI5hNt"><b>正所谓，勿以善小而不为，勿以恶小而为之。</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="eJG756HO">小事都处理不好，又怎么能放心把大事交给你来处理。很多人就是手低眼高，小事看不上，大事做不好。像这类型的人就不适合做私域服务，很容易出问题。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="KZpQ16kN">能够做好私域服务的人要胆大心细，注重细节，力求把任何一个细节都处理好，心思缜密，眼疾手快。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="fI8H5TZb"><b>第五、私域服务之意识和态度</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="H-7n4uHh">服务意识和服务态度并非一朝一夕的事情，而是要经过不断的学习，不断的磨练才能培养出好的服务意识和态度。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Qw05clYl">何谓好的服务意识，就是能够想在用户的前面。当用户还没有问的时候，你就已经替用户解决了问题。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="_20VU11w">例如，我们在给客户发包裹的时候，要检查包括里面的东西是否齐全，说明书有没有放，螺丝刀有没有放。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="gvdVMoFP">何谓好的服务态度，润物细无声，清风拂山岗，让别人觉得很舒服，就是好的服务态度，而不是咋咋呼呼的，说话像开机关枪一样，满嘴跑火车。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="1jAOcxZG"><b>最后，好的服务要可以给用户带来一定的情绪价值。</b><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="iSlKzLlQ">情绪价值这个词，被现在越来越多人提及，前段时间歌手李玟因抑郁症自杀去世，让更多的人不得不正视情绪的问题。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="akCAigup">在未来，给用户提供情绪价值会是一门不错的生意，而服务跟情绪价值息息相关，所以未来的私域要更加的重视服务，不仅要做好，还要做出特色来，做出创意来，要有敢为天下先的气势。<br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="bLsMuFXW"><b>《孙子兵法》军争第七章里说道，是故朝气锐，昼气惰，暮气归。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="4_xC7PxO">私域之于服务亦是如此，好的服务就是朝气，正所谓一日之计在于晨，可以让人如沐春风，如鱼得水。不好的服务就是暮气，让客户衰竭，没有心气，又怎么能让用户满意？</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="gB-usYin">所以从今天开始，好好规划一下你的私域服务应该怎么做吧。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="0MMBwEwo"><b>未来的私域，是体验的私域，是服务的私域，得体验者得用户，得服务者得用户，得用户者得市场，此乃才是私域的正道所在啊！</b></p><h4 id="文章详细url-https-api-zhihu-com-articles-659302112"><a href="#文章详细url-https-api-zhihu-com-articles-659302112" class="headerlink" title="文章详细url:https://api.zhihu.com/articles/659302112"></a>文章详细url:<a href="https://api.zhihu.com/articles/659302112">https://api.zhihu.com/articles/659302112</a></h4><h2 id="私域流量是什么？品牌为什么要做私域？如何做好私域？"><a href="#私域流量是什么？品牌为什么要做私域？如何做好私域？" class="headerlink" title="私域流量是什么？品牌为什么要做私域？如何做好私域？"></a>私域流量是什么？品牌为什么要做私域？如何做好私域？</h2><h3 id="内容-13"><a href="#内容-13" class="headerlink" title="内容"></a>内容</h3><p data-pid="4Jhc8fIs">作为10余年<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E8%BF%90%E8%90%A5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222064111341%22%7D">私域流量运营</a>者，来分享几点关于私域流量的看法，与其说是看法，还不如说是纠正5个误区。</p><p data-pid="Nxgc186D">首先，还是来普及一下概念：私域流量是基于<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222064111341%22%7D">公域流量</a>而言，指的是所有你能够快速、主动、低成本触达的流量。比如：基于我们<a class="internal" href="https://www.zhihu.com/search?q=%E5%BE%AE%E4%BF%A1%E6%9C%8B%E5%8F%8B%E5%9C%88&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2672918229%7D">微信朋友圈</a>、自主开发的小程序和APP、视频号等私域平台上的用户总称。</p><p data-pid="znVJfz-k">而公域流量指的是在第三方流量平台上所有客户总称，比如：淘宝、<a class="internal" href="https://www.zhihu.com/search?q=%E7%99%BE%E5%BA%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3071897465%7D">百度</a>、知乎、小红书等各种大平台上的用户。</p><p data-pid="0y8a9uVM"><b>明白这两个概念后，我们来看一下大部分人对于私域流量存在的误区有哪些？</b></p><p data-pid="E-B-agDN">先说第一个：<b>私域流量=微商？不断发广告？</b></p><p data-pid="TEAsJ6pe">看完这篇文章后，请别再这么认为，会让人笑掉大牙。</p><p data-pid="9oH9groC">为什么这么说呢？</p><p data-pid="O8V3-K7h">这就得先明确我们建立私域流量的目的是什么，按我个人的说法，更喜欢把私域流量称之为<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222064111341%22%7D">私域体系</a>，而不是纯粹基于流量的角度来理解用户和我们的行为。</p><p data-pid="3XBRyEQO">我们建立私域体系的目的，应该是为了更好服务客户，让他们在购买我们产品和服务后，有任何问题都能快速找到服务人员，并反馈给我们。</p><p data-pid="XFPDjtoo">以快速、准确解决客户疑问为第一要素，其次在服务的过程中传递<a class="internal" href="https://www.zhihu.com/search?q=%E4%BC%81%E4%B8%9A%E4%BB%B7%E5%80%BC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2672918229%7D">企业价值</a>，并挖掘客户深层次消费需求。在后期服务过程中，实现客户多次消费的目的。</p><p data-pid="H2eKJtaG">而朋友圈推送广告，私发消息激活等类微商行为，都只能归类为其中一种刺激和触达客户的方式。它并非私域流量的全貌。以后有机会，会慢慢与大家分享如何在不伤害客户体验的方式下，多次触达客户。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="Pvs0KUKg">接下来讲讲第二个：<b>私域流量=<a class="internal" href="https://www.zhihu.com/search?q=%E8%A7%81%E7%BC%9D%E6%8F%92%E9%92%88&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2672918229%7D">见缝插针</a>似的加好友？</b></p><p data-pid="_Y2MO7af">近几年，常常能见到，地铁上、商超里、大路边，都有人做扫码加好友，送礼品的活动。也能在一些群里，会莫名其妙的被人私加好友。</p><p data-pid="rO2_Lsoi">所以也就会认为私域流量不就是到处加好友吗？</p><p data-pid="b8jVlYOp">如果这样操作私域流量的话，你得小心哦！可能当你一天主动加了20来个好友，就会被腾讯盯上，离警告和封号也就不远了……</p><p data-pid="6CJ5smwA">其实开篇在解释私域流量的时候，或许你也有注意到，这同样是一种基于三方平台的行为，也就意味着，这件事想长久做，就必须去研究规则。</p><p data-pid="YzkyhSrs">什么是平台的规则？</p><p data-pid="FeLW3Lgt">拿微信来举例子：你知道一个微信每天不间断主动加好友20个以上，会被限制行为吗？你知道频繁群发信息给联系人会被限制使用朋友圈和群发功能吗？你知道同一根网线上，一旦有一个<a class="internal" href="https://www.zhihu.com/search?q=%E5%BE%AE%E4%BF%A1%E5%8F%B7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222064111341%22%7D">微信号</a>被封了，其余微信号也有被封的风险吗？</p><p data-pid="YqCGM_3S">这只是简单讲几个规则，同样的，在知乎、<a class="internal" href="https://www.zhihu.com/search?q=%E5%B0%8F%E7%BA%A2%E4%B9%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222064111341%22%7D">小红书</a>、淘宝等这种公域平台，又有哪些规则？也是要去研究的。</p><p data-pid="XBGREufU"><b>见缝插针似的加好友，是私域流量中最Low的玩法！</b></p><p data-pid="A_TblTMP"><b>不仅效果最差，还风险最高，产能最低，成本最高！</b></p><p data-pid="mi6dGqmV">那，私域流量是如何保证在各种规则中寻得一方立足之地呢？</p><p data-pid="-iH58CzI">简而言之就是：引导！</p><p data-pid="GiZEkiHQ">在所有平台上，都只能是引导！无论是线上还是线下，通过各种内容、礼品、实物等，引导客户主动添加我们的微信个人号。</p><p data-pid="645h4nAi">这是需要一系列策略来支撑的，也是整个私域体系建立过程中相当核心的部分。</p><p data-pid="dUGmQElS"><b>看到这里，你对于私域流量应该有了初步认识，知道这是一套系统工程，不是我们之前想当然的认知。</b><br/></p><p data-pid="bCzIRZ8O"><b>那就再来看看第三个：私域流量=从很多公域到单个私域？</b></p><p data-pid="JaFuOXnK">这种说法，可以说对，但又不全对。</p><p data-pid="eoOc5RM1">正如我在前面有提到，私域流量与其叫做流量，不如叫做体系。</p><p data-pid="P27mf8Ez">整个体系分为：流量体、<a class="internal" href="https://www.zhihu.com/search?q=%E6%89%BF%E8%BD%BD%E4%BD%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2672918229%7D">承载体</a>、转化体、循环体。当然，我们实际上解释了流量题和承载体，比如：百度、知乎、小红书、淘宝等全部属于流量体。通过在各种流量体上分享内容，引导<a class="internal" href="https://www.zhihu.com/search?q=%E7%B2%BE%E5%87%86%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2672918229%7D">精准流量</a>主动触发加好友的机制，进入我们的承载体。</p><p data-pid="CfJHJ-QO">所以，承载体就可以简单理解为：微信个人号、公众号、视频号、社群等各种能够快速触达的平台。</p><p data-pid="ukNPINjZ">而<a class="internal" href="https://www.zhihu.com/search?q=%E8%BD%AC%E5%8C%96%E4%BD%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2672918229%7D">转化体</a>，这里也必须带一下。毕竟，我们之所以做私域流量，肯定不是为了做公益、做慈善，本质上还是希望做商业、做生意。</p><p data-pid="DCaCjQ6e">也就意味着，所有承载体上的用户，最终都需要通过转化体来完成商业变现，哪怕是卖土特产，也能比别人多卖好几种产品给同一个客户。</p><p data-pid="Se7LnlSd">要实现卖多个产品给同一个客户的目的，对于私域体系的要求就会更高！</p><p data-pid="iCOWw4-K">我们需要建立的是一个<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E7%9F%A9%E9%98%B5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222064111341%22%7D">私域矩阵</a>，同一个客户，在各种不同的承载体上，我们最后触达这个客户的频次会更多，也就意味着客户转化的概率在加大。</p><p data-pid="rLDm1t4U">那么在私域体系建立过程中，绝不是简单的将一个客户承载在一个私域平台。而是要通过一系列策划，将客户引导到尽量多的平台上去。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="gF-N-GX2">还有一个更奇葩的误区，包括我自己在日常工作中，也会经常听到这种谬论。比如：<b>我们公司只有几个人，没办法做私域流量。</b></p><p data-pid="hlBQtbgL">为什么私域流量是大公司的专利？而不是所有商业体的通识做法？</p><p data-pid="0t868lqs">大公司有大公司的私域流量，小公司有小公司私域流量的做法。</p><p data-pid="loOxwpFr">有一句话，你之前也听过：<b>维护好一个老客户，胜过开发10个新客户。</b></p><p data-pid="y1HMNX8-">私域流量放在所有公司而言，首先应该是客户维护工具。在维护客户过程中，吸引客户再次消费，以及带来新客户转介绍。</p><p data-pid="79IdU3qP">从这个维度去理解，就能明白，私域流量并无公司大小之分，只要你启动了，就永远不晚。</p><p data-pid="rNxTlnA6">怕就怕你永远不出发……</p><p data-pid="pzZHrwI4">最后，再谈一个误区，也算是深学邦<a class="internal" href="https://www.zhihu.com/search?q=%E5%88%98%E4%B8%80%E4%B8%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222064111341%22%7D">刘一一</a>给教育从业者一个转型建议：<b>并不是只有公司才能做私域流量，在人人都是自媒体，人人都是一个品牌的年代，私域流量也是属于每一个人的。</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="F1TCAHwp"><b>个体如何做私域流量？</b></p><p data-pid="Zve7t4zY">需要评估2个维度：</p><p data-pid="vZ--t_jD"><b>一是你能为哪些用户可持续创造什么价值？</b></p><p data-pid="6aQbgxYR"><b>一是你有什么能力可以辅助你完成这种价值输出？</b></p><p data-pid="iX2oKnBw">第一个问题，是关于自我私域流量定位的问题，实际上也是个人IP打造的范畴。</p><p data-pid="J88JaqsE">公域平台上的流量，既大，又广，且多。与你个人能力匹配的流量是谁？他们对什么感兴趣？目前市面上主流的内容是什么？我们又该如何另辟蹊径……</p><p data-pid="3TruJyZI">与用户相关的问题搞懂了之后，你就基本上确定私域流量的方向。</p><p data-pid="xVVRQPaN">第二个，是关于价值输出呈现方式的问题。文字OR视频？短视频OR长网课？等，既跟个人长期习惯有关，也跟所掌握的技能有关。</p><p data-pid="Ux7dbfpt">有人擅长写作，有人擅长演讲，有人擅长做视频……具体哪种呈现方式，都是由自身基本技能决定的。这也是你能够长期坚持的基本要求。</p><p data-pid="0DTyYFSJ">私域流量，或者说私域体系的建立，是一项长期工程！在整个过程中，会有很多的失落，因为我们需要独自面对漫长的<a class="internal" href="https://www.zhihu.com/search?q=%E9%9D%99%E9%BB%98%E6%9C%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2672918229%7D">静默期</a>。</p><p data-pid="ebV13MBw">很多时候，你每天都在做价值输出，但回应者寥寥，而我们依然要坚持。</p><p data-pid="vKCCwu86">所以，从大部分人来讲，把私域流量当做全职事业来做，并不是好的选择。如果有空余精力，当做副业来做还是可以考虑的。</p><p data-pid="4zIjUNes">另外，当下的企业，如果还没有启动私域流量体系建立，接下去可能会越来越难！毕竟，随着人口红利的消失，获客成本必然会越老越高，且<a class="internal" href="https://www.zhihu.com/search?q=%E8%BD%AC%E5%8C%96%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2672918229%7D">转化率</a>会越来越低。</p><p data-pid="jBXD9Uzf">移动互联网时代，人人都有发声的机会！</p><p data-pid="xDv08PHo">只要你想把握发声机会，且通过发声变现。私域流量的红利，请勿错过！（<b>刘一一，10年引流、文案、私域、变现经验，6年专注知识付费实操，擅长私域体系建立和个人IP打造，</b>\/X：sxblyy02）</p><hr><p data-pid="nMvTu3QR">搭建私域流量，只需要看这篇文章就够了！<br/>接下来进入正题：<br/>如果要用一句话来概括私域流量的话，那就是：<b>借助一些平台和工具，持续做好引流和服务，最终实现低成本获客、高频率转化、高收益创造和多频次转介绍的一套思想体系！</b></p><p data-pid="hwpSybAD"><br/>注意！私域流量应该是一套思想体系，而不是简单的单点模式。<br/>在整个过程中，会涉及到的主要核心点有5个：<b>引流、成交、<a class="internal" href="https://www.zhihu.com/search?q=%E5%A4%8D%E8%B4%AD&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">复购</a>、转介绍和裂变</b>。明白这5个环节之间的关系，就基本上解决了企业（或个人）打造<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">私域体系</a>的链路难点问题。<br/><br/>当然，对于很多个人想做私域流量来讲，也必须把自己当做一家企业，这个话题，会在以后跟大家详细拆开来阐述。<br/>对于5个核心要点之间，存在什么样的关系？<br/>这才是你所重点关注的。<br/><br/><b><a class="internal" href="https://www.zhihu.com/search?q=%E5%BC%95%E6%B5%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2561531969%7D">引流</a></b><br/>顾名思义，就是吸引流量。<br/>在互联网时代，流量在哪里？<br/>我们拿教育行业来举例子，做过市场的朋友会很清楚，我们经常会去小区、学校门口、商超里做地推，通过派送小礼品吸引客户来添加个人微信或留下联系方式。<br/><br/>这个链路拆开来就是：<b>公域、诱饵、资源</b>。小区、学校等可以理解为<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2460118955%7D">公域流量池</a>；小礼品自然就是诱饵了，而个人微信和联系方式，可以认为是私域池和资源。<br/>流量的第一种来源就清楚了，那就是很多很多的公域流量池。比如：知乎、<a class="internal" href="https://www.zhihu.com/search?q=%E5%B0%8F%E7%BA%A2%E4%B9%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">小红书</a>、<a class="internal" href="https://www.zhihu.com/search?q=%E7%AE%80%E4%B9%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2340836182%7D">简书</a>、搜狐自媒体等。<br/><br/>而基于私域流量范畴，还有第二种流量来源，我们也可以叫做精准流量来源。<br/>依旧拿机构来举例子，我们所有的转介绍客户、直接上门客户、邀约上门未签约客户，实际上都可以认为是<a class="internal" href="https://www.zhihu.com/search?q=%E7%B2%BE%E5%87%86%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">精准流量</a>，这些客户，如果仅仅停留在手机号码层面，还不能叫做私域流量。<br/>必须把每个手机号转化为微信个人号上的好友，微信公众号上的关注，才能算是进入了我们内部的私域流量体系。<br/><br/>解释完这两种来源后，你应该就很清楚。引流就是通过将<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">公域流量</a>和线下门店精准流量转换为私域平台上的一种做法。<br/>如何让用户愿意进入我们预设的轨道当中去？就需要我们精心设计流量用户感兴趣的“诱饵”。可以是顾客刚需使用的物品，也可以是一篇有深度的文章，还可以是一系列实用的电子档学习资料……<br/><br/>当然，除了这两种常用引流方法以外，还有一些企业会通过付费投放、渠道资源置换、社群加人等方式去引流。<br/>流量的吸引和获取，只是完成了私域体系建立的第一步！但也是最关键的一步。<br/><b>产品、流量，是一门生意能够存在的两大关键要素。</b><br/>之所以做私域流量，也是为了使更多低成本获取的流量实现源源不断的成交。<br/><br/><b>成交</b><br/><br/>什么是成交？<br/>你的产品（可以是实物，也可以是服务）被你的顾客购买，这就叫做成交！<br/>做流量不是为了成交，那还不如将钱投入公益慈善事业 。<br/>但要做好成交，也不是这么容易。毕竟，流量离成交还有很长一段距离。这段距离用一个词来概括就是：<b>信任问题</b>。<br/><br/><b>一切成交的基础都是源于信任</b>，这是<a class="internal" href="https://www.zhihu.com/search?q=%E4%BA%92%E8%81%94%E7%BD%91%E8%90%A5%E9%94%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2596468382%7D">互联网营销</a>中不变的法则！所以，<b>一切成交的实现，都是在解决信任问题</b>，只要解决了信任问题，成交也就是顺水推舟的事情。<br/>也可以这么认为，<b>不购买可以等同于不信任</b>。<br/>在之前的文章里有提到过“客户触达”的话题，将客户引导到越多的<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%89%BF%E8%BD%BD%E4%BD%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2596468382%7D">私域承载体</a>上，理论上来讲，企业触达客户的频次也会越高，成交的概率也会随之增加。<br/><br/>这是私域体系能够在信任问题解决上的第一个优势。其次，因为我们将客户承载在不同地方，而每个地方都有一种内容输出和成交方式。<br/>比如微信个人号成交，可以有朋友圈静默转化、一对一私聊成交、社群发售转化，每种成交方式的方法和技巧都有所不同。<br/><br/>就拿我一个朋友的朋友圈来举例子：<br/>他的微信朋友圈，内容非常丰富且多样，有专业知识、实事热点解读、营销广告、产品推介、生活感悟等。<br/>这些既是为了做价值输出，也是为了打造个人IP，同时也是解决信任完成成交。<br/>除了日常内容维护之外，还有一些基础配套，是我们需要做好的。<br/><br/>比如：你的<a class="internal" href="https://www.zhihu.com/search?q=%E5%BE%AE%E4%BF%A1%E6%98%B5%E7%A7%B0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2596468382%7D">微信昵称</a>辨识度高吗？好友一看就能明白你是做什么的？<a class="internal" href="https://www.zhihu.com/search?q=%E5%BE%AE%E4%BF%A1%E8%83%8C%E6%99%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2596468382%7D">微信背景</a>作为一个很好的广告位，你有用起来吗？微信上的<a class="internal" href="https://www.zhihu.com/search?q=%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%BB%8B%E7%BB%8D%E8%87%AA%E5%B7%B1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2596468382%7D">一句话介绍自己</a>，你还是写着<a class="internal" href="https://www.zhihu.com/search?q=%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2561531969%7D">心灵鸡汤</a>吗？<br/>当我们去做好这些工作的时候，完成基本成交是没有问题的。<br/>但这远远不够……<br/><br/><b>复购</b><br/><br/>成交需要解决信任，复购才能使企业永续存在。<br/>一家企业如果没有复购，可以说离死亡也就不远了。<br/>复购的好处有很多，比如<b>降低运营成本、优化营销费用、提高单体消费金额</b>等，但还有一个更重要的好处是：<b>客户对<a class="internal" href="https://www.zhihu.com/search?q=%E4%BC%81%E4%B8%9A%E5%93%81%E7%89%8C%E5%BD%A2%E8%B1%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2674368773%7D">企业品牌形象</a>和产品服务的认可</b>。<br/><br/>基于私域体系，客户能够复购的前提有两个，<b>一是我们在成交阶段解决的信任问题，一是企业必须建立强大且专业的产品矩阵</b>。<br/>这也是大部分<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E8%BF%90%E8%90%A5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2596468382%7D">私域流量运营</a>者不愿意对外透露的秘密！<br/>就如一家餐厅，如果只有一道菜，客户哪怕愿意复购，也会在二三次后离去。而如果你的餐厅里有10道菜，客户能够复购的次数可能是8次、10次……<br/><br/><a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2251534199%7D">私域流量体系</a>的建立，只是让我们能够更高频、更多次触达客户，而产品<a class="internal" href="https://www.zhihu.com/search?q=%E7%9F%A9%E9%98%B5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">矩阵</a>的建立，才是每一位私域流量运营者要去考虑的核心中的核心。<br/><a class="internal" href="https://www.zhihu.com/search?q=%E4%BA%A7%E5%93%81%E7%9F%A9%E9%98%B5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">产品矩阵</a>这个话题，后期会单独用几篇文章来阐述，这里就不做过多的展开。<br/>每一套较为成熟的私域流量体系，都必须能够解决：引流、成交和复购三大环节。<br/><br/><b>转介绍与裂变</b><br/><br/>转介绍和裂变，大部分私域玩家会当做是终局，但我个人更愿意理解为锦上添花！也就意味着，这两者的实施与否，既要考虑流量用户的功能充分挖掘，更需要考虑<a class="internal" href="https://www.zhihu.com/search?q=%E8%BD%AC%E4%BB%8B%E7%BB%8D&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2460118955%7D">转介绍</a>和裂变实施过程中的成本与风险把控。<br/>所以，这两个模块就放在一起讲讲。<br/>转介绍，也可以理解为是一种粉丝的精准裂变。而<a class="internal" href="https://www.zhihu.com/search?q=%E5%A4%A7%E9%9D%A2%E7%A7%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2579932959%7D">大面积</a>的裂变，我们会习惯性的认为是1-100、1000、10000的过程，事实上，从1-3-5-8也是一种裂变，只是裂变过程中引发的膨胀效果并没那么大而已。<br/><br/>简单的说，<b>裂变也是一种转介绍</b>。<br/>客户愿意转介绍的前提也可以归纳为两种，一是<b>用户使用你的产品或服务后，感觉特别好，那么他就会向其他用户进行转介绍</b>。<br/>还有一种是，<b>因为你给了用户一定的<a class="internal" href="https://www.zhihu.com/search?q=%E5%88%A9%E7%9B%8A&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2561531969%7D">利益</a>驱动，他自发的分享到朋友圈或其他更多的社群</b>。<br/><br/>但转介绍能够触发的核心还是产品和服务过关，其余的都是锦上添花的做法。<br/>同样的，为什么做私域流量要重视转介绍和裂变？<br/>因为它们可以带来更多的客户，同时还能降低引流成本。当然，因为有口碑价值的输出，也能方便我们快速完成成交。<br/><br/>在整个体系中，要做好转介绍和裂变，需要重点做好4个维度的工作。<br/>一是<b>产品和服务交付过程中的专业度及细致度</b>；<br/>二是<b>企业内部产品矩阵建立时的客群定位延展度</b>；<br/>三是<b>小型转介绍和大型裂变过程中的传播路径设计和激励机制建立</b>；<br/>四是<b>每次裂变时的风险把控</b>（如：触发封号风险、传播频次把控、<a class="internal" href="https://www.zhihu.com/search?q=%E5%8A%A0%E7%BE%A4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2251534199%7D">加群</a>上限处理等）<b>和结果反馈机制</b>。<br/><br/>作为私域体系中的内部<a class="internal" href="https://www.zhihu.com/search?q=%E5%86%8D%E7%94%9F%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">再生循环系统</a>，也是私域流量体系中最容易触发风险的一环，在不深入专研各个平台内部规则的情况下，不是太建议去尝试。<br/><br/><b>一旦被封号，得不偿失</b>！<br/>什么意思呢？<br/>私域流量的前面3个步骤，实际上只要把握一个核心要素：企业被动，客户主动。只要是客户主动添加我们，在大部分情况下是不会触发<a class="internal" href="https://www.zhihu.com/search?q=%E9%A3%8E%E9%99%A9%E6%9C%BA%E5%88%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">风险机制</a>。<br/>而在裂变过程中，由于实施者本身对各个平台的规则研读不清楚，很容易在毫无知觉的情况下引发封号风险。<br/><br/>综合以上内容，我们能够发现：私域流量体系的建立，本质上与实施者的身份无关。<br/>不管是老板还是员工，都可以踊跃尝试。<br/>尤其是在互联网获客成本越来越高的当下，谁具备低成本获取流量的方法，谁就占有先机！<br/>如果能够看懂这篇文章，你做私域流量体系的底层思维就不缺！<br/><br/>剩下的就是入局尝试！（<b><a class="internal" href="https://www.zhihu.com/search?q=%E5%88%98%E4%B8%80%E4%B8%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2666700706%7D">刘一一</a>，10年引流、文案、私域、变现经验，6年专注知识付费实操，擅长私域体系建立和个人IP打造，\/X：</b>sxblyy02）</p><p><a data-ad-id="fee_910b904b27b886f7815b84c0785e247f" data-draft-node="block" data-draft-type="ad-link-card"></a></p><h4 id="文章详细url-https-api-zhihu-com-answers-3111709445"><a href="#文章详细url-https-api-zhihu-com-answers-3111709445" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3111709445"></a>文章详细url:<a href="https://api.zhihu.com/answers/3111709445">https://api.zhihu.com/answers/3111709445</a></h4><h2 id="如何看待公域流量和私域流量？"><a href="#如何看待公域流量和私域流量？" class="headerlink" title="如何看待公域流量和私域流量？"></a>如何看待公域流量和私域流量？</h2><h3 id="内容-14"><a href="#内容-14" class="headerlink" title="内容"></a>内容</h3><p data-pid="r-b8WMw-">1.公域流量和私域流量是什么意思公域流量指商家直接入驻平台实现流量转换，比如大家熟悉的拼多多、京东、淘宝、饿了么等，以及内容付费行业的喜马拉雅、知乎、得到等公域流量平台。私域流量是指从公域（internet）、它域(平台、媒体渠道、合作伙伴等)引流到自己私域（官网、客户名单），以及私域本身产生的流量(访客)。私域流量是可以进行二次以上链接、触达、发售等市场营销活动客户数据。私域流量和域名、商标、商誉一样属于企业私有的经营数字化资产。</p><p data-pid="jEmW5bIs">       早在17、18年的时候，很多互联网公司已经感觉到增量到顶了，要想维持公司的增长势头，有两条路，要么获得新用户，要么让老用户的价值发挥的更大，在流量红利殆尽的当下，挖掘老用户更多的价值成为了所有公司的共识，于是私域流量的概念开始流行起来。私域是指运营客户的能力已经成为企业和品牌最核心的能力之一。</p><p data-pid="1F6bSBgU">       在数字经济时代，企业的核心目标是要从产权的高度上真正去重视和拥有“客户”这个最有价值的资产，并不断提升自己为每个客户创造更丰富价值的能力。从字面理解，公域流量就是流量公共所有，私域流量就是流量私人所有。</p><p data-pid="Jo0-MxkJ">2.私域流量和公域流量的区别</p><p data-pid="X7_kLImt">（1）竞争程度不同：公域流量竞争很大，比如淘宝，同一类型产品可能有几十上百个同行竞争。但私域流量只属于商家自己，没有同行竞争。</p><p data-pid="VWG9FPsT">（2）留存度不同：公域流量池里面由于选择较多，用户比较难以留存，客户很容易流失；但私域流量客户只对接你一人，你还能通过自己的系统来精细化运营，这样留存度较高，粉丝黏性更强。</p><p data-pid="1MRCMARd">（3）运营方向不同：一般来说，当我们运营公域流量时，考虑的是尽可能抓住更多红利流量，以此来扩大粉丝基数；但是在私域流量当中，主要考虑的就是怎么样去保我的流量，同时获得用户更高深度的资产，也就是从用户中获取更多利润。</p><p data-pid="ZKO_088H">（4）转化方式不同：公域流量通常需要通过投放或者是推广来进行获客，而如今流量是不可控的，有时候广告投放效果很差，转化也不好；而私域流量就不同了，当用户被沉淀到我们自己的系统后，之后的活动曝光，通知，营销，会员卡，下单等，均可以通过我们自己的系统实现，无需再投入大量广告费用来争取公域流量中竞争激烈的客户。总之，相对于高投入的公域流量，经营私域流量可以让商家达到降低运营成本，提高利润的目的。公域和私域流量区别很大，如果你想提升客户黏性，增加复购率，那么就需要好好积攒私域流量了。</p><p data-pid="LNuHboas">3.私域流量的特点</p><p data-pid="fzBB_Wtw">（1）.获取难度，取决于你的公域流量来源，譬如你的淘宝店铺、京东、拼多多、线下门店以及你的抖音、微博，日常的老客户和粉丝积累，决定你的私域流量汇聚难度。</p><p data-pid="moW0RF6V">（2）粘性高，拿私域流量的典型代表——微信好友来说，只要一个客户是我的微信好友，我就可以通过发消息、发朋友圈的手段，将我的信息自由、反复、稳定的传递给他（当然，被拉黑就不是私域流量了）。但是想要添加到很多精准的客户很难，毕竟谁都不想自己的微信充斥着太多的商业因素。所以，微商随之诞生。微商就是让普通人，变成微商品牌的分销商。而每个人都会有自己已有的私域流量（亲朋好友），所以这些微商分销商就能够通过自己已有的私域流量，直接进行营销信息的传递。</p><h4 id="文章详细url-https-api-zhihu-com-answers-3145499736"><a href="#文章详细url-https-api-zhihu-com-answers-3145499736" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3145499736"></a>文章详细url:<a href="https://api.zhihu.com/answers/3145499736">https://api.zhihu.com/answers/3145499736</a></h4><h2 id="私域落不了地，怎么办？"><a href="#私域落不了地，怎么办？" class="headerlink" title="私域落不了地，怎么办？"></a>私域落不了地，怎么办？</h2><h3 id="内容-15"><a href="#内容-15" class="headerlink" title="内容"></a>内容</h3><p data-pid="eHsXVBjs">你敢相信吗？通过活动运营打通私域存量增长，帮助中小企业单项目变现近千万。虽然大家都在讨论私域，真正做成项目拿到结果的主要还是头部企业偏多。对于大部分中小企业，想做好私域并不是件容易的事情。</p><p data-pid="4KVLq4zl"><b>方法总比困难多</b>。营销工作十年，经历大大小小近200+项目，都是在“遇到问题-解决问题”的过程中间渡过的。也经历了不少周期，搜索引擎时代、“两微一抖”，形式也从图文到短视频、直播。</p><p data-pid="Z4uVq1ai">如果从一线业务执行落地的角度来看，真正能穿越周期的都是底层能力，也就是硬技能。像文案、活动策划、数据分析等。其中，我比较专注在活动运营这个板块的研究，因为它的综合性更强。</p><p data-pid="REZedZFZ"><b>一、私域存量增长三大体系</b></p><p data-pid="mJlmzb8Z">2018年之后，我开始专注研究企业私域存量增长。也拿到过一些结果，帮助过头部金融公司单项目变现过亿，创业型公司单项目变现近千万。</p><p data-pid="eOVS8qs7">结合在私域存量增长中的实践，我将私域存量运营归纳为三个体系。</p><p data-pid="O_LX0n_1"><b>第一个是活动运营体系</b>。活动既能实现品牌曝光，也能促进销售转化，达到“品效合一”的效果。借助活动运营，可以实现平台的用户拉新、留存、促活到付费转化全流程。活动运营也是日常运营工作中的重要抓手。</p><p data-pid="Ap4RUN7P"><b>第二个是内容运营体系</b>。内容的影响是潜移默化的。“洛阳纸贵”、“一字千金”这些成语也说明了<b>好内容从古至今都有着极高的传播力和影响力。</b></p><p data-pid="ukk86WqK">私域环境当中的IP打造也离不开内容。IP通过不断的内容输出，不局限文字、图片、视频或者音频等方式，在私域存量用户心目中树立人设形象。干货内容可以体现IP自身的专业度，轻松愉快的内容分享则体现IP的另一面。干湿结合，会让IP人设更加立体有温度。</p><p data-pid="GbMmmvuR"><b>第三个是社群运营体系</b>。社群作为私域用户的运营工具，在社群内部可以输出内容和活动信息。通过群公告等方法，传递企业的促销活动，通知全员消息，输出日常打卡活动内容。是与客户沟通的重要桥梁。</p><p data-pid="Fg1ehvEe">内容、活动、社群三个体系之间相互关联，共同促进私域存量增长。</p><p data-pid="OvZ0B86f"><b>二、用心做好课，不求快，要足够扎实</b></p><p data-pid="jXwhlng6">这不是我第一次研发活动运营类课程，不同于过往的课程开发，这次周期最长，打磨最为严格。近三年，开发跟活动运营相关的课程，逐字稿累计30余万字。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic1.zhimg.com/v2-19b218b75b95949196b80c72fed691ec_r.jpg" data-original-token="v2-19b218b75b95949196b80c72fed691ec" data-rawheight="608" data-rawwidth="1080" data-size="normal" src="https://pic1.zhimg.com/v2-19b218b75b95949196b80c72fed691ec_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic1.zhimg.com/v2-19b218b75b95949196b80c72fed691ec_b.jpg" data-caption="" data-original="https://pic1.zhimg.com/v2-19b218b75b95949196b80c72fed691ec_r.jpg" data-original-token="v2-19b218b75b95949196b80c72fed691ec" data-rawheight="608" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='608'&gt;&lt;/svg&gt;" width="1080"/></figure><p data-pid="K8dFnGiK">专业团队做专业的事，“<b>课程打磨-&gt;内容试讲-&gt;直播内测-&gt;正式录制</b>”。课程制作从3月份开始提上日程，直到7月份才完成全部制作。</p><p data-pid="4D04LWHH"><b>（1）课程打磨</b></p><p data-pid="QE4IiCWj">课程制作，最难的部分就是框架结构的设计。既要考虑到专业知识的结构化梳理，也要照顾到用户的学习体验。</p><p data-pid="weKhCj-C">我自己本人也是深度学习用户，花费在学习上面的费用也不少。有些课程质量不错，我会做笔记复盘思考；有些课程质量虽然不好，但是我也会看下课程框架结构。一直以来，我对知识付费的理解，好的课程内容是可以解惑答疑的，但也很考验讲师的功力。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-original="https://pic4.zhimg.com/v2-82c22743a2d1a2e568d8913f28982b6f_r.jpg" data-original-token="v2-82c22743a2d1a2e568d8913f28982b6f" data-rawheight="870" data-rawwidth="1080" data-size="normal" src="https://pic4.zhimg.com/v2-82c22743a2d1a2e568d8913f28982b6f_b.jpg" width="1080"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic4.zhimg.com/v2-82c22743a2d1a2e568d8913f28982b6f_b.jpg" data-caption="" data-original="https://pic4.zhimg.com/v2-82c22743a2d1a2e568d8913f28982b6f_r.jpg" data-original-token="v2-82c22743a2d1a2e568d8913f28982b6f" data-rawheight="870" data-rawwidth="1080" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='1080' height='870'&gt;&lt;/svg&gt;" width="1080"/></figure><p data-pid="LLIjniiU">现在回过头来看这门课程好像没什么。<b>128页PPT，4万多字，课时近3小时。</b>但是为了打磨好每一句话，优化好课程内在逻辑结构，搜集实战项目素材，前后花费将近4个月。一门课只讲一件事，讲透能落地最重要。</p><p data-pid="hUDgsm0b"><b>（2）内容试讲</b></p><p data-pid="3KWXNoBL">常规课程研发没有这个环节，这次是额外增加的。课程初稿打磨结束之后，为了保证接下来的直播效果，进行了一次演练，其实就是模拟直播讲课的场景。</p><p data-pid="bFIMpp-G">内容试讲环节可能要比直播更严格，全程一个人对着电脑屏幕空讲。不像直播，学员还可以提问有互动。</p><p data-pid="ix5qV4EN">内容试讲需要讲师对PPT以及课程内容非常熟悉，一次性讲完所有内容。为了保证试讲效果，需要提前做好充分准备。安静的场地，避免杂音和打扰；足够喝的水，过程中间润润嗓子。当然试讲结束之后，还需要做下复盘总结，不足的地方需要在后面的直播当中避免。需要做好每个细节。</p><p data-pid="cjFVEhfq"><b>（3）直播内测</b></p><p data-pid="8Barh3Pp">在课程正式录制之前，进行了一次MVP（Minimum Viable Product，最小可行产品）打造。直播内测需要做好提前预热，2周不到的时间，社群小范围内招募了100位付费学员。</p><p data-pid="Wb1PPfCo">考虑到大部分学员的上下班时间，开播节点选择晚上。如果不能及时参加直播，也可以观看直播回放。直播过程中，比较关键的环节是穿插问题互动；直播结束之后，也做了问卷调查。针对学员提出的一些新问题，及时补充到课程当中。</p><p data-pid="JqYb9PlE">市场是最好的老师，这也是做直播内测的目的。通过学员的反馈，快速迭代产品，小步快跑，做好产品的优化。</p><p data-pid="CMm6Fsvv"><b>（4）正式录制</b></p><p data-pid="PZBqv59x">课程录制是件大事。找场地（安静封闭）、设备调整（保证视频画质）、情绪状态都很关键。辛辛苦苦做好的课程，要用最好的状态呈现出来。</p><p data-pid="ry3nKgRc">这门课程内容录制将近5个多小时。录制前基本是在试镜头，找角度，声音测试，一切准备就位后才正式录制。额外分享一个小妙招，借助提词器可以提高录课效率。</p><p data-pid="ijcAthkt">欲速则不达。课程总共21小节，采取的方法是分批录制。每完成一个视频录制，再进入下一步。这么做虽然花费较多时间，但可以清晰管理视频素材，做好素材的命名和备份，也能让自己休息调整下状态。</p><p data-pid="Mb2Ui8LP"><b>三、持续深耕，不忘来时路</b></p><p data-pid="i1jlpLox">1厘米宽，1万米深。无论追求学问，还是做企业经营，要有钻研精神。</p><p data-pid="aB57Cngs"><b>自己做项目拿结果只是单向的，教会更多的人才能创造更大的价值。</b>我开始只是业余时间零散的写项目复盘，发布到业内专业平台。后来，不少头部职业教育公司找到我，开始尝试系统梳理自己的项目经验。把这些非常实操的专业技能做成系统的培训课程，借助平台的势能帮助有过同样困惑的年轻人。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-original="https://pic3.zhimg.com/v2-390a1e98ff2ba7b6102a8f7b0f04214c_r.jpg" data-original-token="v2-390a1e98ff2ba7b6102a8f7b0f04214c" data-qrcode-action="hide" data-rawheight="510" data-rawwidth="510" data-size="normal" src="https://pic3.zhimg.com/v2-390a1e98ff2ba7b6102a8f7b0f04214c_b.jpg" width="510"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://pic3.zhimg.com/v2-390a1e98ff2ba7b6102a8f7b0f04214c_b.jpg" data-original="https://pic3.zhimg.com/v2-390a1e98ff2ba7b6102a8f7b0f04214c_r.jpg" data-original-token="v2-390a1e98ff2ba7b6102a8f7b0f04214c" data-qrcode-action="hide" data-rawheight="510" data-rawwidth="510" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='510' height='510'&gt;&lt;/svg&gt;" width="510"/><figcaption>（课程购买页面）</figcaption></figure><p data-pid="_jiYXPrC">每门课程制作都是一次学习过程。从开始的新手期，做课显得稚嫩。到现在有点做课经验，会更加从听课人的视角来梳理内容。好的有价值的课程是一件作品，不仅能帮助你答疑解惑，也是一次心灵的碰撞。</p><p data-pid="fh1gYavr">回归初心，制作课程的目的是希望帮助到更多从业者，能够更加高效的做好项目，拿到结果。</p><p data-pid="sGCXnv4u">四季轮回，大美不言。做企业项目十年，无论以后路走多远，未曾忘记来时的路。</p><p data-pid="1_r1FuoU">如果觉得课程有所帮助，欢迎推荐给你身边想要在私域存量项目中获得增长提升的小伙伴。</p><h4 id="文章详细url-https-api-zhihu-com-answers-3217127749"><a href="#文章详细url-https-api-zhihu-com-answers-3217127749" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3217127749"></a>文章详细url:<a href="https://api.zhihu.com/answers/3217127749">https://api.zhihu.com/answers/3217127749</a></h4><h2 id="私域流量如何打造？为什么要做私域流量？"><a href="#私域流量如何打造？为什么要做私域流量？" class="headerlink" title="私域流量如何打造？为什么要做私域流量？"></a>私域流量如何打造？为什么要做私域流量？</h2><h3 id="内容-16"><a href="#内容-16" class="headerlink" title="内容"></a>内容</h3><p data-pid="i9watdF6">如何快速建立自己的私域流量底层逻辑，</p><p data-pid="Ftq_LM2p">只需要看这篇文章就够了！</p><p data-pid="SsKkY6fk">接下来进入正题：</p><p data-pid="A5f7cD-Y">如果要用一句话来概括私域流量的话，那就是：<b>借助一些平台和工具，持续做好引流和服务，最终实现低成本获客、高频率转化、高收益创造和多频次转介绍的一套思想体系！</b></p><p data-pid="9NDjfNjW">注意！私域流量应该是一套思想体系，而不是简单的单点模式。</p><p data-pid="c82KFSCv">在整个过程中，会涉及到的主要核心点有5个：<b>引流、成交、<a class="internal" href="https://www.zhihu.com/search?q=%E5%A4%8D%E8%B4%AD&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2228810670%7D">复购</a>、转介绍和裂变</b>。明白这5个环节之间的关系，就基本上解决了企业（或个人）打造<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2228810670%7D">私域体系</a></p><p data-pid="Dy4i4v_c">的链路难点问题。</p><p data-pid="FTV8Eto7">当然，对于很多个人想做私域流量来讲，也必须把自己当做一家企业，这个话题，会在以后跟大家详细拆开来阐述。</p><p data-pid="vFWB-8T1">对于5个核心要点之间，存在什么样的关系？</p><p data-pid="ThP2seGd">这才是你所重点关注的。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="L4w_o9z_"><b>引流</b></p><p data-pid="ZiG9bZ55">顾名思义，就是吸引流量。</p><p data-pid="zuYJd8IC">在互联网时代，流量在哪里？</p><p data-pid="04iCQFPJ">我们拿教育行业来举例子，做过市场的朋友会很清楚，我们经常会去小区、学校门口、商超里做地推，通过派送小礼品吸引客户来添加个人微信或留下联系方式。</p><p data-pid="VwQgrG4s">这个链路拆开来就是：<b>公域、诱饵、资源</b>。小区、学校等可以理解为<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222281294905%22%7D">公域流量池</a>；小礼品自然就是诱饵了，而个人微信和联系方式，可以认为是私域池和资源。</p><p data-pid="W0P18p_w">流量的第一种来源就清楚了，那就是很多很多的公域流量池。比如：知乎、<a class="internal" href="https://www.zhihu.com/search?q=%E5%B0%8F%E7%BA%A2%E4%B9%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2228810670%7D">小红书</a>、<a class="internal" href="https://www.zhihu.com/search?q=%E7%AE%80%E4%B9%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222281294905%22%7D">简书</a>、搜狐自媒体等。</p><p data-pid="7GcOGVUF">而基于私域流量范畴，还有第二种流量来源，我们也可以叫做精准流量来源。</p><p data-pid="RezBANV4">依旧拿机构来举例子，我们所有的转介绍客户、直接上门客户、邀约上门未签约客户，实际上都可以认为是<a class="internal" href="https://www.zhihu.com/search?q=%E7%B2%BE%E5%87%86%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222281294905%22%7D">精准流量</a>，这些客户，如果仅仅停留在手机号码层面，还不能叫做私域流量。</p><p data-pid="YAY6cqb6">必须把每个手机号转化为微信个人号上的好友，<a class="internal" href="https://www.zhihu.com/search?q=%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2940896635%7D">微信公众号</a>上的关注，才能算是进入了我们内部的私域流量体系。</p><p data-pid="snnUzNSm">解释完这两种来源后，你应该就很清楚。引流就是通过将公域流量和线下门店精准流量转换为私域平台上的一种做法。</p><p data-pid="FhyHXDEq">如何让用户愿意进入我们预设的轨道当中去？就需要我们精心设计流量用户感兴趣的“诱饵”。可以是顾客刚需使用的物品，也可以是一篇有深度的文章，还可以是一系列实用的<a class="internal" href="https://www.zhihu.com/search?q=%E7%94%B5%E5%AD%90%E6%A1%A3&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222281294905%22%7D">电子档</a>学习资料……</p><p data-pid="6b3fdA4d">当然，除了这两种常用引流方法以外，还有一些企业会通过付费投放、渠道资源置换、社群加人等方式去引流。</p><p data-pid="JNqz_JBE">流量的吸引和获取，只是完成了私域体系建立的第一步！但也是最关键的一步。</p><p data-pid="ozicj3YX"><b>产品、流量，是一门生意能够存在的两大关键要素。</b></p><p data-pid="2o7r1n2p">之所以做私域流量，也是为了使更多低成本获取的流量实现源源不断的成交。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="49XZKxdD"><b>成交</b></p><p data-pid="hyqKKvUi">什么是成交？</p><p data-pid="NvbmvG-S">你的产品（可以是实物，也可以是服务）被你的顾客购买，这就叫做成交！</p><p data-pid="8MA9Uode">做流量不是为了成交，那还不如将钱投入公益慈善事业 。</p><p data-pid="RaD7oe_R">但要做好成交，也不是这么容易。毕竟，流量离成交还有很长一段距离。这段距离用一个词来概括就是：<b>信任问题</b>。</p><p data-pid="zKSJPyGW"><b>一切成交的基础都是源于信任</b>，这是互联网营销中不变的法则！所以，<b>一切成交的实现，都是在解决信任问题</b>，只要解决了信任问题，成交也就是顺水推舟的事情。</p><p data-pid="65a87Qct">也可以这么认为，<b>不购买可以等同于不信任</b>。</p><p data-pid="PnoYc5TI">在之前的文章里有提到过“客户触达”的话题，将客户引导到越多的<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%89%BF%E8%BD%BD%E4%BD%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222281294905%22%7D">私域承载体</a>上，理论上来讲，企业触达客户的频次也会越高，成交的概率也会随之增加。</p><p data-pid="b_kIrUtu">这是私域体系能够在信任问题解决上的第一个优势。其次，因为我们将客户承载在不同地方，而每个地方都有一种内容输出和成交方式。</p><p data-pid="2R-zb5dE">比如微信个人号成交，可以有朋友圈静默转化、一对一私聊成交、社群发售转化，每种成交方式的方法和技巧都有所不同。</p><p data-pid="kQR8d9AB">就拿我一个朋友的朋友圈来举例子：</p><p data-pid="jbRlC2pS">他的微信朋友圈，内容非常丰富且多样，有专业知识、实事热点解读、营销广告、产品推介、生活感悟等。</p><p data-pid="Af9g7QOJ">这些既是为了做价值输出，也是为了打造个人IP，同时也是解决信任完成成交。</p><p data-pid="KfLmovfX">除了日常内容维护之外，还有一些基础配套，是我们需要做好的。</p><p data-pid="X3Qu59DV">比如：你的微信昵称辨识度高吗？好友一看就能明白你是做什么的？微信背景作为一个很好的广告位，你有用起来吗？微信上的一句话介绍自己，你还是写着心灵鸡汤吗？</p><p data-pid="SA2Zusdj">当我们去做好这些工作的时候，完成基本成交是没有问题的。</p><p data-pid="mK-lcX8Q">但这远远不够……</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="nUsICWaX"><b>复购</b></p><p data-pid="M3zYHDNI">成交需要解决信任，复购才能使企业永续存在。</p><p data-pid="7YXmYNqL">一家企业如果没有复购，可以说离死亡也就不远了。</p><p data-pid="6vojtC-9">复购的好处有很多，比如<b>降低运营成本、优化营销费用、提高单体消费金额</b>等，但还有一个更重要的好处是：<b>客户对企业品牌形象和产品服务的认可</b>。</p><p data-pid="JiE-ucdo">基于私域体系，客户能够复购的前提有两个，<b>一是我们在成交阶段解决的信任问题，一是企业必须建立强大且专业的产品矩阵</b>。</p><p data-pid="4IZP_hSk">这也是大部分私域流量运营者不愿意对外透露的秘密！</p><p data-pid="Tvv9MMtJ">就如一家餐厅，如果只有一道菜，客户哪怕愿意复购，也会在二三次后离去。而如果你的餐厅里有10道菜，客户能够复购的次数可能是8次、10次……</p><p data-pid="NgrHoekR"><a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2228810670%7D">私域流量体系</a>的建立，只是让我们能够更高频、更多次触达客户，而产品矩阵的建立，才是每一位私域流量运营者要去考虑的核心中的核心。</p><p data-pid="ztFAtFti">产品<a class="internal" href="https://www.zhihu.com/search?q=%E7%9F%A9%E9%98%B5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2228810670%7D">矩阵</a>这个话题，后期会单独用几篇文章来阐述，这里就不做过多的展开。</p><p data-pid="FDPeZph7">每一套较为成熟的私域流量体系，都必须能够解决：引流、成交和复购三大环节。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="vhKnKutL"><b>转介绍与裂变</b></p><p data-pid="j_yYgfBF">转介绍和裂变，大部分私域玩家会当做是终局，但我个人更愿意理解为锦上添花！也就意味着，这两者的实施与否，既要考虑流量用户的功能充分挖掘，更需要考虑<a class="internal" href="https://www.zhihu.com/search?q=%E8%BD%AC%E4%BB%8B%E7%BB%8D&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222281294905%22%7D">转介绍</a>和裂变实施过程中的成本与风险把控。</p><p data-pid="gcuGFT2T">所以，这两个模块就放在一起讲讲。</p><p data-pid="LzVhvOq5">转介绍，也可以理解为是一种粉丝的精准裂变。而大面积的裂变，我们会习惯性的认为是1-100、1000、10000的过程，事实上，从1-3-5-8也是一种裂变，只是裂变过程中引发的膨胀效果并没那么大而已。</p><p data-pid="7swf-VON">简单的说，<b>裂变也是一种转介绍</b>。</p><p data-pid="vtfNtSIC">客户愿意转介绍的前提也可以归纳为两种，一是<b>用户使用你的产品或服务后，感觉特别好，那么他就会向其他用户进行转介绍</b>。</p><p data-pid="PzDV4Fag">还有一种是，<b>因为你给了用户一定的利益驱动，他自发的分享到朋友圈或其他更多的社群</b>。</p><p data-pid="31jEM6Ww">但转介绍能够触发的核心还是产品和服务过关，其余的都是锦上添花的做法。</p><p data-pid="mk6Xarzi">同样的，为什么做私域流量要重视转介绍和裂变？</p><p data-pid="rO5NPyFa">因为它们可以带来更多的客户，同时还能降低引流成本。当然，因为有口碑价值的输出，也能方便我们快速完成成交。</p><p data-pid="CQnLD-Bu">在整个体系中，要做好转介绍和裂变，需要重点做好4个维度的工作。</p><p data-pid="fbBy_8K7">一是<b>产品和服务交付过程中的专业度及细致度</b>；</p><p data-pid="7M0mLmNs">二是<b>企业内部产品矩阵建立时的客群定位延展度</b>；</p><p data-pid="_FWG2cY_">三是<b>小型转介绍和大型裂变过程中的传播路径设计和激励机制建立</b>；</p><p data-pid="fC2WyI4x">四是<b>每次裂变时的风险把控</b>（如：触发封号风险、传播频次把控、<a class="internal" href="https://www.zhihu.com/search?q=%E5%8A%A0%E7%BE%A4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2251669190%7D">加群</a></p><p data-pid="5kFwjO7Q">上限处理等）<b>和结果反馈机制</b>。</p><p data-pid="Y6joioXW">作为私域体系中的<a class="internal" href="https://www.zhihu.com/search?q=%E5%86%85%E9%83%A8%E5%86%8D%E7%94%9F%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2228810670%7D">内部再生循环系统</a>，也是私域流量体系中最容易触发风险的一环，在不深入专研各个平台内部规则的情况下，不是太建议去尝试。</p><p class="ztext-empty-paragraph"><br/></p><p data-pid="zXDyzbFC"><b>一旦被封号，得不偿失</b>！</p><p data-pid="NSr4ofAL">什么意思呢？</p><p data-pid="cAce2m_c">私域流量的前面3个步骤，实际上只要把握一个核心要素：企业被动，客户主动。只要是客户主动添加我们，在大部分情况下是不会触发<a class="internal" href="https://www.zhihu.com/search?q=%E9%A3%8E%E9%99%A9%E6%9C%BA%E5%88%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2228810670%7D">风险机制</a>。</p><p data-pid="Mnw9Brbo">而在裂变过程中，由于实施者本身对各个平台的规则研读不清楚，很容易在毫无知觉的情况下引发封号风险。</p><p data-pid="fTnkF7AU">综合以上内容，我们能够发现：私域流量体系的建立，本质上与实施者的身份无关。</p><p data-pid="oF5MrTK5">不管是老板还是员工，都可以踊跃尝试。</p><p data-pid="beUMHPRs">尤其是在互联网获客成本越来越高的当下，谁具备低成本获取流量的方法，谁就占有先机！</p><p data-pid="rOho3jW_">如果能够看懂这篇文章，你做私域流量体系的底层思维就不缺！</p><p data-pid="oxubbvuS">剩下的就是入局尝试！</p><p data-pid="iNuxRnw5">另外，<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222839803043%22%7D">私域</a>的整套体系，建议拿在自己手上，外人来做，不是很靠谱。</p><p data-pid="MC0KVjYS">刚看到的一个提问：<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222839803043%22%7D">私域流量</a>的作用是什么？我相信，不少朋友都有这样的疑问。 ​ ​</p><p data-pid="ZtjBsZuv">用通俗一点的例子来解释就是：高铁上卖盒饭！如果车厢是一个私域载体，那每一个站点上来的乘客就都是基于公域到私域的引流。​整个高铁站的乘客，都叫做<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222839803043%22%7D">公域流量</a>。 ​ ​</p><p data-pid="kv4b_8Jr">乘客从高铁站到车厢，就由公域导入到了<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E8%BD%BD%E4%BD%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222839803043%22%7D">私域载体</a>。这个过程称作引流。​引流过后，乘客在各自站点上车，成为私域载体上的一员。 ​ ​</p><p data-pid="3yx113o_">私域流量集中之后，我们需要对他们进行维护和转化，盒饭是其中一个产品。从上午11点，到下午2点，分时段从第一节车厢到最后一节，来回叫卖，这个过程叫做“触达”。 ​ ​</p><p data-pid="WOyuQph0">理论上，触达是有成本的。但因为集中到了车厢这个私域载体上，卖家每次触达用户，并不需要付出成本。所以，私域的其中一个作用是降低转化成本。 ​ ​</p><p data-pid="DCpB1XWQ">其二，如果乘客没有集中在车厢里，你每一次想触达客户之前，就都需要向<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222839803043%22%7D">公域流量池</a>支付一定的引流费用。N次触达就需要支付N次引流费用。有了私域之后，我们只需要支付一次公域引流成本。 ​ ​</p><p data-pid="QeOh1aSO">再者，由于所有乘客都集中在车厢里，且列车上只有一家卖特定的产品，以及每次触达成本几乎为0。卖家就能在不同时段，不同地域，进行叫卖，以确保无论何时产生的用户需求都能得到充分满足。从而提高用户的利用率。 ​ ​</p><p data-pid="xCoGydpQ">用户利用率的提高，对应的就是获客成本的降低，销售额的增加。 ​ ​</p><p data-pid="9tWOwAfS">私域在接下来的内循环经济时代，每一家想低成本获客、高利润转化的企业，都不得不面对的一道坎。 ​ ​</p><p data-pid="bsjwK7Uv">我们再大胆想想，假如你有一个基数为1000的用户私域池子，这里能多产生多少价值？假如你有100个产品，又能增加多少收益？</p><p data-pid="GnSA5tTf">事实上，任何一家企业，本质上就是一个私域载体，只是我们暂时没有发现一条路径，去把这些用户转化到线上维护和持续转化。 ​ ​</p><p data-pid="qmF1OCCv">另外，要提醒一下，<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222839803043%22%7D">公域</a>和私域，非对立，是融合。企业持续经营，需要看清，私域是长久之计，但私域能够持续的核心，实际上就是公域的持续引流。 ​ ​</p><p data-pid="a9_hIX_T">一旦自己建立了体系，就会清楚，很多反智的碎片化内容，其实就是迷惑我们的假象。而真相是，我们必须建立自己的、系统的<a class="internal" href="https://www.zhihu.com/search?q=%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222839803043%22%7D">信息茧房</a>。如此才能不被别人的定义收割。（<b><a class="internal" href="https://www.zhihu.com/search?q=%E5%88%98%E4%B8%80%E4%B8%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%222839803043%22%7D">刘一一</a>，10年引流、文案、私域、变现经验，6年专注知识付费实操，擅长私域体系建立和个人IP打造，</b>，\/X：sxblyy02）</p><p><a data-ad-id="fee_910b904b27b886f7815b84c0785e247f" data-draft-node="block" data-draft-type="ad-link-card"></a></p><h4 id="文章详细url-https-api-zhihu-com-answers-3289505881"><a href="#文章详细url-https-api-zhihu-com-answers-3289505881" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3289505881"></a>文章详细url:<a href="https://api.zhihu.com/answers/3289505881">https://api.zhihu.com/answers/3289505881</a></h4><h2 id="为什么要做私域流量？"><a href="#为什么要做私域流量？" class="headerlink" title="为什么要做私域流量？"></a>为什么要做私域流量？</h2><h3 id="内容-17"><a href="#内容-17" class="headerlink" title="内容"></a>内容</h3><p data-pid="1e1u-Iwk">感谢邀请：为什么要做私域流量？这就要说私域的本质了。</p><p data-pid="GBvwqGad">前段时间，我们分享过非常多私域运营技巧和方案，那资料君今天给大家聊聊，私域流量的本质是什么？</p><p data-pid="OG6uSA-5">私域运营是一种数字营销策略，其本质是建立和维护与客户、受众或用户的直接关系，以实现品牌建设、用户互动、销售和忠诚度提升等目标。</p><p data-pid="VSNDcHS9">私域流量指的是来自已建立的、自有的数字平台和渠道的流量，例如品牌的小程序、微信、微信群等。</p><p data-pid="wb7tnM_C">与之相对的是公域流量，即来自第三方平台和渠道（如各大搜索引擎、抖音快手等自媒体平台等）的流量。</p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-b02c4c3aa1f1958bb060e1a15526ad76_b.jpg" data-original="https://picx.zhimg.com/v2-3a8ae4da4538fcd1f5f5ad4e4b90bf75_r.jpg" data-original-token="v2-dac8d5cd295512ada72da79f8e21538e" data-rawheight="441" data-rawwidth="762" data-size="normal" src="https://picx.zhimg.com/v2-3a8ae4da4538fcd1f5f5ad4e4b90bf75_b.jpg" width="762"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://picx.zhimg.com/v2-3a8ae4da4538fcd1f5f5ad4e4b90bf75_b.jpg" data-caption="" data-default-watermark-src="https://pic1.zhimg.com/v2-b02c4c3aa1f1958bb060e1a15526ad76_b.jpg" data-original="https://picx.zhimg.com/v2-3a8ae4da4538fcd1f5f5ad4e4b90bf75_r.jpg" data-original-token="v2-dac8d5cd295512ada72da79f8e21538e" data-rawheight="441" data-rawwidth="762" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='762' height='441'&gt;&lt;/svg&gt;" width="762"/></figure><p data-pid="opxZfKqj">新学运营的伙伴，还在问我，为什么私域运营的载体要选择<b>微信生态？</b></p><p data-pid="pw35pP4A">因为微信是目前最大的社交媒体平台之一，拥有数以亿计的活跃用户。这个庞大的用户基础为私域运营提供了广阔的市场和潜在的客户群体。</p><p data-pid="RGucNL8p">微信提供了多种功能，包括聊天、公众号、小程序、朋友圈等，这些功能可以用于不同类型的私域运营活动。</p><p data-pid="aS0NwbqL">比如，你可以通过公众号发布内容，通过小程序提供服务，通过朋友圈与客户互动，</p><p data-pid="wzzXICdu">同时它提供了许多工具和数据分析功能，帮助你更好地了解你的受众，根据他们的需求和兴趣进行精细化运营，这可以帮助你提供更个性化的服务和产品，提高客户满意度。</p><p data-pid="rKVWQ7l7">再就是，目前的支付功能，微信支付是中国最流行的移动支付方式之一，可以方便地进行线上交易。</p><p data-pid="Vzlkaeqx">这使得在微信上进行私域运营的品牌能够更轻松地实现销售和变现。</p><p data-pid="6atVC1Vq">什么是私域的本质呢？与客户终身价值有关系吗？</p><p data-pid="wocEzxfy">下面一起来看看：</p><p data-pid="bGVsdwIq"><b>1.私域本质</b></p><p data-pid="WnAOgoAj">私域流量的本质可以总结为以下几点：</p><p data-pid="x8GJjAzz">①用户拥有权: 私域流量的关键是企业拥有对用户数据和互动的掌控权</p><p data-pid="BYuA-K2o">②长期价值: 建立持久的、互惠的关系，以便长期吸引、留住客户，并不断提高他们的价值。这与公域流量通常更侧重于短期转化的特性不同。</p><p data-pid="rBac5pgH">③品牌塑造: 通过自有渠道，传达品牌故事、价值观和个性，以塑造受众对品牌的认知和情感连接。</p><p data-pid="Ncy3HWGQ">④用户参与:在私域里，我们的用户可以通过私聊互动、朋友圈营销、社群交流、会员消费等方式实现。这就有助于建立用户忠诚度和口碑。</p><p data-pid="u1BMFVLV">⑤数据驱动决策:在公域数据我们收集不到，但在私域我们就不一样，你可以更好和客户建立联系，获得更多客户画像数据，为每次活动打下数据基础。</p><p data-pid="VKQeVOwp">私域运营这一战略的目标是降低依赖第三方平台，并在数字营销中建立更加可持续和有利可图的模模式。</p><p data-pid="ciDTjI5S">在营销里，你是不是也听说客户终身价值。</p><p data-pid="f5e9qDBd">很肯定的说：<b>未来，客户的终身价值是企业必争之地。</b></p><p data-pid="Kk-Lv9Qs">都知道，向现有客户推销比获得新客户要容易得多。每一个销售最不希望的事情就是做一锤子买卖，客户就流失了。</p><p data-pid="wMM7ABuu">想要解决这种情况的最佳方法之一是了解客户的终身价值。</p><p data-pid="inKVUKDX">这样做将帮助我们获得并留住相对高价值的客户，而且随着时间的推移，这也将带来更多的收入。</p><p data-pid="X062YPYT"><b>客户终身价值（Customer Lifetime Value），是客户生命周期价值是一个指标，用来表明在整个业务关系中可以从单个客户合理预期的总收入，该指标考虑到客户给我们持续带来的价值。</b></p><p data-pid="qr3EOYCD">平时我们客服话术和销售服务流程直接影响着客户的终身价值指数，如果还不理解这块的重要性，或者不会怎么去做。</p><p data-pid="u_E2-Ipv">那你可以看看：</p><p data-pid="UWQ_iljR"><b>原文：<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/QsEackO8fdHZrAM5ojsyVQ" rel="nofollow noreferrer" target="_blank">私域如何打造完整的客户服务流程？5个步骤为你解读！（文末含SOP参考）</a></b></p><figure data-size="normal"><noscript><img class="origin_image zh-lightbox-thumb" data-original="https://picx.zhimg.com/v2-385bbfe036c72befbda40bdc442d9979_r.jpg" data-original-token="v2-385bbfe036c72befbda40bdc442d9979" data-rawheight="255" data-rawwidth="585" data-size="normal" src="https://picx.zhimg.com/v2-385bbfe036c72befbda40bdc442d9979_b.jpg" width="585"/></noscript><img class="origin_image zh-lightbox-thumb lazy" data-actualsrc="https://picx.zhimg.com/v2-385bbfe036c72befbda40bdc442d9979_b.jpg" data-original="https://picx.zhimg.com/v2-385bbfe036c72befbda40bdc442d9979_r.jpg" data-original-token="v2-385bbfe036c72befbda40bdc442d9979" data-rawheight="255" data-rawwidth="585" data-size="normal" src="data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='585' height='255'&gt;&lt;/svg&gt;" width="585"/><figcaption>私域运营</figcaption></figure><p data-pid="x-MPMU0X">客户留在一家公司消费的时间越长，他们的终身价值就越大。</p><p data-pid="dozA18UV">正如，你不服务好客户，你就只能不断去找客户。做好私域和客户的终身价值是什么关系呢？</p><p data-pid="ph9an99p"><b>2.提升客户的终身价值</b></p><p data-pid="xpb51Gzt">当你了解了私域运营的本质，我们来聊聊客户的终身价值，我给大家举个例子：</p><p data-pid="lEc1Fxnd"><b>在抖音上认识了王先生，希望获得一个宠物狗的喂养指南，然后通过公域加到我的私域里。</b></p><p data-pid="3TYPzeyx"><b>王先生在我私域活动里，购买了189元的狗粮，偶尔发现我还有其他品种的宠物狗，刚好他的朋友李先生要买狗，这时候他把他自己的好友李先生介绍给我了。</b></p><p data-pid="J6OumO3C"><b>李先生通过王先生的转介绍，成功选购走一只宠物狗，这个单我赚了500块。</b></p><p data-pid="us-D6M_1"><b>过了2个星期，李先生也购买了萌宠装饰品，一共消费了900元，又介绍了他爱人的朋友陈女士给我……</b></p><p data-pid="7MjvqXj4">大家可以看看这个过程……</p><p data-pid="IvzH3kCd">由王先生这个忠实的客户，给我带来的客户有多少个？</p><p data-pid="rvA6XdTP">这个自动转介绍的过程可能还会持续下去……</p><p data-pid="9qvY2Ee9">为什么会转介绍，因为我给的服务好，产品好，王先生认可了，久而久之我们信任更强了。</p><p data-pid="F0Vue3Ac">所以，私域运营和客户的终身价值之间存在密切关系。</p><p data-pid="6C_bUvf6">私域运营旨在建立和维护与客户的直接关系，以实现品牌建设、用户互动、销售和忠诚度提升等目标。</p><p data-pid="rt3vYRF-">这与客户的终身价值密切相关，因为：</p><p data-pid="CHSrQtyg"><b>①客户忠诚度：</b>通过私域运营，可以更好地与客户建立深度关系。这种关系可以促使客户更加忠诚，他们更有可能多次购买您的产品或服务，从而提高了客户的终身价值。</p><p data-pid="Z7eRBgw7"><b>②个性化互动：</b>私域运营能够更好地了解客户，从而能够提供更个性化的互动和服务。这种个性化的互动可以增加客户的满意度，使他们更愿意与您保持长期关系。</p><p data-pid="1qYlTdwr"><b>③持续价值提升：</b>通过私域运营，可以不断提供有价值的内容、优惠和信息，以吸引客户自动转介绍，再给我们介绍客户来。</p><p data-pid="sXIqE3U8">这有助于延长客户的生命周期，从而增加了他们的终身价值。</p><p data-pid="dhf41uLp">这对于企业的长期成功和可持续增长非常重要。</p><p data-pid="3NFNa4IW">如果喜欢，可以持续关注我，会陆续为你更新更多干货小知识。</p><p data-pid="Xgno1vsn"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/bsAmJ1VaftaaxbyMHKTIKg" rel="nofollow noreferrer" target="_blank">私域：注意力稀缺，新人如何做好社群运营全流程？（文末有SOP领取）</a></b></p><p data-pid="IOdw0O6y"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/ZynI8sRzkEZsoYfjPgO4TA" rel="nofollow noreferrer" target="_blank">如何打造价值千万的用户数据库？这套私域用户标签体系SOP值得你收藏！</a></b></p><p data-pid="N7s48OH5"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzkxMTQ5OTM0MA%3D%3D%26mid%3D2247485146%26idx%3D2%26sn%3Db2aa457927f5a1a2e576e7a6fcbd6283%26chksm%3Dc11a0ff9f66d86eff6346bcf0ee9bd8b3db3719867e435951dc831c18d73904a27eca7ab4d3e%26scene%3D178%26cur_album_id%3D2982108775228620802%23rd" rel="nofollow noreferrer" target="_blank">新手做视频号？这套视频号运营及直播SOP资料值得你收藏（文末领）</a></b></p><p data-pid="4vKKTW-b"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzkxMTQ5OTM0MA%3D%3D%26mid%3D2247485079%26idx%3D1%26sn%3Df0c4683db9f8d4e97b476241afe468e0%26chksm%3Dc11a0fb4f66d86a2a81adebac981515ababe754907da2cdce4f4f089eb79ff218e37b2c37e0b%26token%3D1394526484%26lang%3Dzh_CN%23rd" rel="nofollow noreferrer" target="_blank">企业私域流量池的资源怎么运营？（内含运营SOP）</a></b></p><p data-pid="VMcng-Xd"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzkxMTQ5OTM0MA%3D%3D%26mid%3D2247485079%26idx%3D2%26sn%3D96cb45a6661fdb42d919ab2789824b8e%26chksm%3Dc11a0fb4f66d86a2cf99009979277bf98d851b439f87ee92f6ea6bcedcb995a34395a3646a7b%26token%3D1394526484%26lang%3Dzh_CN%23rd" rel="nofollow noreferrer" target="_blank">注意力稀缺，新人如何做好社群运营全流程？（文末有SOP领取）</a></b></p><p data-pid="EFYByvkO"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzkxMTQ5OTM0MA%3D%3D%26mid%3D2247484739%26idx%3D1%26sn%3D8b846fc5ed21491c2a203dd1e4323cfd%26scene%3D21%23wechat_redirect" rel="nofollow noreferrer" target="_blank">拉新，转化，再裂变社群话术模板SOP（文末领）。</a></b></p><p data-pid="0Y1b58cN"><b><a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzkxMTQ5OTM0MA%3D%3D%26mid%3D2247484739%26idx%3D3%26sn%3D2354eb92cb86353331214df06ceaaa23%26chksm%3Dc11a0c60f66d8576922dc2b1b4795e0578b81149701979aa2ec8c9554a1090245a3da76950d2%26token%3D1394526484%26lang%3Dzh_CN%23rd" rel="nofollow noreferrer" target="_blank">企业微信优势是什么？（含防封及养号经验）</a></b></p><p data-pid="mBiqGykb">好了，如觉得本文有帮助，可以点赞加关注（必回关），收藏起来哦。创作不易。感谢你的阅读。</p><h4 id="文章详细url-https-api-zhihu-com-answers-3213377848"><a href="#文章详细url-https-api-zhihu-com-answers-3213377848" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3213377848"></a>文章详细url:<a href="https://api.zhihu.com/answers/3213377848">https://api.zhihu.com/answers/3213377848</a></h4><h2 id="私域流量怎么做转化"><a href="#私域流量怎么做转化" class="headerlink" title="私域流量怎么做转化?"></a>私域流量怎么做转化?</h2><h3 id="内容-18"><a href="#内容-18" class="headerlink" title="内容"></a>内容</h3><p data-pid="SD9xcsBa"><b>如何快速建立自己的<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">私域流量</a>底层逻辑，</b><br/>只需要看这篇文章就够了！<br/>接下来进入正题：<br/>如果要用一句话来概括私域流量的话，那就是：<b>借助一些平台和工具，持续做好引流和服务，最终实现低成本获客、高频率转化、高收益创造和多频次转介绍的一套思想体系！</b></p><p data-pid="w3d-GbPN"><br/>注意！私域流量应该是一套思想体系，而不是简单的单点模式。<br/>在整个过程中，会涉及到的主要核心点有5个：<b>引流、成交、<a class="internal" href="https://www.zhihu.com/search?q=%E5%A4%8D%E8%B4%AD&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">复购</a>、转介绍和裂变</b>。明白这5个环节之间的关系，就基本上解决了企业（或个人）打造<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">私域体系</a>的链路难点问题。<br/><br/>当然，对于很多个人想做私域流量来讲，也必须把自己当做一家企业，这个话题，会在以后跟大家详细拆开来阐述。<br/>对于5个核心要点之间，存在什么样的关系？<br/>这才是你所重点关注的。<br/><br/><b>引流</b><br/>顾名思义，就是吸引流量。<br/>在互联网时代，流量在哪里？<br/>我们拿教育行业来举例子，做过市场的朋友会很清楚，我们经常会去小区、学校门口、商超里做地推，通过派送小礼品吸引客户来添加个人微信或留下联系方式。<br/><br/>这个链路拆开来就是：<b>公域、诱饵、资源</b>。小区、学校等可以理解为<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2460118955%7D">公域流量池</a>；小礼品自然就是诱饵了，而个人微信和联系方式，可以认为是私域池和资源。<br/>流量的第一种来源就清楚了，那就是很多很多的公域流量池。比如：知乎、<a class="internal" href="https://www.zhihu.com/search?q=%E5%B0%8F%E7%BA%A2%E4%B9%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">小红书</a>、<a class="internal" href="https://www.zhihu.com/search?q=%E7%AE%80%E4%B9%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2340836182%7D">简书</a>、搜狐自媒体等。<br/><br/>而基于私域流量范畴，还有第二种流量来源，我们也可以叫做精准流量来源。<br/>依旧拿机构来举例子，我们所有的转介绍客户、直接上门客户、邀约上门未签约客户，实际上都可以认为是<a class="internal" href="https://www.zhihu.com/search?q=%E7%B2%BE%E5%87%86%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">精准流量</a>，这些客户，如果仅仅停留在手机号码层面，还不能叫做私域流量。<br/>必须把每个手机号转化为微信个人号上的好友，<a class="internal" href="https://www.zhihu.com/search?q=%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2460118955%7D">微信公众号</a>上的关注，才能算是进入了我们内部的私域流量体系。<br/><br/>解释完这两种来源后，你应该就很清楚。引流就是通过将<a class="internal" href="https://www.zhihu.com/search?q=%E5%85%AC%E5%9F%9F%E6%B5%81%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">公域流量</a>和线下门店精准流量转换为私域平台上的一种做法。<br/>如何让用户愿意进入我们预设的轨道当中去？就需要我们精心设计流量用户感兴趣的“诱饵”。可以是顾客刚需使用的物品，也可以是一篇有深度的文章，还可以是一系列实用的电子档学习资料……<br/><br/>当然，除了这两种常用引流方法以外，还有一些企业会通过付费投放、渠道资源置换、社群加人等方式去引流。<br/>流量的吸引和获取，只是完成了私域体系建立的第一步！但也是最关键的一步。<br/><b>产品、流量，是一门生意能够存在的两大关键要素。</b><br/>之所以做私域流量，也是为了使更多低成本获取的流量实现源源不断的成交。<br/><br/><b>成交</b><br/><br/>什么是成交？<br/>你的产品（可以是实物，也可以是服务）被你的顾客购买，这就叫做成交！<br/>做流量不是为了成交，那还不如将钱投入公益慈善事业 。<br/>但要做好成交，也不是这么容易。毕竟，流量离成交还有很长一段距离。这段距离用一个词来概括就是：<b>信任问题</b>。<br/><br/><b>一切成交的基础都是源于信任</b>，这是互联网营销中不变的法则！所以，<b>一切成交的实现，都是在解决信任问题</b>，只要解决了信任问题，成交也就是顺水推舟的事情。<br/>也可以这么认为，<b>不购买可以等同于不信任</b>。<br/>在之前的文章里有提到过“客户触达”的话题，将客户引导到越多的<a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%89%BF%E8%BD%BD%E4%BD%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2460118955%7D">私域承载体</a>上，理论上来讲，企业触达客户的频次也会越高，成交的概率也会随之增加。<br/><br/>这是私域体系能够在信任问题解决上的第一个优势。其次，因为我们将客户承载在不同地方，而每个地方都有一种内容输出和成交方式。<br/>比如微信个人号成交，可以有朋友圈静默转化、一对一私聊成交、社群发售转化，每种成交方式的方法和技巧都有所不同。<br/><br/>就拿我一个朋友的朋友圈来举例子：<br/>他的微信朋友圈，内容非常丰富且多样，有专业知识、实事热点解读、营销广告、产品推介、生活感悟等。<br/>这些既是为了做价值输出，也是为了打造个人IP，同时也是解决信任完成成交。<br/>除了日常内容维护之外，还有一些基础配套，是我们需要做好的。<br/><br/>比如：你的微信昵称辨识度高吗？好友一看就能明白你是做什么的？微信背景作为一个很好的广告位，你有用起来吗？微信上的一句话介绍自己，你还是写着心灵鸡汤吗？<br/>当我们去做好这些工作的时候，完成基本成交是没有问题的。<br/>但这远远不够……<br/><br/><b>复购</b><br/><br/>成交需要解决信任，复购才能使企业永续存在。<br/>一家企业如果没有复购，可以说离死亡也就不远了。<br/>复购的好处有很多，比如<b>降低运营成本、优化营销费用、提高单体消费金额</b>等，但还有一个更重要的好处是：<b>客户对企业品牌形象和产品服务的认可</b>。<br/><br/>基于私域体系，客户能够复购的前提有两个，<b>一是我们在成交阶段解决的信任问题，一是企业必须建立强大且专业的产品矩阵</b>。<br/>这也是大部分私域流量运营者不愿意对外透露的秘密！<br/>就如一家餐厅，如果只有一道菜，客户哪怕愿意复购，也会在二三次后离去。而如果你的餐厅里有10道菜，客户能够复购的次数可能是8次、10次……<br/><br/><a class="internal" href="https://www.zhihu.com/search?q=%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2251534199%7D">私域流量体系</a>的建立，只是让我们能够更高频、更多次触达客户，而产品<a class="internal" href="https://www.zhihu.com/search?q=%E7%9F%A9%E9%98%B5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">矩阵</a>的建立，才是每一位私域流量运营者要去考虑的核心中的核心。<br/><a class="internal" href="https://www.zhihu.com/search?q=%E4%BA%A7%E5%93%81%E7%9F%A9%E9%98%B5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">产品矩阵</a>这个话题，后期会单独用几篇文章来阐述，这里就不做过多的展开。<br/>每一套较为成熟的私域流量体系，都必须能够解决：引流、成交和复购三大环节。<br/><br/><b>转介绍与裂变</b><br/><br/>转介绍和裂变，大部分私域玩家会当做是终局，但我个人更愿意理解为锦上添花！也就意味着，这两者的实施与否，既要考虑流量用户的功能充分挖掘，更需要考虑<a class="internal" href="https://www.zhihu.com/search?q=%E8%BD%AC%E4%BB%8B%E7%BB%8D&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3139368322%7D">转介绍</a>和裂变实施过程中的成本与风险把控。<br/>所以，这两个模块就放在一起讲讲。<br/>转介绍，也可以理解为是一种粉丝的精准裂变。而大面积的裂变，我们会习惯性的认为是<a class="internal" href="https://www.zhihu.com/search?q=1-100&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3139368322%7D">1-100</a>、1000、10000的过程，事实上，从<a class="internal" href="https://www.zhihu.com/search?q=1-3-5-8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A3139368322%7D">1-3-5-8</a>也是一种裂变，只是裂变过程中引发的膨胀效果并没那么大而已。<br/><br/>简单的说，<b>裂变也是一种转介绍</b>。<br/>客户愿意转介绍的前提也可以归纳为两种，一是<b>用户使用你的产品或服务后，感觉特别好，那么他就会向其他用户进行转介绍</b>。<br/>还有一种是，<b>因为你给了用户一定的利益驱动，他自发的分享到朋友圈或其他更多的社群</b>。<br/><br/>但转介绍能够触发的核心还是产品和服务过关，其余的都是锦上添花的做法。<br/>同样的，为什么做私域流量要重视转介绍和裂变？<br/>因为它们可以带来更多的客户，同时还能降低引流成本。当然，因为有口碑价值的输出，也能方便我们快速完成成交。<br/><br/>在整个体系中，要做好转介绍和裂变，需要重点做好4个维度的工作。<br/>一是<b>产品和服务交付过程中的专业度及细致度</b>；<br/>二是<b>企业内部产品矩阵建立时的客群定位延展度</b>；<br/>三是<b>小型转介绍和大型裂变过程中的传播路径设计和激励机制建立</b>；<br/>四是<b>每次裂变时的风险把控</b>（如：触发封号风险、传播频次把控、<a class="internal" href="https://www.zhihu.com/search?q=%E5%8A%A0%E7%BE%A4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2251534199%7D">加群</a>上限处理等）<b>和结果反馈机制</b>。<br/><br/>作为私域体系中的内部<a class="internal" href="https://www.zhihu.com/search?q=%E5%86%8D%E7%94%9F%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">再生循环系统</a>，也是私域流量体系中最容易触发风险的一环，在不深入专研各个平台内部规则的情况下，不是太建议去尝试。<br/><br/><b>一旦被封号，得不偿失</b>！<br/>什么意思呢？<br/>私域流量的前面3个步骤，实际上只要把握一个核心要素：企业被动，客户主动。只要是客户主动添加我们，在大部分情况下是不会触发<a class="internal" href="https://www.zhihu.com/search?q=%E9%A3%8E%E9%99%A9%E6%9C%BA%E5%88%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">风险机制</a>。<br/>而在裂变过程中，由于实施者本身对各个平台的规则研读不清楚，很容易在毫无知觉的情况下引发封号风险。<br/><br/>综合以上内容，我们能够发现：私域流量体系的建立，本质上与实施者的身份无关。<br/>不管是老板还是员工，都可以踊跃尝试。<br/>尤其是在互联网获客成本越来越高的当下，谁具备低成本获取流量的方法，谁就占有先机！<br/>如果能够看懂这篇文章，你做私域流量体系的底层思维就不缺！<br/><br/>剩下的就是入局尝试！（<b><a class="internal" href="https://www.zhihu.com/search?q=%E5%88%98%E4%B8%80%E4%B8%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2238209754%7D">刘一一</a>，坚持写作10余年，擅长私域体系建立和个人IP打造，</b>\/X：sxblyy02）</p><p><a data-ad-id="fee_910b904b27b886f7815b84c0785e247f" data-draft-node="block" data-draft-type="ad-link-card"></a></p><h4 id="文章详细url-https-api-zhihu-com-answers-3206062644"><a href="#文章详细url-https-api-zhihu-com-answers-3206062644" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3206062644"></a>文章详细url:<a href="https://api.zhihu.com/answers/3206062644">https://api.zhihu.com/answers/3206062644</a></h4><h2 id="私域流量和公域流量的区别"><a href="#私域流量和公域流量的区别" class="headerlink" title="私域流量和公域流量的区别?"></a>私域流量和公域流量的区别?</h2><h3 id="内容-19"><a href="#内容-19" class="headerlink" title="内容"></a>内容</h3><p data-pid="iFCyBH-L">我曾跟不同行业的专家有过合作，帮他们做抖音、小红书等公域。</p><p data-pid="alN4v7Df">我发现：<b>越专业的人，越难做好公域的内容。</b></p><p data-pid="AiNNgShh"><b>第一，专家讲话往往不接地气</b></p><p data-pid="CHqTYb0G">专家习惯讲专业概念，默认所有人都知道，但其实，大众比他们想象的要小白的多得多。</p><p data-pid="ej8IPee_">不是大众不聪明，而是大众不在专家的领域，没必要也没机会接触到这个概念。</p><p data-pid="KZAFKWUk">我曾和一位财税专家合作，帮他拍视频。整整3个月，他愣是不愿意把“进项票”这个词改掉。</p><p data-pid="aKexEKtc">在他看来，所有老板都应该知道什么叫进项票。</p><p data-pid="mWLJn5PZ">但作为一个学过会计学的小老板，我也是在聊过好多次之后，才理解了进项票的意思，以及怎么用。更别提其他人了。</p><p data-pid="KdV5VK80"><b>第二，专家总喜欢讲一些“冷门”话题</b></p><p data-pid="wdEU5E5u">很多专家会认为，我分享一些专业的话题，自然就能吸引来那些对这些话题感兴趣的观众。</p><p data-pid="mEoWjCTf">问题是，这些内容，压根就传不到这些感兴趣的观众那里。</p><p data-pid="Ck2CPaM4">特别是在抖音、小红书，内容全靠算法推荐，当第一波500人不愿意看，你的内容就再也没有流量了。</p><p data-pid="GD5QPGVa">所以，<b>在公域里，话题越普遍，内容越浅显易懂，越能引起关注。而越是专业的内容，接受度越低。</b></p><p data-pid="7sIyPQ5t">这也是为什么很多专家，会瞧不起那些流量很大的“明星专家”，说他们不过是哗众取宠。</p><p data-pid="BY6GY22V">实际上，他们只是更懂得遵循传播的逻辑罢了。</p><p data-pid="xpxNbgVR"><b>总之，在公域里，不需要专业，而是要让大家觉得你很专业。</b></p><p data-pid="nedinxTY">这样你才能吸引到足够多的人，到你的私域里，听你讲一些更深度的话题。</p><p data-pid="ngWzPSLj">而到了私域，你才需要拿出真本事。特别是在你要成交客户的时候，你需要展示自己第一无二的洞察，来说服你的客户。</p><p data-pid="EgrJFYPy">—《<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/hcV50KYhO2pbjn_3wr58VQ" rel="nofollow noreferrer" target="_blank">写篇带货的文章为什么这么难？</a>》</p><p data-pid="FGQcZKDH">有趣的是，现实中很多人是反着来做的，公域的内容很专业，私域的内容倒是草草了事。</p><p data-pid="9InI0a3x">他们把私域的内容，交给了月薪几千的文案，期待他们去成交几千上万的产品或者服务。</p><p data-pid="eMltOcyz">然后在看到惨淡的结果后，把责任推给公域，认为还是流量太少，于是加大流量获取，做深公域内容……</p><p data-pid="fzbIsDCT">他们宁愿在公域内容上，花上几万、十几万的流量费，却不愿在私域上，花一点小钱，请我们这样专业的私域内容团队。</p><p data-pid="J86RwHA9">所以，我才在《<a class="wrap external" href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/pDzTcBPqiI3zjJfSAF38Lw" rel="nofollow noreferrer" target="_blank">卖不出产品，内容再干货，也没有意义</a>》建议到：现在开始，停止写所谓的专业、干货内容，多写转化型内容。</p><p data-pid="7ij01_7w">在真正的内容营销者眼里，内容只有两类：</p><p data-pid="2Vk3jABC">第一类，用户看完很有收获，然后下单付钱；</p><p data-pid="hyLTDLPY">第二类，用户看完很有收获，但看完也就看完了。</p><p data-pid="Egc5Pd-q">没人会责备写出第二类内容的人，但可惜的是，客户没有因为你的内容好，而最终为你的产品买单。</p><p data-pid="qrBMhaql">很多人觉得要写，是想着用干货内容吸引流量，再变现，但其实这里有2个陷阱：</p><p data-pid="bIMZcN39"><b>一：写干货内容并不能带来流量</b></p><p data-pid="5v3MzWkk">大多数公司的用户，其实非常小众。写给他们看的内容，必然同样小众，这意味着，你的内容不会引起太多的关注。</p><p data-pid="7KHtw8vZ"><b>二：为了流量的干货内容带不来客户</b></p><p data-pid="MWyd9JpT">怎样才能带来更多的关注呢？很简单，写爆款文章。</p><p data-pid="vRf3TrQf">这时来关注你的人，是因为那个“话题”，对你的公司、你的产品，则完全没有兴趣。</p><p data-pid="6oUvYjF9">当哪天你开始介绍产品的时候，也就是他们取关的时候。</p><p data-pid="7S27HWGR">所以，不要再写干货内容了，你不需要别人认可你的文笔好、很专业，你的内容应该只为那些可能愿意为你付费的人而写。</p><p data-pid="6DG1rAJJ">写那些用户看完很有收获，然后下单付钱，或者留下意向信息的内容。</p><p data-pid="JqJ2cF4z">站在业务的角度，再干货的内容，再有价值的分享，没有带来客户，没有把产品卖出去，也没有意义。</p><p data-pid="44UoduYq">— END —</p><p data-pid="LU-jjcOK">给新朋友的介绍：我是「私域内容雇佣兵」蟹老板，前百万财经号编辑，10W+文章作者，曾用内容获得客户线索1W+，带货1000W+。目前在做一人公司，帮助中小企业做出在私域里吊打同行、拿到业务结果的内容。私信我，雇我给你做私域。</p><h4 id="文章详细url-https-api-zhihu-com-answers-3284751160"><a href="#文章详细url-https-api-zhihu-com-answers-3284751160" class="headerlink" title="文章详细url:https://api.zhihu.com/answers/3284751160"></a>文章详细url:<a href="https://api.zhihu.com/answers/3284751160">https://api.zhihu.com/answers/3284751160</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据杂烩" scheme="http://blog.ioimp.top/categories/%E6%95%B0%E6%8D%AE%E6%9D%82%E7%83%A9/"/>
    
    
    <category term="私域" scheme="http://blog.ioimp.top/tags/%E7%A7%81%E5%9F%9F/"/>
    
    <category term="爬虫数据" scheme="http://blog.ioimp.top/tags/%E7%88%AC%E8%99%AB%E6%95%B0%E6%8D%AE/"/>
    
    <category term="“知识库备份&quot;" scheme="http://blog.ioimp.top/tags/%E2%80%9C%E7%9F%A5%E8%AF%86%E5%BA%93%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>持续集成与容器管理</title>
    <link href="http://blog.ioimp.top/2023/11/16/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    <id>http://blog.ioimp.top/2023/11/16/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</id>
    <published>2023-11-16T08:44:40.000Z</published>
    <updated>2023-11-16T08:54:36.627Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- Jenkins，Rancher ，influxDB ，cAdvisor，Grafana --><h1 id="持续集成与容器管理"><a href="#持续集成与容器管理" class="headerlink" title="持续集成与容器管理"></a>持续集成与容器管理</h1><p>学习目标：</p><ul><li>掌握DockerMaven插件的使用</li><li>掌握持续集成工具Jenkins的安装与使用</li><li>掌握容器管理工具Rancher的安装与使用</li><li>掌握时间序列数据库influxDB的安装与使用</li><li>掌握容器监控工具cAdvisor的安装与使用</li><li>掌握图表工具Grafana的使用</li></ul><h1 id="1-DockerMaven插件"><a href="#1-DockerMaven插件" class="headerlink" title="1 DockerMaven插件"></a>1 DockerMaven插件</h1><p>微服务部署有两种方法：</p><p>（1）手动部署：首先基于源码打包生成jar包（或war包）,将jar包（或war包）上传至虚拟机并拷贝至JDK容器。</p><p>（2）通过Maven插件自动部署。</p><p>对于数量众多的微服务，手动部署无疑是非常麻烦的做法，并且容易出错。所以我们这里学习如何自动部署，这也是企业实际开发中经常使用的方法。</p><p>Maven插件自动部署步骤：</p><p>（1）修改宿主机的docker配置，让其可以远程访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>其中ExecStart&#x3D;后添加配置<code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></p><p>修改后如下：</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_17.png"></p><p>（2）刷新配置，重启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）在工程pom.xml 增加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>192.168.73.135:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>jdk1.8<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.73.135:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置会自动生成Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM jdk1.8</span><br><span class="line">ADD app.jar /</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure><p>（5）在windows的命令提示符下，进入工程tensquare_parent所在的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><p>进入tensquare_base 所在的目录，输入以下命令，进行打包和上传镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn docker:build  -DpushImage</span><br></pre></td></tr></table></figure><p>执行后，会有如下输出，代码正在上传</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_81.png"></p><p>（6）进入宿主机 , 查看镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY                              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">192.168.184.135:5000/tensquare_base   1.0-SNAPSHOT        83efa6b4478c        10 minutes ago      687.9 MB</span><br><span class="line">192.168.184.135:5000/jdk1.8             latest              507438a0158f        6 hours ago         584 MB</span><br><span class="line">jdk1.8                                  latest              507438a0158f        6 hours ago         584 MB</span><br></pre></td></tr></table></figure><p>输出如上内容，表示微服务已经做成镜像</p><p>浏览器访问  <a href="http://192.168.73.135:5000/v2/_catalog">http://192.168.73.135:5000/v2/_catalog</a>  ，输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;repositories&quot;:[&quot;tensquare_base&quot;]&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问  <a href="http://192.168.73.135:5000/v2/_catalog">http://192.168.73.135:5000/v2/_catalog</a>  ，输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;repositories&quot;:[&quot;tensquare_base&quot;]&#125;</span><br></pre></td></tr></table></figure><p>（7） 启动容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=base -p 9001:9001 192.168.73.135:5000/tensquare_base:1.0-SNAPSHOT </span><br></pre></td></tr></table></figure><h1 id="2-持续集成工具-Jenkins"><a href="#2-持续集成工具-Jenkins" class="headerlink" title="2 持续集成工具-Jenkins"></a>2 持续集成工具-Jenkins</h1><h2 id="2-1-什么是持续集成"><a href="#2-1-什么是持续集成" class="headerlink" title="2.1 什么是持续集成"></a>2.1 什么是持续集成</h2><p>​持续集成   Continuous integration ，简称CI</p><p>​随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p><p>​持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p><p>持续集成具有的特点：</p><ul><li>它是一个自动化的周期性的集成测试过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预；</li><li>需要有专门的集成服务器来执行集成构建；</li><li>需要有代码托管工具支持，我们下一小节将介绍Git以及可视化界面Gogs的使用</li></ul><p>持续集成的作用：</p><ul><li>保证团队开发人员提交代码的质量，减轻了软件发布时的压力；</li><li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li></ul><h2 id="2-2-Jenkins简介"><a href="#2-2-Jenkins简介" class="headerlink" title="2.2 Jenkins简介"></a>2.2 Jenkins简介</h2><p>​Jenkins，原名Hudson，2011年改为现在的名字，它 是一个开源的实现持续集成的软件工具。官方网站：<a href="http://jenkins-ci.org/">http://jenkins-ci.org/</a>。</p><p>​Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p><p>​特点：</p><ul><li>易安装：仅仅一个 java -jar jenkins.war，从官网下载该文件后，直接运行，无需额外的安装，更无需安装数据库；</li><li>易配置：提供友好的GUI配置界面；</li><li>变更支持：Jenkins能从代码仓库（Subversion&#x2F;CVS）中获取并产生代码更新列表并输出到编译输出信息中；</li><li>支持永久链接：用户是通过web来访问Jenkins的，而这些web页面的链接地址都是永久链接地址，因此，你可以在各种文档中直接使用该链接；</li><li>集成E-Mail&#x2F;RSS&#x2F;IM：当完成一次集成时，可通过这些工具实时告诉你集成结果（据我所知，构建一次集成需要花费一定时间，有了这个功能，你就可以在等待结果过程中，干别的事情）；</li><li>JUnit&#x2F;TestNG测试报告：也就是用以图表等形式提供详细的测试报表功能；</li><li>支持分布式构建：Jenkins可以把集成构建等工作分发到多台计算机中完成；</li><li>文件指纹信息：Jenkins会保存哪次集成构建产生了哪些jars文件，哪一次集成构建使用了哪个版本的jars文件等构建记录；</li><li>支持第三方插件：使得 Jenkins 变得越来越强大</li></ul><h2 id="2-3-Jenkins安装"><a href="#2-3-Jenkins安装" class="headerlink" title="2.3 Jenkins安装"></a>2.3 Jenkins安装</h2><h3 id="2-3-1-JDK安装"><a href="#2-3-1-JDK安装" class="headerlink" title="2.3.1 JDK安装"></a>2.3.1 JDK安装</h3><p>（1）将jdk-8u171-linux-x64.rpm上传至服务器（虚拟机）</p><p>（2）执行安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-8u171-linux-x64.rpm</span><br></pre></td></tr></table></figure><p>RPM方式安装JDK，其根目录为：&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171-amd64</p><h3 id="2-3-2-Jenkins安装与启动"><a href="#2-3-2-Jenkins安装与启动" class="headerlink" title="2.3.2 Jenkins安装与启动"></a>2.3.2 Jenkins安装与启动</h3><p>（1）下载jenkins</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.jenkins.io/redhat/jenkins-2.83-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><p>或将jenkins-2.83-1.1.noarch.rpm上传至服务器</p><p>（2）安装jenkins</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jenkins-2.83-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><p>（3）配置jenkins</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p>修改用户和端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_USER=&quot;root&quot;</span><br><span class="line">JENKINS_PORT=&quot;8888&quot;</span><br></pre></td></tr></table></figure><p>（4）启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start jenkins</span><br></pre></td></tr></table></figure><p>（5）访问链接 <a href="http://192.168.184.135:8888/">http://192.168.184.135:8888</a></p><p>从&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword中获取初始密码串 </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_1.png"></p><p>（6）安装插件  </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_86.png"></p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_2.png"></p><p>（7）新建用户</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_3.png"></p><p>完成安装进入主界面</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_4.png"></p><h2 id="2-4-Jenkins插件安装"><a href="#2-4-Jenkins插件安装" class="headerlink" title="2.4 Jenkins插件安装"></a>2.4 Jenkins插件安装</h2><p>我们以安装maven插件为例，演示插件的安装</p><p>（1）点击左侧的“系统管理”菜单 ,然后点击</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_5.png"></p><p>（2）选择“可选插件”选项卡，搜索maven，在列表中选择Maven Integration  ，点击“直接安装”按钮</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_6.png"></p><p>看到如下图时，表示已经完成</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_7.png"></p><h2 id="2-5-全局工具配置"><a href="#2-5-全局工具配置" class="headerlink" title="2.5 全局工具配置"></a>2.5 全局工具配置</h2><h3 id="2-5-1-安装Maven与本地仓库"><a href="#2-5-1-安装Maven与本地仓库" class="headerlink" title="2.5.1 安装Maven与本地仓库"></a>2.5.1 安装Maven与本地仓库</h3><p>（1）将Maven压缩包上传至服务器（虚拟机）</p><p>（2）解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure><p>（3）移动目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-maven-3.5.4 /usr/local/maven</span><br></pre></td></tr></table></figure><p>（4）编辑setting.xml配置文件<code>vi /usr/local/maven/conf/settings.xml </code>，配置本地仓库目录,内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;/usr/local/repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><p>（5）将开发环境的本地仓库上传至服务器（虚拟机）并移动到&#x2F;usr&#x2F;local&#x2F;repository   。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv reponsitory_boot /usr/local/repository</span><br></pre></td></tr></table></figure><p>执行此步是为了以后在打包的时候不必重新下载，缩短打包的时间。</p><h3 id="2-5-2-全局工具配置"><a href="#2-5-2-全局工具配置" class="headerlink" title="2.5.2 全局工具配置"></a>2.5.2 全局工具配置</h3><p>选择系统管理，全局工具配置</p><p>（1）JDK配置</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_10.png"></p><p>设置javahome为 &#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171-amd64</p><p>（2）Git配置   （本地已经安装了Git软件）</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_11.png"></p><p>（3）Maven配置</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_12.png"></p><h2 id="2-6-代码上传至Git服务器"><a href="#2-6-代码上传至Git服务器" class="headerlink" title="2.6 代码上传至Git服务器"></a>2.6 代码上传至Git服务器</h2><h3 id="2-6-1-Gogs搭建与配置"><a href="#2-6-1-Gogs搭建与配置" class="headerlink" title="2.6.1 Gogs搭建与配置"></a>2.6.1 Gogs搭建与配置</h3><p>Gogs 是一款极易搭建的自助 Git 服务。</p><p>Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 <strong>所有平台</strong>，包括 Linux、Mac OS X、Windows 以及 ARM 平台。</p><p>地址：<a href="https://gitee.com/Unknown/gogs">https://gitee.com/Unknown/gogs</a></p><p>（1）下载镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gogs/gogs</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=gogs -p 10022:22 -p 3000:3000 -v /var/gogsdata:/data gogs/gogs</span><br></pre></td></tr></table></figure><p>（3）假设我的centos虚拟机IP为192.168.73.135   在地址栏输入<a href="http://192.168.73.135:3000/">http://192.168.73.135:3000</a>  会进入首次运行安装程序页面，我们可以选择一种数据库作为gogs数据的存储，最简单的是选择SQLite3。如果对于规模较大的公司，可以选择MySQL  </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_82.png"></p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_83.png"> </p><p>点击“立即安装”</p><p>这里的域名要设置为centos的IP地址,安装后显示主界面</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/8_5.png"></p><p>（4）注册</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/8_6.png"></p><p>（5）登录</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/8_9.png"></p><p>（6）创建仓库 <img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/8_1.png" alt="创建仓库"></p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_84.png"></p><h3 id="2-6-2-提交代码"><a href="#2-6-2-提交代码" class="headerlink" title="2.6.2 提交代码"></a>2.6.2 提交代码</h3><p>步骤：</p><p>（1）在本地安装git(Windows版本)</p><p>（2）在IDEA中选择菜单 :  File – settings ,  在窗口中选择Version Control –  Git</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/8_2.png"></p><p>（3）选择菜单VCS  –&gt; Enable Version Control Integration… </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/8_3.png"></p><p>选择Git</p><p>（4）设置远程地址:  右键点击工程选择菜单    Git –&gt; Repository   –&gt;Remotes…</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/8_4.png"></p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_85.png"></p><p>（5）右键点击工程选择菜单    Git –&gt; Add</p><p>（6）右键点击工程选择菜单    Git –&gt; Commit Directory…</p><p>（7）右键点击工程选择菜单    Git –&gt; Repository   –&gt; Push …</p><h2 id="2-7-任务的创建与执行"><a href="#2-7-任务的创建与执行" class="headerlink" title="2.7 任务的创建与执行"></a>2.7 任务的创建与执行</h2><p>（1）回到首页，点击新建按钮 .如下图，输入名称，选择创建一个Maven项目，点击OK</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_21.png"></p><p>（2）源码管理，选择Git</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_22.png"></p><p>（3）Build</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_23.png"></p><p>命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package docker:build -DpushImage</span><br></pre></td></tr></table></figure><p>用于清除、打包，构建docker镜像</p><p>最后点击“保存”按钮</p><p>（4）执行任务</p><h1 id="3-容器管理工具Rancher"><a href="#3-容器管理工具Rancher" class="headerlink" title="3 容器管理工具Rancher"></a>3 容器管理工具Rancher</h1><h2 id="3-1-什么是Rancher"><a href="#3-1-什么是Rancher" class="headerlink" title="3.1 什么是Rancher"></a>3.1 什么是Rancher</h2><p>​     Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙……Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应用部署和管理。</p><p>​      <a href="https://www.cnrancher.com/">https://www.cnrancher.com/</a></p><h2 id="3-2-Rancher安装"><a href="#3-2-Rancher安装" class="headerlink" title="3.2 Rancher安装"></a>3.2 Rancher安装</h2><p>（1）下载Rancher 镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rancher/server</span><br></pre></td></tr></table></figure><p>（2）创建Rancher容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=rancher -p 9090:8080 rancher/server</span><br></pre></td></tr></table></figure><p>（3）在浏览器输入地址： <a href="http://192.168.73.135:9090/">http://192.168.73.135:9090</a>  即可看到高端大气的欢迎页</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_31.png"></p><p>点击Got It  进入主界面</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_32.png"></p><p>（4）切换至中文界面</p><p>点击右下角的English 在弹出菜单中选择中文</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_33.png"></p><p>切换后我们就可以看到亲切的中文界面啦~  </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_34.png"></p><h2 id="3-3-Rancher初始化"><a href="#3-3-Rancher初始化" class="headerlink" title="3.3 Rancher初始化"></a>3.3 Rancher初始化</h2><h3 id="3-3-1-添加环境"><a href="#3-3-1-添加环境" class="headerlink" title="3.3.1  添加环境"></a>3.3.1  添加环境</h3><p>Rancher 支持将资源分组归属到多个<strong>环境</strong>。 每个环境具有自己独立的基础架构资源及服务，并由一个或多个用户、团队或组织所管理。</p><p>例如，您可以创建独立的“开发”、“测试”及“生产”环境以确保环境之间的安全隔离，将“开发”环境的访问权限赋予全部人员，但限制“生产”环境的访问权限给一个小的团队。</p><p>（1）选择“Default –&gt;环境管理” 菜单</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_41.png"></p><p>（2）填写名称，点击“创建”按钮</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_42.png"></p><p>（3）按照上述步骤，添加十次方测试环境和生产环境</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_43.png"></p><p>（4）你可以通过点击logo右侧的菜单在各种环境下切换</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_44.png"></p><h3 id="3-3-2-添加主机"><a href="#3-3-2-添加主机" class="headerlink" title="3.3.2 添加主机"></a>3.3.2 添加主机</h3><p>（1）选择基础架构–&gt;主机 菜单，点击添加主机</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_46.png"></p><p>（2）拷贝脚本</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_47.png"></p><p>（3）在服务器（虚拟机）上运行脚本</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_48.png"></p><p>（4）点击关闭按钮后，会看到界面中显示此主机。我们可以很方便地管理主机的每个容器的开启和关闭</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_50.png"></p><h3 id="3-3-3-添加应用"><a href="#3-3-3-添加应用" class="headerlink" title="3.3.3 添加应用"></a>3.3.3 添加应用</h3><p>点击应用–&gt;全部(或用户)  ，点击“添加应用”按钮</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_52.png"></p><p>填写名称和描述</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_51.png"></p><p>点击“创建”按钮，列表中增加了新增的应用</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_53.png"></p><h2 id="3-4-应用部署"><a href="#3-4-应用部署" class="headerlink" title="3.4 应用部署"></a>3.4 应用部署</h2><h3 id="3-4-1-MySQL部署"><a href="#3-4-1-MySQL部署" class="headerlink" title="3.4.1 MySQL部署"></a>3.4.1 MySQL部署</h3><p>镜像：centos&#x2F;mysql-57-centos7   增加数据库服务</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_22.png"></p><p>注意：添加环境变量  MYSQL_ROOT_PASSWORD&#x3D;123456 </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_63.png"></p><p>点击创建按钮，完成创建    上述操作相当于以下docker命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 centos/mysql-57-centos7</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_23.png"></p><p>完成后服务列表中存在并且状态为激活    使用SQLyog测试链接，执行建表语句</p><h3 id="3-4-2-RabbitMQ部署"><a href="#3-4-2-RabbitMQ部署" class="headerlink" title="3.4.2 RabbitMQ部署"></a>3.4.2 RabbitMQ部署</h3><p>镜像：rabbitmq:management     端口映射5671   5672  4369    15671  15672  25672</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_24.png"></p><p>浏览器访问   <a href="http://192.168.184.136:15672/">http://192.168.184.136:15672/</a></p><h3 id="3-4-3-Redis部署"><a href="#3-4-3-Redis部署" class="headerlink" title="3.4.3 Redis部署"></a>3.4.3 Redis部署</h3><p>进入应用，点击添加服务，名称redis ，镜像redis ，端口映射6379 </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_21.png"></p><p>创建后使用客户端测试链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.184.144</span><br></pre></td></tr></table></figure><p>测试成功</p><h3 id="3-4-4-微服务部署"><a href="#3-4-4-微服务部署" class="headerlink" title="3.4.4 微服务部署"></a>3.4.4 微服务部署</h3><p>（1）搭建私有仓库</p><p>启动私有仓库容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure><p>打开浏览器 输入地址<a href="http://192.168.184.144:5000/v2/_catalog%E7%9C%8B%E5%88%B0%60%7B%22repositories%22:[]%7D%60">http://192.168.184.144:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空</p><p>修改daemon.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;192.168.184.144:5000&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><p>（2）修改docker配置，允许远程访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>其中ExecStart&#x3D;后添加配置<code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></p><p> 修改后刷新配置，冲洗服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）修改微服务工程，添加DockerMaven插件</p><p>（4）连接mysql数据库，执行建库脚本</p><p>（5）添加服务base-service   镜像192.168.184.144:5000&#x2F;tensquare_base:1.0-SNAPSHOT    端口映射9001</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_67.png"></p><p>（6）测试微服务  浏览器打开网址  <a href="http://192.168.184.144:9001/label">http://192.168.184.144:9001/label</a>   看是否可以看到标签列表</p><h2 id="3-6-扩容与缩容"><a href="#3-6-扩容与缩容" class="headerlink" title="3.6 扩容与缩容"></a>3.6 扩容与缩容</h2><h3 id="3-6-1-扩容"><a href="#3-6-1-扩容" class="headerlink" title="3.6.1 扩容"></a>3.6.1 扩容</h3><p>（1）在Rancher将创建的base-service（基础信息微服务）删除</p><p>（2）重新创建base-service ，不设置端口映射</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_01.png"></p><p>（3）在选择菜单API  –&gt;WebHooks  ，点击“添加接收器”按钮</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/9_68.png"></p><p>（4）填写名称等信息，选择要扩容的服务，点击创建按钮</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_05.png"></p><p>（5）接收器列表中新增了一条记录  ，点击触发地址将地址复制到剪切板</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_06.png"></p><p>（6）使用postman测试：</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_07.png"></p><p>测试后，发现容器由原来的1个变为了3个</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_08.png"></p><h3 id="3-6-2-缩容"><a href="#3-6-2-缩容" class="headerlink" title="3.6.2 缩容"></a>3.6.2 缩容</h3><p>刚才我们实现了扩容，那么如何减少容器数量呢？我们来试试如何缩容</p><p>（1）添加接收器  ,选择缩容，步长为1表示每次递减1个 ，点击创建按钮</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_10.png"></p><p>（2）创建成功后，复制触发地址</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_11.png"></p><p>（3）使用postman测试</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_12.png"></p><h1 id="4-influxDB"><a href="#4-influxDB" class="headerlink" title="4 influxDB"></a>4 influxDB</h1><h2 id="4-1-什么是influxDB"><a href="#4-1-什么是influxDB" class="headerlink" title="4.1 什么是influxDB"></a>4.1 什么是influxDB</h2><p>​influxDB是一个分布式时间序列数据库。cAdvisor仅仅显示实时信息，但是不存储监视数据。因此，我们需要提供时序数据库用于存储cAdvisor组件所提供的监控信息，以便显示除实时信息之外的时序数据。</p><h2 id="4-2-influxDB安装"><a href="#4-2-influxDB安装" class="headerlink" title="4.2 influxDB安装"></a>4.2 influxDB安装</h2><p>（1）下载镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tutum/influxdb</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -di \</span><br><span class="line">   -p 8083:8083 \</span><br><span class="line">   -p 8086:8086 \</span><br><span class="line">   --expose 8090 \</span><br><span class="line">   --expose 8099 \</span><br><span class="line">   --name influxsrv \</span><br><span class="line">   tutum/influxdb</span><br></pre></td></tr></table></figure><p>端口概述：  8083端口:web访问端口     8086:数据写入端口</p><p>打开浏览器   <a href="http://192.168.184.144:8083/">http://192.168.184.144:8083/</a></p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_71.png"></p><h2 id="4-3-influxDB常用操作"><a href="#4-3-influxDB常用操作" class="headerlink" title="4.3 influxDB常用操作"></a>4.3 influxDB常用操作</h2><h3 id="4-3-1-创建数据库"><a href="#4-3-1-创建数据库" class="headerlink" title="4.3.1 创建数据库"></a>4.3.1 创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &quot;cadvisor&quot;</span><br></pre></td></tr></table></figure><p>回车创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES</span><br></pre></td></tr></table></figure><p>查看数据库</p><h3 id="4-3-2-创建用户并授权"><a href="#4-3-2-创建用户并授权" class="headerlink" title="4.3.2 创建用户并授权"></a>4.3.2 创建用户并授权</h3><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &quot;cadvisor&quot; WITH PASSWORD &#x27;cadvisor&#x27; WITH ALL PRIVILEGES</span><br></pre></td></tr></table></figure><p>查看用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW USRES</span><br></pre></td></tr></table></figure><p>用户授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on cadvisor to cadvisor</span><br><span class="line">grant WRITE on cadvisor to cadvisor</span><br><span class="line">grant READ on cadvisor to cadvisor</span><br></pre></td></tr></table></figure><h3 id="4-3-3-查看采集的数据"><a href="#4-3-3-查看采集的数据" class="headerlink" title="4.3.3 查看采集的数据"></a>4.3.3 查看采集的数据</h3><p>切换到cadvisor数据库，使用以下命令查看采集的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW MEASUREMENTS</span><br></pre></td></tr></table></figure><p>现在我们还没有数据，如果想采集系统的数据，我们需要使用<strong>Cadvisor</strong>软件来实现</p><h1 id="5-cAdvisor"><a href="#5-cAdvisor" class="headerlink" title="5 cAdvisor"></a>5 cAdvisor</h1><h2 id="5-1-什么是cAdvisor"><a href="#5-1-什么是cAdvisor" class="headerlink" title="5.1 什么是cAdvisor"></a>5.1 什么是cAdvisor</h2><p>​Google开源的用于监控基础设施应用的工具，它是一个强大的监控工具，不需要任何配置就可以通过运行在Docker主机上的容器来监控Docker容器，而且可以监控Docker主机。更多详细操作和配置选项可以查看Github上的cAdvisor项目文档。</p><h2 id="5-2-cAdvisor安装"><a href="#5-2-cAdvisor安装" class="headerlink" title="5.2 cAdvisor安装"></a>5.2 cAdvisor安装</h2><p>（1）下载镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull google/cadvisor</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true --link influxsrv:influxsrv --name=cadvisor google/cadvisor -storage_driver=influxdb -storage_driver_db=cadvisor -storage_driver_host=influxsrv:8086</span><br></pre></td></tr></table></figure><p>WEB前端访问地址</p><p><a href="http://192.168.184.144:8080/containers/">http://192.168.184.144:8080/containers/</a></p><p>性能指标含义参照如下地址</p><p><a href="https://blog.csdn.net/ZHANG_H_A/article/details/53097084">https://blog.csdn.net/ZHANG_H_A&#x2F;article&#x2F;details&#x2F;53097084</a></p><p>再次查看influxDB，发现已经有很多数据被采集进去了。</p><h1 id="6-Grafana"><a href="#6-Grafana" class="headerlink" title="6 Grafana"></a>6 Grafana</h1><h2 id="6-1-什么是Grafana"><a href="#6-1-什么是Grafana" class="headerlink" title="6.1 什么是Grafana"></a>6.1 什么是Grafana</h2><p>​Grafana是一个可视化面板（Dashboard），有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器。支持Graphite、zabbix、InfluxDB、Prometheus和OpenTSDB作为数据源。<br>Grafana主要特性：灵活丰富的图形化选项；可以混合多种风格；支持白天和夜间模式；多个数据源。</p><h2 id="6-2-Grafana安装"><a href="#6-2-Grafana安装" class="headerlink" title="6.2 Grafana安装"></a>6.2 Grafana安装</h2><p>（1）下载镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull grafana/grafana</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3001:3000  -e INFLUXDB_HOST=influxsrv -e INFLUXDB_PORT=8086 -e INFLUXDB_NAME=cadvisor -e INFLUXDB_USER=cadvisor -e INFLUXDB_PASS=cadvisor --link influxsrv:influxsrv --name grafana grafana/grafana</span><br></pre></td></tr></table></figure><p>（3）访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.184.144:3001</span><br></pre></td></tr></table></figure><p>用户名密码均为admin</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_41.png"></p><p>（4）登录后提示你修改密码</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_42.png"></p><p>（5）之后进入主页面</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_43.png"></p><h2 id="6-3-Grafana的使用"><a href="#6-3-Grafana的使用" class="headerlink" title="6.3 Grafana的使用"></a>6.3 Grafana的使用</h2><h3 id="6-3-1-添加数据源"><a href="#6-3-1-添加数据源" class="headerlink" title="6.3.1 添加数据源"></a>6.3.1 添加数据源</h3><p>（1）点击设置，DataSource </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_44.png"></p><p>（2）点击添加data source</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_45.png"></p><p>（3）为数据源起个名称，指定类型、地址、以及连接的数据库名、用户名和密码</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_46.png"></p><p>点击保存。数据源建立成功</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_47.png"></p><h3 id="6-3-2-添加仪表盘"><a href="#6-3-2-添加仪表盘" class="headerlink" title="6.3.2 添加仪表盘"></a>6.3.2 添加仪表盘</h3><p>（1）选择Dashboards –Manager  </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_48.png"></p><p>（2）点击“添加”按钮</p><p>（3）点击Graph  图标</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_49.png"></p><p>（4）出现下面图表的界面 ，点击Panel Title  选择Edit (编辑)</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_51.png"></p><p>（5）定义标题等基础信息</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_52.png"></p><p>（6）设置查询的信息为内存，指定容器名称</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_53.png"></p><p>（7）指定y轴的单位 为M</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_54.png"></p><p>（8）保存</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_55.png"></p><p>填写名称</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_56.png"></p><h3 id="6-4-3-预警通知设置"><a href="#6-4-3-预警通知设置" class="headerlink" title="6.4.3 预警通知设置"></a>6.4.3 预警通知设置</h3><p>（1）选择菜单  alerting–&gt; Notification channels</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_57.png"></p><p>（2）点击Add channel 按钮</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_58.png"></p><p>（3）填写名称，选择类型为webhook  ,填写钩子地址</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_59.png"></p><p>这个钩子地址是之前对base微服务扩容的地址</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_60.png"></p><p>（4）点击SendTest  测试  观察基础微服务是否增加容器</p><p>（5）点击save保存</p><p>（6）按照同样的方法添加缩容地址</p><h3 id="6-4-4-仪表盘预警设置"><a href="#6-4-4-仪表盘预警设置" class="headerlink" title="6.4.4 仪表盘预警设置"></a>6.4.4 仪表盘预警设置</h3><p>（1）再次打开刚刚编辑的仪表盘</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_61.png"></p><p>（2）点击 Create Alert </p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_62.png"></p><p>设置预警线</p><p>（3）选择通知</p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_63.png"></p><p><img src="/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/image/10_64.png"></p><p>保存更改</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Java学习" scheme="http://blog.ioimp.top/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Jenkins" scheme="http://blog.ioimp.top/tags/Jenkins/"/>
    
    <category term="Rancher" scheme="http://blog.ioimp.top/tags/Rancher/"/>
    
    <category term="influxDB" scheme="http://blog.ioimp.top/tags/influxDB/"/>
    
    <category term="cAdvisor" scheme="http://blog.ioimp.top/tags/cAdvisor/"/>
    
    <category term="Grafana" scheme="http://blog.ioimp.top/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>ES6模块化</title>
    <link href="http://blog.ioimp.top/2023/11/16/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://blog.ioimp.top/2023/11/16/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2023-11-16T01:51:36.000Z</published>
    <updated>2023-11-16T08:30:58.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://blog.ioimp.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="http://blog.ioimp.top/tags/ES6/"/>
    
    <category term="前端学习" scheme="http://blog.ioimp.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
